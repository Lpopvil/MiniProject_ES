-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_14_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_14_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000100000110110101101100", 
    1 => "00111101100000111001111011011100", 
    2 => "10111110001111101011101110110101", 
    3 => "10111100000001001111101000110000", 
    4 => "10111110001011100011110010010110", 
    5 => "00111101111100011101110111000000", 
    6 => "10111101101111101100001111010110", 
    7 => "00111110010010000011001001101110", 
    8 => "10111101111101010111010101011110", 
    9 => "00111110000011111011111111001010", 
    10 => "00111110000111111101100011111100", 
    11 => "00111101111110000100111001010100", 
    12 => "10111011011111111100101101000000", 
    13 => "10111101010011111011110111101000", 
    14 => "00111011000110110011011011000000", 
    15 => "00111100111010100111010100000000", 
    16 => "10111101101001110011001000000100", 
    17 => "00111101101001111100111000001100", 
    18 => "10111101100010000101011100110010", 
    19 => "10111010111000110001110010000000", 
    20 => "00111110000010001010111110110000", 
    21 => "00111101100111101111100100110000", 
    22 => "10111110001011100011001010100110", 
    23 => "00111110010101010011010100111100", 
    24 => "10111110001001000010110000001000", 
    25 => "10111110001110001000101000100110", 
    26 => "10111101100000110010101000110100", 
    27 => "10111101101010100011111100101000", 
    28 => "00111110001101100010101000111100", 
    29 => "10111101111010101110001011110010", 
    30 => "10111110000010011110110100111001", 
    31 => "00111110010001010000010010100100", 
    32 => "10111110010000000100101100110101", 
    33 => "10111101111010110010001010001000", 
    34 => "10111101011010010111100100000100", 
    35 => "10111110010101111011010000000000", 
    36 => "00111110001000110101010101111100", 
    37 => "00111110010101110101110011101110", 
    38 => "10111101110010010110000000001010", 
    39 => "10111110000111110110110101011100", 
    40 => "00111100010010101100100111110000", 
    41 => "10111110000110010100010010000100", 
    42 => "10111110000010100100001001111010", 
    43 => "10111110000000110001011110101100", 
    44 => "00111110001100001101011010000010", 
    45 => "10111110010011110000101111010001", 
    46 => "10111101001000111011100101001100", 
    47 => "00111100101110000111100001100000", 
    48 => "10111110010011101111011010000011", 
    49 => "10111101111110000000111001101100", 
    50 => "00111101101101000111100001001100", 
    51 => "10111100100100100100101101000000", 
    52 => "10111101111101100100110110000000", 
    53 => "00111101110110110111110101101100", 
    54 => "10111110000100000110010110000111", 
    55 => "10111100000011110111000100010000", 
    56 => "10111110000101110101110000001111", 
    57 => "10111011100001000011001111100000", 
    58 => "10111101000110110111101011101100", 
    59 => "00111101100110011000011110000000", 
    60 => "00111011000111100011001011000000", 
    61 => "00111101001111111110111110100000", 
    62 => "00111110000111011110010111010010", 
    63 => "10111011010010000011101110000000", 
    64 => "00111110000010001010101011001100", 
    65 => "10111101010001110010101011011000", 
    66 => "00111101101110010100000010010100", 
    67 => "10111101110011001101110100011101", 
    68 => "10111101011101110011101101110100", 
    69 => "10111110000100111101010110011011", 
    70 => "10111110000010100010011010000010", 
    71 => "10111101101011010101101111110010", 
    72 => "00111110000010001101100010111000", 
    73 => "10111110010110011010001111010110", 
    74 => "10111101111111011011001110100001", 
    75 => "10111100111100010010100110000000", 
    76 => "10111100011010111110011111100000", 
    77 => "00111101101010111010000110001100", 
    78 => "10111100111011001101101100001000", 
    79 => "10111100111011111000011010101000", 
    80 => "10111110001010110010011010001000", 
    81 => "00111100101000111001100110110000", 
    82 => "10111101111110101010000011100100", 
    83 => "00111101110110101100001111101000", 
    84 => "00111100111100010101111011101000", 
    85 => "10111110010101101001101110111111", 
    86 => "00111110010110001110010100101000", 
    87 => "00111110001101011010010001111110", 
    88 => "10111110010010000101101011111101", 
    89 => "10111110001111011000000011000101", 
    90 => "10111101110111111011001110100010", 
    91 => "00111110000110000111010111000000", 
    92 => "00111101100001001100001101011100", 
    93 => "00111101011010010101111101111000", 
    94 => "00111101010011111000000011111000", 
    95 => "10111110001010011011001111110011", 
    96 => "00111110010110000101101000001010", 
    97 => "10111101111100100011000111010101", 
    98 => "00111110001001001011101000010110", 
    99 => "00111110000110101110010110001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_14 is
    component nn_inference_hwmm_layer1_layer1_weights_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_14_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


