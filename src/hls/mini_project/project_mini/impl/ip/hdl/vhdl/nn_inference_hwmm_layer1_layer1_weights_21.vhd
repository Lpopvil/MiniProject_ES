-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_21_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_21_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010010110110010110101100", 
    1 => "00111001101011000011000000110011", 
    2 => "10111110001100100110111001001101", 
    3 => "00111110000010010000101011110000", 
    4 => "00111100100010000110011010000100", 
    5 => "00111101110010111001111101001010", 
    6 => "10111110010011000101010100010100", 
    7 => "00111110001001111010110000011000", 
    8 => "10111110011001110101110101001010", 
    9 => "00111110000101101001101010011111", 
    10 => "10111110011100100100100010100100", 
    11 => "10111110000010000001001101100001", 
    12 => "00111100111111111010100101110011", 
    13 => "00111100110000001011101100101010", 
    14 => "00111110001111111000000011010110", 
    15 => "00111101100100110100001001010000", 
    16 => "00111101000100000001011001010100", 
    17 => "00111110000000000110111101101001", 
    18 => "00111010101001000011100010011011", 
    19 => "00111101011010011110000000110111", 
    20 => "10111100010010100101110011010101", 
    21 => "00111110010000001010111100111000", 
    22 => "10111110010101001111101000111110", 
    23 => "00111110001000011111111010001110", 
    24 => "10111101111001011010001000111000", 
    25 => "00111110000101001010000010001111", 
    26 => "00111110000010101111100010011001", 
    27 => "00111101010011010010110111011110", 
    28 => "00111100110000000110011010110001", 
    29 => "10111110000110111101000011011110", 
    30 => "10111110001110010100000110010010", 
    31 => "00111110000101110000011111000000", 
    32 => "00111100100011011011011010011011", 
    33 => "00111101111100001110110111010110", 
    34 => "00111101100000001000000111000011", 
    35 => "00111101110011111100010100110111", 
    36 => "10111110011000100010011111101011", 
    37 => "00111110001011000011100011001010", 
    38 => "00111110001111111100000101101101", 
    39 => "10111101100010111001111110111111", 
    40 => "10111110001111011111010000010100", 
    41 => "10111110011100000010000111010011", 
    42 => "10111110000001001000000101001011", 
    43 => "10111101010001110010110100101010", 
    44 => "00111101101101111011001010111111", 
    45 => "00111101100110000110011100101110", 
    46 => "10111101000010101000110000011001", 
    47 => "10111101101100110110100011111110", 
    48 => "00111010101101101111000111011111", 
    49 => "10111101000011110000010011101110", 
    50 => "10111110000011001100111101110101", 
    51 => "00111011101110011101110001010101", 
    52 => "10111101111111111101011111101100", 
    53 => "10111110011100101011100011001000", 
    54 => "00111101011111100011110101011001", 
    55 => "10111110001110011000100100110110", 
    56 => "00111110001000010011101010101110", 
    57 => "10111101111110110001101011110100", 
    58 => "10111101110011110100010011001001", 
    59 => "10111100011111010000001011001100", 
    60 => "00111010000011101111111101001010", 
    61 => "10111101000000001111101100010101", 
    62 => "10111101101110101110100000001111", 
    63 => "00111110001000111100110111010011", 
    64 => "10111110010000001111100001011110", 
    65 => "00111101001011000110000100110010", 
    66 => "10111110010110010111110010110111", 
    67 => "10111010000001001101011111011100", 
    68 => "10111101110001110101101111001001", 
    69 => "00111110001011010001000011011100", 
    70 => "10111110000000011111100001101100", 
    71 => "10111100011110010111100000111110", 
    72 => "10111110000000101101100110110101", 
    73 => "00111110000011011101000100110011", 
    74 => "10111100110001000010101011100000", 
    75 => "10111101110011111000000010010000", 
    76 => "00111101101000010110011010100101", 
    77 => "00111100110000111111111110101001", 
    78 => "00111110001000110100101111011011", 
    79 => "10111110010000010100001001110100", 
    80 => "00111110001111111110011000101011", 
    81 => "10111100100010000001100001011011", 
    82 => "10111110001101010000010110010000", 
    83 => "00111101100100010100001111001011", 
    84 => "00111110000001011000000000010101", 
    85 => "00111101111111000001111000101010", 
    86 => "00111101010101100110000010000000", 
    87 => "10111110001001011000011101011111", 
    88 => "00111010110000111011010110101100", 
    89 => "10111101001100110110001000111111", 
    90 => "00111100100010001011110000110110", 
    91 => "10111101000010111111100100110001", 
    92 => "10111101011010101011101100101100", 
    93 => "00111101111010000000001101100111", 
    94 => "00111101000100110011110100110011", 
    95 => "10111110010111110010111101000111", 
    96 => "10111110000100000011111010100111", 
    97 => "10111101000010000011101110000010", 
    98 => "00111100111010010101001000111100", 
    99 => "10111110001111111111100100101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_21 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_21 is
    component nn_inference_hwmm_layer1_layer1_weights_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_21_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


