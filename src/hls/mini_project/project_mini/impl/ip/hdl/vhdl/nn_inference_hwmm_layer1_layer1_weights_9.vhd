-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_9_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_9_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110101101000011111010000", 
    1 => "00111101110010101110000011111000", 
    2 => "00111101110110110110010001110100", 
    3 => "00111100101001000011001011000000", 
    4 => "10111110000001100101110010000110", 
    5 => "10111101011001010101000011010000", 
    6 => "10111011110111010011111000000000", 
    7 => "10111101111011101011100000010001", 
    8 => "10111101100100011010101000011100", 
    9 => "10111110010000010011011101001101", 
    10 => "10111101100110111010111101001010", 
    11 => "10111011111110001010011010000000", 
    12 => "10111110001101001101001101110010", 
    13 => "00111101111101000111011111111100", 
    14 => "00111110000010001110001111000000", 
    15 => "00111011111011010110010000000000", 
    16 => "00111110010001011000101001000100", 
    17 => "00111100001100001101001101110000", 
    18 => "10111110001010010101010111101110", 
    19 => "00111101101011111101110110011000", 
    20 => "00111110010100011011000000101000", 
    21 => "00111100011101101010101000000000", 
    22 => "10111101101111100000110000001000", 
    23 => "10111110000111001001110110111010", 
    24 => "10111101101100101010010010010010", 
    25 => "10111110000000000111101110000100", 
    26 => "10111110010010111110101110001011", 
    27 => "10111110000111100010111111111100", 
    28 => "10111101100011001111000100011010", 
    29 => "10111101010011010001100100001100", 
    30 => "10111101010001110101011010001100", 
    31 => "10111110001010110111111111111111", 
    32 => "00111101110010111011000011010000", 
    33 => "10111100110001011011101000100000", 
    34 => "00111110001000000100100011000110", 
    35 => "00111110001010110001001011000010", 
    36 => "10111101100000100101001110010010", 
    37 => "00111101100101101010111101011000", 
    38 => "10111110001011011001110011001100", 
    39 => "10111101101110101001111110001001", 
    40 => "10111110000001010000010001100001", 
    41 => "00111101111010010000010010111100", 
    42 => "10111110000010000101110101001100", 
    43 => "00111101001010000101000010100000", 
    44 => "00111100000110010101101110100000", 
    45 => "10111101100001001011010101100000", 
    46 => "10111110001111001000100000100111", 
    47 => "00111101110010110011100100000000", 
    48 => "10111110000000100001101010101100", 
    49 => "00111110000101101101000010100100", 
    50 => "00111110010010011010110011001000", 
    51 => "10111110010100011100101110110110", 
    52 => "00111110000000101100110000110010", 
    53 => "00111011111000000100010101000000", 
    54 => "10111110001110011001001111110101", 
    55 => "00111101101001111111000000010000", 
    56 => "00111011111000001010100111100000", 
    57 => "00111110001001101100110101011100", 
    58 => "10111110010011101000001110011100", 
    59 => "10111110000101010100000000101110", 
    60 => "00111110001111110101110110010100", 
    61 => "10111110000101111100101111100010", 
    62 => "00111110001000010100111001111010", 
    63 => "10111110001100101111111101010000", 
    64 => "00111101100101110100000100011100", 
    65 => "00111101110000010111100010111000", 
    66 => "10111101100000101000010110110010", 
    67 => "10111101011011110000011010100000", 
    68 => "00111101100001101111000110011100", 
    69 => "10111110000110001101101000001100", 
    70 => "00111110010000100101001100101010", 
    71 => "10111110001101000000101010010010", 
    72 => "10111110010010110110010101110111", 
    73 => "10111101011110110110011000011000", 
    74 => "10111110001100100010101111011000", 
    75 => "00111110001100110110101100101110", 
    76 => "10111101101110000111111110000111", 
    77 => "10111101001101011101101010111000", 
    78 => "10111010101111111101110010000000", 
    79 => "00111110001011111111110101001100", 
    80 => "00111101101110010000101011000000", 
    81 => "10111110001011100011011001101000", 
    82 => "00111101001100000101010001011000", 
    83 => "00111100101100110011000110101000", 
    84 => "00111101100010110000111001010000", 
    85 => "10111101110000000110011001001100", 
    86 => "10111101110000011010011100100011", 
    87 => "10111110001011101111111001111011", 
    88 => "10111101100010110111111001011000", 
    89 => "10111110010000011101001101000010", 
    90 => "10111110000011110111100010000111", 
    91 => "10111101100110110111010000111100", 
    92 => "10111101100011111011100101000000", 
    93 => "10111110010000110011100101110110", 
    94 => "10111110010011010011110011011110", 
    95 => "00111101001101011111110111000000", 
    96 => "00111110010000000010111001101100", 
    97 => "10111101010000111000111001110100", 
    98 => "10111101111110001010111111000011", 
    99 => "00111101111000000111110001010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_9 is
    component nn_inference_hwmm_layer1_layer1_weights_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_9_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


