-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_24_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_24_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110011111010101110111000110", 
    1 => "00111110011010011111001010110111", 
    2 => "10111101101101100010011010000000", 
    3 => "00111110000011111001101100101111", 
    4 => "00111110010000101001000111110000", 
    5 => "10111110001010010011110111111110", 
    6 => "10111101010101100110111001101011", 
    7 => "00111101010100101011111000111100", 
    8 => "00111101101100101010101110011100", 
    9 => "00111110011000100001110010011001", 
    10 => "00111101000001000001111110001001", 
    11 => "10111101100100010110110111010110", 
    12 => "10111110000101011110000001001101", 
    13 => "10111101001111000011001011001001", 
    14 => "10111110000010000100100011110010", 
    15 => "10111101111101100011101111100000", 
    16 => "10111101110100011100111110101111", 
    17 => "10111101011100001110010010010101", 
    18 => "10111101101100000111111111011101", 
    19 => "10111101010011110010100010010000", 
    20 => "00111110100010010011100100101010", 
    21 => "00111101101100001011110101110100", 
    22 => "00111101001111011010010011000000", 
    23 => "00111100001101010000100001011011", 
    24 => "10111101101100011101000101011010", 
    25 => "00111110001111110001000001010000", 
    26 => "00111110001111001001111100000111", 
    27 => "00111110001100111111100110110111", 
    28 => "00111110011001010100110111010010", 
    29 => "00111110000111100011001000000001", 
    30 => "00111110001100010010011011010100", 
    31 => "00111110011001101100011000101100", 
    32 => "00111110001000010001111011011100", 
    33 => "00111101100010011000100010010011", 
    34 => "10111110000110001100011101100101", 
    35 => "00111110011010000100000100001111", 
    36 => "10111101101100100111111110000111", 
    37 => "10111101000111001001001110100100", 
    38 => "10111101111111010011001010101000", 
    39 => "00111110001011101010101101011101", 
    40 => "00111101100000100000000111000110", 
    41 => "00111110000111000001000001000110", 
    42 => "00111101010011101110100111101000", 
    43 => "00111100100011011100110101101010", 
    44 => "10111101100111111010011101111101", 
    45 => "00111101100011010101100100100100", 
    46 => "00111110000101010000111101111001", 
    47 => "10111101000011110010010111100011", 
    48 => "00111110010101111110011010001011", 
    49 => "00111101101100000001100100101000", 
    50 => "00111110010100111111101011110110", 
    51 => "00111110000101101001111000111011", 
    52 => "00111101111100101000100011110001", 
    53 => "00111110011001100100010011011011", 
    54 => "00111100100101111000100000000110", 
    55 => "10111110010011000001001100011101", 
    56 => "00111100110001111001111001000001", 
    57 => "00111110000101111101100111100000", 
    58 => "00111101000000011000001010100101", 
    59 => "00111110010100110011111001110110", 
    60 => "00111101110101000110010110000110", 
    61 => "10111101110001101001110100101100", 
    62 => "00111101100110101011101001011001", 
    63 => "00111110011001100000000100110011", 
    64 => "10111110010000001110010110010001", 
    65 => "00111101110111101101100111100110", 
    66 => "00111110010001110110101010100111", 
    67 => "00111101111001110111000010100001", 
    68 => "00111101100001010000001011101010", 
    69 => "00111110000001010001100000010010", 
    70 => "10111101010001000110100011001111", 
    71 => "10111101111100011101100110100101", 
    72 => "10111101011111111101001100000110", 
    73 => "00111110001110001010011011110001", 
    74 => "00111100111100111000011011101100", 
    75 => "10111101001011100110110101100001", 
    76 => "00111100110110000011110010011010", 
    77 => "00111110001001100100111011111111", 
    78 => "00111101100100011101101011110010", 
    79 => "00111110010100000011011111111111", 
    80 => "10111100111111111110001100000010", 
    81 => "00111101101111011001101110010011", 
    82 => "00111100100101110011000000001010", 
    83 => "00111110010101000000101000000001", 
    84 => "00111100001001011101101010111010", 
    85 => "00111101110110001101111111010111", 
    86 => "00111101101001000000000100100001", 
    87 => "00111100111110100001110011100010", 
    88 => "10111101110000100101100100110000", 
    89 => "10111101010100011001010011001000", 
    90 => "00111100111100110000011100001001", 
    91 => "10111101101001010000000011101000", 
    92 => "00111110001010001000001110010100", 
    93 => "00111101001010110001110111010100", 
    94 => "00111101110100000001110101011011", 
    95 => "00111101111001101010001111010001", 
    96 => "10111011110110110110010010111001", 
    97 => "10111101101011010011101000011010", 
    98 => "00111100001110111010001010000110", 
    99 => "00111101001000100110011001011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_24 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_24 is
    component nn_inference_hwmm_layer1_layer1_weights_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_24_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


