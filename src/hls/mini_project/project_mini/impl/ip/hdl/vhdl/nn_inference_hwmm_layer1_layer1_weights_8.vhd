-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_8_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010001010100010001000000000", 
    1 => "00111110001111110010111001000000", 
    2 => "10111110010100101010100100001011", 
    3 => "10111101110001000011000110000001", 
    4 => "00111110010001100000101101110110", 
    5 => "10111101001111100110000010111000", 
    6 => "10111110001011100011000010100110", 
    7 => "10111110001110101100010100111000", 
    8 => "00111101101000000011000110111000", 
    9 => "00111110010000010101011111100010", 
    10 => "10111101110101000010110110111100", 
    11 => "10111110000111010001000010011010", 
    12 => "00111100100101110110110100000000", 
    13 => "10111110001110111000001101010000", 
    14 => "10111110010001000110001100010011", 
    15 => "00111110001011101011011101111000", 
    16 => "10111101101010101101110100100100", 
    17 => "00111110000001110111010010000110", 
    18 => "10111101100001010100110011010100", 
    19 => "10111110001111110010000101001001", 
    20 => "10111110001100110111110001000010", 
    21 => "00111110000101010001010011011100", 
    22 => "10111110000011111110100111011111", 
    23 => "10111110000111011001101111010011", 
    24 => "10111110001111111100110100101010", 
    25 => "10111101001000011001011000011100", 
    26 => "10111110001111111111111101011001", 
    27 => "00111110001111001011010001011010", 
    28 => "10111110010110000110001100011110", 
    29 => "10111110001101100101000001000000", 
    30 => "00111110000111111101001000000100", 
    31 => "00111100100111010111010001100000", 
    32 => "00111110010100010101110101001110", 
    33 => "10111101100000000110101100111100", 
    34 => "00111110000011011001001001011010", 
    35 => "00111110010001001011000010100100", 
    36 => "10111100011000101010101111100000", 
    37 => "00111101111110111110010000100000", 
    38 => "10111101001000011111101001111000", 
    39 => "00111110000110011101010100000010", 
    40 => "00111101101101101101000110100100", 
    41 => "00111110001100111110001010011000", 
    42 => "10111101110000100111000111000010", 
    43 => "10111101111101111010101110101110", 
    44 => "00111101011001011101111001100000", 
    45 => "00111100111110000101001100111000", 
    46 => "00111110001011111010010011110000", 
    47 => "00111110001001110101110001101010", 
    48 => "00111110000100110111000001100000", 
    49 => "10111110001001111111011100110111", 
    50 => "10111110000010101010011001101010", 
    51 => "00111110010000111001011111000010", 
    52 => "00111101100101010010011001010100", 
    53 => "00111101010111110110101011110000", 
    54 => "00111101100100110011001100011000", 
    55 => "00111110010010000010101101101000", 
    56 => "10111110001110010011110001011000", 
    57 => "10111101010010000011110000011100", 
    58 => "10111110000111000011011101111100", 
    59 => "10111101010010001100000111101000", 
    60 => "10111101100100000010000000001010", 
    61 => "10111110001111011010000111110111", 
    62 => "10111110010001010000001000010010", 
    63 => "10111100101111010000100111001000", 
    64 => "10111110000100010001111001001010", 
    65 => "10111110000100110010110100000100", 
    66 => "10111101101101111000000110110110", 
    67 => "10111110010011000001001011001100", 
    68 => "00111101100001001011001101010100", 
    69 => "00111011110010000000111100100000", 
    70 => "10111101010101001011000011000000", 
    71 => "00111110001000111011010000010000", 
    72 => "10111110010100111101001001110101", 
    73 => "00111101110111110110000101101100", 
    74 => "00111101100010011001001010011000", 
    75 => "00111110000000001100000100111100", 
    76 => "10111110001111011011100000101010", 
    77 => "00111101100111111101010101111100", 
    78 => "10111110010000100010000001011110", 
    79 => "10111101111110101101100100111011", 
    80 => "00111101010010111000000001011000", 
    81 => "00111110000100010110100100011100", 
    82 => "10111101110001011100111100110010", 
    83 => "10111110000100010011100010011000", 
    84 => "10111110010010101111111110011000", 
    85 => "10111110000111011000011111011101", 
    86 => "10111101001100001010100100011000", 
    87 => "10111101101011011100001000011000", 
    88 => "00111101010010011000101100011000", 
    89 => "10111101110111011000111011010100", 
    90 => "10111100111011011011011001010000", 
    91 => "00111110000011111001111100000000", 
    92 => "10111101110010111100001000111001", 
    93 => "10111101010100100100000000000100", 
    94 => "00111110001010100100011101101110", 
    95 => "10111101110011000000110011001010", 
    96 => "00111110000101010000111010000010", 
    97 => "00111101010111000010101010001000", 
    98 => "10111101111001000110100001001100", 
    99 => "10111101010111111011010111100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_8 is
    component nn_inference_hwmm_layer1_layer1_weights_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_8_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


