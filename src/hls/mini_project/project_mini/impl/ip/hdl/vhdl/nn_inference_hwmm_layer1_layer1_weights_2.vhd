-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010110110100100010101100", 
    1 => "00111110001110001111100100100000", 
    2 => "00111110000000111011100001011001", 
    3 => "00111110011111100010110101000010", 
    4 => "00111101000101101000011100101000", 
    5 => "00111110011111011101101011011010", 
    6 => "00111110000001001111000010000100", 
    7 => "00111101100101110100101111010101", 
    8 => "00111110100011011110100110011101", 
    9 => "00111101101010101110010001110000", 
    10 => "10111101111101010110100001101100", 
    11 => "00111101001111100100111010100001", 
    12 => "00111110001001110111000110111001", 
    13 => "10111011001111100010101001110111", 
    14 => "00111101001101001000111101100010", 
    15 => "00111101010000100101001000110001", 
    16 => "00111101100101000110010110011111", 
    17 => "10111101101101000101000001110011", 
    18 => "00111110100100110001010101000010", 
    19 => "00111010101000110111101011101100", 
    20 => "00111101011000110010101101110110", 
    21 => "10111110000011000100010100110110", 
    22 => "10111110000010100011000011110000", 
    23 => "00111101111011001101101010101001", 
    24 => "00111110010100010110010101010100", 
    25 => "00111100010001100011000001101001", 
    26 => "10111110000110010111110010011010", 
    27 => "00111100010101000101110010110100", 
    28 => "00111110001001000100110111100110", 
    29 => "00111110001111101110000011001111", 
    30 => "10111101011100111101011111110011", 
    31 => "10111100100111110000001011000000", 
    32 => "00111101111010111110001010101000", 
    33 => "00111110010010000001111001111100", 
    34 => "00111100011011111010100011101101", 
    35 => "00111110000100100001011001111100", 
    36 => "00111110001100100000100110111100", 
    37 => "10111101101011010000111000101001", 
    38 => "10111101001000011100011010001101", 
    39 => "00111110001101000000001011011000", 
    40 => "10111101110000011111001100001101", 
    41 => "00111100010111100101101001110011", 
    42 => "00111011110111000111001001100111", 
    43 => "10111101110010001011101011011000", 
    44 => "10111101100111010100111000110010", 
    45 => "00111110100010111111111010011011", 
    46 => "10111110000000101101011001010000", 
    47 => "10111110001111100000001101011011", 
    48 => "00111110000001010000011101011010", 
    49 => "00111110001001011111001001000111", 
    50 => "00111110011000110101011110000011", 
    51 => "00111101111111100110110101110110", 
    52 => "00111110000101011101100111000000", 
    53 => "10111011110100011011010010000011", 
    54 => "00111101100001011110101010101001", 
    55 => "00111110011010111101010111101111", 
    56 => "00111110011011111110111111011000", 
    57 => "00111101101001010101110001101000", 
    58 => "00111110000011000100010010101011", 
    59 => "10111101000010000011111110000000", 
    60 => "10111100000011110111010101101001", 
    61 => "00111110001101011110010101111001", 
    62 => "10111110001100010110101111111100", 
    63 => "00111110000111010000001001011010", 
    64 => "00111101111110010111110010010001", 
    65 => "10111101011010111110001000101111", 
    66 => "00111101011101001011110010010100", 
    67 => "00111110001101001011111010010100", 
    68 => "00111101101001000100111011110010", 
    69 => "00111101100101010101011111000010", 
    70 => "00111110001001111011010100011110", 
    71 => "00111110000100010110011110101101", 
    72 => "00111110001101011001000100110010", 
    73 => "00111101011001111010110100100011", 
    74 => "00111110001111001011101000000100", 
    75 => "00111101100011101100111001000010", 
    76 => "10111110000100101101111101000100", 
    77 => "00111100010111001110101100010110", 
    78 => "10111110000100110100110111101100", 
    79 => "10111100100101100000011011111100", 
    80 => "10111100100011110010010010111011", 
    81 => "00111110000001111011100001101101", 
    82 => "10111101011111001010001100010000", 
    83 => "00111110000111000010101001111001", 
    84 => "10111101100000010100010011111001", 
    85 => "00111101010010011110111011100101", 
    86 => "10111100111000100011011001111111", 
    87 => "00111100110011010101000100111000", 
    88 => "00111101001010000101110101000100", 
    89 => "00111110011110010011011000001100", 
    90 => "00111110001110011010000101011111", 
    91 => "10111101000110000010001111110110", 
    92 => "00111110000110110100101101001010", 
    93 => "10111101111010010101000011011111", 
    94 => "10111110011001111011001110100001", 
    95 => "00111101100110100000010110001011", 
    96 => "00111101001011010111101111011100", 
    97 => "10111110001011011101110011001110", 
    98 => "00111110011011001101111101101101", 
    99 => "00111110011101110000111110010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_2 is
    component nn_inference_hwmm_layer1_layer1_weights_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_2_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


