-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_20_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_20_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010011011101111010000000001", 
    1 => "10111101111010101011110011111110", 
    2 => "00111110100000101001100101100111", 
    3 => "00111101101110101101000100001110", 
    4 => "10111101101010011101100000010010", 
    5 => "10111100110101011101011101011100", 
    6 => "00111110011011000110001100110001", 
    7 => "00111110001110011001001000000011", 
    8 => "00111110010000101101001100010000", 
    9 => "00111110100111011100010110000001", 
    10 => "00111101101111111000110110110101", 
    11 => "00111110001101010001111000100000", 
    12 => "00111110010111110010011110010000", 
    13 => "00111110000101111001001100001001", 
    14 => "00111100111011001100101111110000", 
    15 => "00111101111011011110011001100001", 
    16 => "00111101000110011111010001111111", 
    17 => "00111110010000111111000001110011", 
    18 => "10111101111001101110101000000101", 
    19 => "10111011001001100011011111001010", 
    20 => "10111101111010001001001001011110", 
    21 => "10111101011000101100100101011101", 
    22 => "00111100001011110101101110011010", 
    23 => "00111110100011001010011011100111", 
    24 => "10111101000011101111001001011010", 
    25 => "10111100010000100011101100000011", 
    26 => "10111101001000001011010101000001", 
    27 => "00111110010001111100111001001000", 
    28 => "00111110010111101011110110001111", 
    29 => "00111110011111100100010110011101", 
    30 => "00111101010000001001111001100000", 
    31 => "10111110010000110001001111101110", 
    32 => "10111101101001111010000000001010", 
    33 => "00111110010001011101101100001001", 
    34 => "00111110100111000100000101011001", 
    35 => "10111011110011011101010011000000", 
    36 => "00111101010101101110110110011111", 
    37 => "00111110000011111010010100100011", 
    38 => "10111101010110010111001001010101", 
    39 => "00111110100011001110111010110000", 
    40 => "10111100000001110000101011001000", 
    41 => "00111101101001111111101110011001", 
    42 => "10111101011110010011100101100110", 
    43 => "00111110100010000000011010101101", 
    44 => "00111110001111111110011010000000", 
    45 => "00111110011111110001011010111111", 
    46 => "10111100011000011011010000110001", 
    47 => "00111110010011000000101110110101", 
    48 => "10111101100001100011110110010101", 
    49 => "00111110010011100000110011111111", 
    50 => "10111110000111011011001001001111", 
    51 => "00111101110101010001010000011101", 
    52 => "00111101101111001111110001100110", 
    53 => "10111101010000010010101101011111", 
    54 => "00111110101001110101110010001010", 
    55 => "00111110101100000011001001000110", 
    56 => "00111101111011101110110101001100", 
    57 => "00111100110110101000100101010000", 
    58 => "10111101110010100000100110001000", 
    59 => "00111110001100100001010100111110", 
    60 => "10111110010010101000000010101100", 
    61 => "00111110000101111110111010011001", 
    62 => "10111101111011001000010111111100", 
    63 => "00111110010010110110011010010101", 
    64 => "00111110100011111101100011011101", 
    65 => "00111110000000111111000111110010", 
    66 => "10111110000101110111111101101010", 
    67 => "00111101101010000011111000010110", 
    68 => "00111100111101100111001000111101", 
    69 => "10111110000010000011010101011100", 
    70 => "00111101010010000110001001000000", 
    71 => "10111110001000111001110010011010", 
    72 => "10111101111110011110000010011010", 
    73 => "00111100110001011110110011011000", 
    74 => "10111110001000110101110001110101", 
    75 => "10111110010011101000110010001101", 
    76 => "10111101110001111000010100000010", 
    77 => "10111110001100110100100111001101", 
    78 => "00111101110111011100110110010111", 
    79 => "00111101110000011010110101101100", 
    80 => "10111100110111101011100101111101", 
    81 => "10111101011100000011001011100110", 
    82 => "00111101100110100011101110100011", 
    83 => "10111110000101111010010111001100", 
    84 => "00111101000111001011100100010111", 
    85 => "10111110000011100011010010101100", 
    86 => "00111101010000010100010110001100", 
    87 => "10111110000111011100001010000101", 
    88 => "10111101110101000110001111100101", 
    89 => "10111101010111001010101000001100", 
    90 => "00111110001110000100000001111000", 
    91 => "10111110010010101100001001001011", 
    92 => "10111101100011101000111100001011", 
    93 => "10111100100101111110001011010101", 
    94 => "10111101110011110110100111100101", 
    95 => "10111110011000111111100110010010", 
    96 => "10111110001011111001000010001000", 
    97 => "10111100111000100101110111100111", 
    98 => "10111101101001100111101001011000", 
    99 => "00111110011100011001010010011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_20 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_20 is
    component nn_inference_hwmm_layer1_layer1_weights_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_20_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


