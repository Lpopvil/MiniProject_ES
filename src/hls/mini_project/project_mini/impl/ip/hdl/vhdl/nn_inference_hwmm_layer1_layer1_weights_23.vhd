-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_23_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100000111110000000011000", 
    1 => "00111110001001101101101000111100", 
    2 => "00111110010100100101110101011000", 
    3 => "10111101100101110000111000111110", 
    4 => "00111101111100000101011111101100", 
    5 => "10111101110011111001011011111000", 
    6 => "10111101110110010110001000010100", 
    7 => "00111110000001000111001011110110", 
    8 => "00111110000011011010101110010010", 
    9 => "00111101011100000100010110011000", 
    10 => "10111110001100110010111110101110", 
    11 => "10111110000011110111010010100110", 
    12 => "10111101111110011101001000111000", 
    13 => "10111011101001101000100101100000", 
    14 => "10111110000011101001100000011100", 
    15 => "10111101011110000001001001000100", 
    16 => "10111011001010111000111010000000", 
    17 => "00111110010101101011111110000010", 
    18 => "10111101101100100110011011100000", 
    19 => "10111110010100110101000100001011", 
    20 => "10111101110110110100011100011100", 
    21 => "10111100100111000011111100100000", 
    22 => "00111011101101101110011001000000", 
    23 => "10111101011000100101110000011100", 
    24 => "10111110001101001101100010101000", 
    25 => "00111101001101111100011001111000", 
    26 => "00111101010010101110010101101000", 
    27 => "10111110001001000000001001010011", 
    28 => "00111110010000110010111100011000", 
    29 => "10111110000110100110110010110000", 
    30 => "00111101111001100110010111001100", 
    31 => "10111101110011101111111101100011", 
    32 => "00111101101011101000000010011100", 
    33 => "00111110010110100011101011101000", 
    34 => "00111101000110101010101011101000", 
    35 => "10111101111100110110000000000101", 
    36 => "00111110000110101111111110001100", 
    37 => "10111110000011110111011111101110", 
    38 => "00111101101000100011000011011100", 
    39 => "10111100100001101000011100101000", 
    40 => "10111100011001000110011100100000", 
    41 => "10111101101110010101111111001010", 
    42 => "10111101111011101111100010000010", 
    43 => "10111001101010100110111000000000", 
    44 => "00111110001110100011101010101110", 
    45 => "00111110010000010011000001010010", 
    46 => "10111101101100100001101111111100", 
    47 => "10111101110110010110000010010110", 
    48 => "00111101111111100000110111011100", 
    49 => "10111110001100111010011010011110", 
    50 => "10111101110110010101101011011011", 
    51 => "10111110001010000001010001000011", 
    52 => "10111101011101010110010110000100", 
    53 => "10111110001110100101100101111001", 
    54 => "10111101101000101011100110011100", 
    55 => "10111101101001110100110010111000", 
    56 => "10111011010010111110110101000000", 
    57 => "10111110010001001111000010010110", 
    58 => "10111100110100011011101011111000", 
    59 => "00111101100011111111001010111100", 
    60 => "10111101000001000001100011010100", 
    61 => "10111100011100001111101001000000", 
    62 => "10111110010100011101100011001100", 
    63 => "00111110001100001101010000000100", 
    64 => "10111110000010111110001110111101", 
    65 => "00111101001110000101110111001000", 
    66 => "10111101100101001010000010010010", 
    67 => "10111100101111100011110100100000", 
    68 => "10111101110000110101111000011110", 
    69 => "00111101011011101111011011000000", 
    70 => "10111110000001001010111110100010", 
    71 => "00111110010000011101011010100100", 
    72 => "00111100101110100001111100101000", 
    73 => "10111101011010110101011100101100", 
    74 => "00111110001000101010100001000110", 
    75 => "10111101010100100001101001010100", 
    76 => "10111101011010101110100000001000", 
    77 => "00111110010011001011010101010110", 
    78 => "00111101110011010101111001100100", 
    79 => "00111101011011010110000110111000", 
    80 => "10111101110110011101110101101010", 
    81 => "00111101110110011111101111010100", 
    82 => "10111001111110011100010000000000", 
    83 => "00111101011000111101100010010000", 
    84 => "00111101011101011100000110000000", 
    85 => "10111110010110001011000001010010", 
    86 => "00111101001011111101110001110000", 
    87 => "00111110000000000100011110101110", 
    88 => "00111101111111011001001110111100", 
    89 => "10111100011100011111101110100000", 
    90 => "00111101111000100110101111111000", 
    91 => "10111100110101001000101100101000", 
    92 => "10111110000110111011110101010010", 
    93 => "10111110001000101110000111010011", 
    94 => "10111110001001000110001010100011", 
    95 => "00111101000111101011100010101000", 
    96 => "00111110001001101000111100000010", 
    97 => "10111110010101000001111000000110", 
    98 => "10111110000101011000010011110000", 
    99 => "00111110010100011011111010110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_23 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_23 is
    component nn_inference_hwmm_layer1_layer1_weights_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_23_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


