-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100100000011010110111", 
    1 => "10111110010111011101110001000111", 
    2 => "00111101011110000110010011101100", 
    3 => "00111100101110000011110100011101", 
    4 => "00111101100111001001010101001110", 
    5 => "10111101011001001110011100110110", 
    6 => "10111101101000110001001110100001", 
    7 => "10111101000101000101001101110001", 
    8 => "10111110010110011100001101011010", 
    9 => "10111101011110000011110000110110", 
    10 => "00111101011100001111011100101010", 
    11 => "10111110000101010111100111011110", 
    12 => "10111110010001010101111010010110", 
    13 => "10111110010110111110101011111111", 
    14 => "10111110000110111001111111111110", 
    15 => "10111101111110000101000111010011", 
    16 => "10111100010100001000001000100111", 
    17 => "00111101100001100010111001010111", 
    18 => "00111110001100011011110111100011", 
    19 => "10111110100000000100101101110100", 
    20 => "00111110001011001111010110010111", 
    21 => "00111101111111100110000000001011", 
    22 => "10111110001001001111000100001001", 
    23 => "10111110001110110000100111001100", 
    24 => "10111110010001010010011000101111", 
    25 => "10111110001110110010000010011000", 
    26 => "10111110100011001110000010110000", 
    27 => "00111101100101010111010110110010", 
    28 => "10111101101001011100100101001111", 
    29 => "00111100110001101010101001000101", 
    30 => "10111101011111000010110001000000", 
    31 => "10111101110111011011000011010010", 
    32 => "00111101001110110111011111011001", 
    33 => "10111110101100111001001110111000", 
    34 => "10111110001101101010111010111011", 
    35 => "00111100101001011101000111100011", 
    36 => "10111011111000101110011110011111", 
    37 => "10111101110001001000111101100001", 
    38 => "00111110100010010101001011111011", 
    39 => "00111100000010110110101010001100", 
    40 => "00111110001101011100100011101010", 
    41 => "00111110100011010110101111100011", 
    42 => "00111101111111110001001011001001", 
    43 => "10111101101011111010000100110010", 
    44 => "10111110011111110001001101011010", 
    45 => "10111101110101010110100100110000", 
    46 => "00111100011100111111101011001101", 
    47 => "00111110000011010110101101101001", 
    48 => "00111101011100110011101110111111", 
    49 => "10111101111110011001100011101000", 
    50 => "00111101100001111101001000011110", 
    51 => "00111110011011110111010111101110", 
    52 => "00111110011001010111010101011101", 
    53 => "10111110100000110000111001001110", 
    54 => "00111101101010111000011011100001", 
    55 => "00111110001011111000010111110011", 
    56 => "00111110000011011010111000100111", 
    57 => "00111101101101010001011111110010", 
    58 => "10111101010011110111111000110000", 
    59 => "10111101101110110011100001011000", 
    60 => "00111110000010110111110101010000", 
    61 => "00111110010010011100001111111101", 
    62 => "00111101111110011000111010111001", 
    63 => "00111101101010110111001000001111", 
    64 => "00111110001101011011101001001110", 
    65 => "10111101001101011110010110111110", 
    66 => "00111101001101110001101101111010", 
    67 => "00111110000100100011111111000110", 
    68 => "00111101010100110001111100001011", 
    69 => "10111101111001001100001110111101", 
    70 => "00111110100100011001011100011100", 
    71 => "10111100111101111101100001100000", 
    72 => "10111100100111100100110001101001", 
    73 => "00111101101100110010000110100011", 
    74 => "00111110100010011110111111111011", 
    75 => "00111100010010001010111101000110", 
    76 => "10111101110111111110000001101010", 
    77 => "00111110100000101010110111000011", 
    78 => "00111101110101000110110100110010", 
    79 => "00111110010100110000000001100000", 
    80 => "00111100001011011110000000111101", 
    81 => "10111101001010101010000111100100", 
    82 => "00111110010101100001010100000111", 
    83 => "00111110011111100101100110010011", 
    84 => "00111110100110110001010101010101", 
    85 => "00111101000100111100101110101100", 
    86 => "00111110010011110010010111010010", 
    87 => "00111110000010111101101010101100", 
    88 => "00111110001011110100011011000000", 
    89 => "00111110011001001000011101110101", 
    90 => "00111110000101011000110101111001", 
    91 => "10111101110101000000100110111111", 
    92 => "00111101000001011001001110011001", 
    93 => "10111101110111000010101000010001", 
    94 => "00111110001100000101001100001100", 
    95 => "00111110100111001011111011111111", 
    96 => "10111100101010111101100011000111", 
    97 => "00111110100001000101101010000111", 
    98 => "00111110011010111001011010111010", 
    99 => "10111101100100000000100111010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_4 is
    component nn_inference_hwmm_layer1_layer1_weights_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_4_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


