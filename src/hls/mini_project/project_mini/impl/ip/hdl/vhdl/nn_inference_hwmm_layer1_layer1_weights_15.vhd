-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_15_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_15_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010001010001011000110111", 
    1 => "10111110000100000100110001100010", 
    2 => "00111100111011001111011110011000", 
    3 => "10111110000010011000011100111000", 
    4 => "10111110001010111010111000110110", 
    5 => "00111101101111100111101000011000", 
    6 => "00111101101110000110101000001100", 
    7 => "10111101101111001110101011011010", 
    8 => "00111101101101101010011001101000", 
    9 => "00111110000001000011010101001000", 
    10 => "10111101100010001111010001101000", 
    11 => "00111101111110011010110001011000", 
    12 => "00111101101100110011011000101000", 
    13 => "00111110010110011101101111011000", 
    14 => "10111110000110101011010001000110", 
    15 => "10111101011000100101111100011000", 
    16 => "10111110010010011000001111111010", 
    17 => "10111101101010101110000110011110", 
    18 => "00111110001010011110111000011010", 
    19 => "00111110000101100111001111100010", 
    20 => "00111100000001101001000010010000", 
    21 => "00111101101101101000010101010000", 
    22 => "00111100110111101100111000100000", 
    23 => "10111110010101010000001111010100", 
    24 => "00111101001100000100111101101000", 
    25 => "10111101111000100101011110001000", 
    26 => "10111101111110011011111010110110", 
    27 => "00111001100110111111010000000000", 
    28 => "00111100111110110010100000000000", 
    29 => "10111101011001100100000010011100", 
    30 => "10111110000110000010111100101010", 
    31 => "00111110010110001111000010110010", 
    32 => "10111110000000101010110111111010", 
    33 => "00111101011110011001100011011000", 
    34 => "10111110000000000100110111011101", 
    35 => "00111110000100101110000110100000", 
    36 => "10111110010000101110010111000100", 
    37 => "00111011100110001100011110100000", 
    38 => "00111010110010000110001000000000", 
    39 => "10111101111111110010001000011000", 
    40 => "10111101101100010010001011110000", 
    41 => "10111101111010100000001101110101", 
    42 => "10111110010100101000000010000010", 
    43 => "00111100001011101000111111110000", 
    44 => "00111011111101110010101100000000", 
    45 => "00111100111101101110110000011000", 
    46 => "00111101001110111000011100011000", 
    47 => "00111100110000001011101111111000", 
    48 => "10111101110110111101010101111001", 
    49 => "10111110001100011100001011101100", 
    50 => "00111101000000000011101000110000", 
    51 => "10111101111111011001110100111110", 
    52 => "10111110000011010101000111011100", 
    53 => "00111101111011110010010001010000", 
    54 => "10111101111111001101101011110110", 
    55 => "10111110010011010010011010110001", 
    56 => "10111110001011011110001110011110", 
    57 => "00111110000010111001000100000100", 
    58 => "10111101110001010101011011011000", 
    59 => "00111101011110001100010101000000", 
    60 => "00111101010101010010011000010000", 
    61 => "10111110001001110000100100111010", 
    62 => "00111100010000011011000110010000", 
    63 => "10111101101000000100100111001000", 
    64 => "00111100111010110000101110001000", 
    65 => "00111100011011100000011010110000", 
    66 => "00111110010011110101110100110010", 
    67 => "10111110010110001010010000111001", 
    68 => "10111101101000010111110001110010", 
    69 => "10111110000010001010010001001000", 
    70 => "10111100110110111100110010110000", 
    71 => "10111101011001000010011011101100", 
    72 => "10111101000101000110111110101100", 
    73 => "10111101001011010010100000000000", 
    74 => "00111100100001001010001001011000", 
    75 => "00111011010001111111011101000000", 
    76 => "10111101010111111010111000110000", 
    77 => "00111110001001110101001111101110", 
    78 => "00111101011001001001010101000000", 
    79 => "00111101111110000101100010011100", 
    80 => "00111110000011010011000000000000", 
    81 => "10111110000001001001011100101010", 
    82 => "10111101101001011111100001100000", 
    83 => "10111101010110010101101010101100", 
    84 => "10111110001000101001001001000110", 
    85 => "10111010101010110011110000000000", 
    86 => "10111101100111000011001000110010", 
    87 => "10111100011011001100111100110000", 
    88 => "10111110010010110000110011110010", 
    89 => "00111100101000111110000011101000", 
    90 => "10111101101001000010110010010100", 
    91 => "10111110001110010010110110111010", 
    92 => "10111110000101010111011001001011", 
    93 => "10111101100110011001010010100100", 
    94 => "00111101111011010101110111111000", 
    95 => "00111100110100000101011111001000", 
    96 => "00111110010100111111010011011010", 
    97 => "10111101101010110011011000101110", 
    98 => "10111110010101110110011110111010", 
    99 => "10111110010000101100011010001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_15 is
    component nn_inference_hwmm_layer1_layer1_weights_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_15_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


