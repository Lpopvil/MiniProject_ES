-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011101010110111100001000110", 
    1 => "10111110011000110110110010111110", 
    2 => "10111101100011010000111011110010", 
    3 => "00111101110111011110011101100100", 
    4 => "10111101111000000110111010010110", 
    5 => "00111100100110000100111110111100", 
    6 => "00111110000011100011000100001000", 
    7 => "10111101101100010110001111100111", 
    8 => "00111110001101011101001111000111", 
    9 => "10111110010001001011010010101010", 
    10 => "10111110011101111000011011000100", 
    11 => "00111100111000101000000011101110", 
    12 => "10111101001101100010011101110001", 
    13 => "00111110001011100010000010110110", 
    14 => "00111101110101000101100110100010", 
    15 => "10111110010100110001011011001101", 
    16 => "00111101010111010101111100011011", 
    17 => "10111110010001011100010001101010", 
    18 => "10111101101001101010110010010101", 
    19 => "00111101100100100101111100110000", 
    20 => "00111110001010000110001010001111", 
    21 => "10111110010100010010101001011110", 
    22 => "10111110010001100110010100110101", 
    23 => "10111110000100001111000111000110", 
    24 => "10111110001101011101100111011110", 
    25 => "10111101011001011101011001011101", 
    26 => "10111110000011000001100000111000", 
    27 => "00111101011110101101011101101110", 
    28 => "00111101011010011100001110010100", 
    29 => "10111101101000000111000110000010", 
    30 => "10111101101010011101110111100001", 
    31 => "10111110010110101110000111001101", 
    32 => "10111101010000110011111011111101", 
    33 => "00111101101010010010101001000110", 
    34 => "00111101110111100001011001111011", 
    35 => "10111110001001111000011110101101", 
    36 => "00111110010111010010100000111100", 
    37 => "00111100100011011000011010110110", 
    38 => "10111101100100110101101101010100", 
    39 => "10111101100010100110000000011000", 
    40 => "10111100101111101100000010001000", 
    41 => "00111101110111000000001010101001", 
    42 => "00111110000110111111111101000000", 
    43 => "00111101011001001100010010001101", 
    44 => "10111101010010101001111100100001", 
    45 => "10111101111001000010101110101101", 
    46 => "00111110010001001010101000100100", 
    47 => "00111110001000001100011011011110", 
    48 => "00111100101011111100011010100010", 
    49 => "10111101011110111001111100001100", 
    50 => "00111110000011010101001000100011", 
    51 => "00111101100000111110111001110001", 
    52 => "10111110010011000111011000000110", 
    53 => "00111101100010001110101010111110", 
    54 => "10111110100100110111111001010100", 
    55 => "00111101101000111101001000001111", 
    56 => "00111101100000111011000001000010", 
    57 => "00111110001011011101100010111001", 
    58 => "10111110000010010000010001100000", 
    59 => "00111110000011010101010110011111", 
    60 => "10111100001100101010101010000011", 
    61 => "00111110000100101011100110000100", 
    62 => "10111110000000101100000010001001", 
    63 => "10111110001010100010100001110110", 
    64 => "00111011100100110111000011000101", 
    65 => "10111101101111011100001100100101", 
    66 => "10111110000100110010111001011000", 
    67 => "10111110010000101000010010010000", 
    68 => "00111110001100011111111010011111", 
    69 => "10111100110101100110111000111010", 
    70 => "10111101011011101110011110110110", 
    71 => "00111110001110100001001111110000", 
    72 => "10111110010111010101010011001111", 
    73 => "00111110001100000000100111110011", 
    74 => "00111101000101101010001011100011", 
    75 => "10111101111011111110011000110000", 
    76 => "00111011111111001010010100001111", 
    77 => "00111110010011101101100010111101", 
    78 => "00111110000001010010010111010001", 
    79 => "00111110000100100111111001110101", 
    80 => "00111101111010010000111000110010", 
    81 => "00111110000011010001010000110000", 
    82 => "00111110000111101110000010001100", 
    83 => "10111101010111001110011110100110", 
    84 => "00111101111011111100001011010100", 
    85 => "10111001110000000010001001011010", 
    86 => "10111101110101101001110100100001", 
    87 => "00111101100011110011111000010001", 
    88 => "00111101011100011111011100111010", 
    89 => "00111101111111100100110000111001", 
    90 => "00111110001000001110110110100110", 
    91 => "00111101111110001100100000101110", 
    92 => "00111101100010001111000010001110", 
    93 => "10111101000111011011011001111001", 
    94 => "10111101111101010000010110011100", 
    95 => "00111101101001110011011010010100", 
    96 => "00111101111011000111001100010111", 
    97 => "00111101111110100010101011111111", 
    98 => "10111100010001000001001000111110", 
    99 => "10111110010011011000111101011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_1 is
    component nn_inference_hwmm_layer1_layer1_weights_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_1_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


