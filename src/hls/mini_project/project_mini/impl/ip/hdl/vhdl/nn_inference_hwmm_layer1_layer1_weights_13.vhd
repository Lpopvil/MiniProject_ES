-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_13_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001101100101110010110011", 
    1 => "00111101011011110100010101100111", 
    2 => "10111100011011000001000000101110", 
    3 => "00111110001101011000101010111101", 
    4 => "10111101100110010010101000110111", 
    5 => "00111110010010000101010101010110", 
    6 => "00111110001110000111101001100001", 
    7 => "10111110000100110110101010100100", 
    8 => "10111101010111000010011001001011", 
    9 => "00111110001001110111111001111000", 
    10 => "10111101111000100010001100110101", 
    11 => "00111110011001111001101000010100", 
    12 => "10111100111100101000110111111101", 
    13 => "00111110100001100011110111011011", 
    14 => "10111101101110100000000101011010", 
    15 => "10111101110010100101111110100110", 
    16 => "00111100110010000101010111100010", 
    17 => "00111110010100110011011111110011", 
    18 => "00111110010010100011001110101001", 
    19 => "10111101111100101111000011010110", 
    20 => "00111101111110001110110001001001", 
    21 => "00111110010101001010110010010001", 
    22 => "10111100101100101000110011101011", 
    23 => "00111110001111000011101011110101", 
    24 => "00111101111011000110101111001111", 
    25 => "00111101111111101110000001110111", 
    26 => "00111110001111100101111000101001", 
    27 => "00111110001010011101000110100110", 
    28 => "10111101001101111111110101100100", 
    29 => "10111100001010101001001101111100", 
    30 => "00111110000101011100010110000011", 
    31 => "10111100110001101100101011110100", 
    32 => "10111110000000001101100100101011", 
    33 => "00111110000101011000001110111111", 
    34 => "10111110000111001011011101101011", 
    35 => "00111101110000110011010101010010", 
    36 => "00111110100111001010011000000111", 
    37 => "10111101100000000011001010110000", 
    38 => "00111110000110010111101110000001", 
    39 => "00111011100001101101111001000011", 
    40 => "00111110010100000100000111000101", 
    41 => "00111110001011101110010111100011", 
    42 => "10111110001100011100001001011110", 
    43 => "10111110000101110101011010000010", 
    44 => "10111101010100111001001001011010", 
    45 => "00111101111000000001110011000010", 
    46 => "00111110000101011111111001001101", 
    47 => "00111110000101101001010111100100", 
    48 => "00111110011010100011111011010111", 
    49 => "10111101011101110010101001010001", 
    50 => "00111100111000100111110000000001", 
    51 => "10111101111110100101001110011010", 
    52 => "10111100100010101100101110110100", 
    53 => "00111110000000111010010101001111", 
    54 => "10111110100000000110000101100111", 
    55 => "00111101100110010101110100010011", 
    56 => "00111101001101000111011011111001", 
    57 => "00111101100000111000111111101110", 
    58 => "00111101101100001110100110110000", 
    59 => "00111101101100001100100110111100", 
    60 => "10111101000001001011011010111000", 
    61 => "00111110100000110010011101101100", 
    62 => "10111101000011000100101101000100", 
    63 => "10111101100001100001111100010101", 
    64 => "10111110001100001011101100011100", 
    65 => "10111110011000110111111010011111", 
    66 => "00111110100111111010010000110111", 
    67 => "10111101100101000100101101001111", 
    68 => "00111110100000000111010111010000", 
    69 => "00111110100001100101101001000100", 
    70 => "10111101011110010000100100000111", 
    71 => "10111100111111110100111011101100", 
    72 => "10111101100101100001000010100101", 
    73 => "00111110011111001010111100111000", 
    74 => "10111101100000110011111111010110", 
    75 => "00111110001010011100000010111100", 
    76 => "10111100000000010111001100110101", 
    77 => "00111101110011011000110110100001", 
    78 => "10111100100110001100001000101101", 
    79 => "00111110000111010001010111011101", 
    80 => "00111110001011101010011010011000", 
    81 => "00111101010110000010100111010010", 
    82 => "00111100011101111000101111001111", 
    83 => "00111110000101000001010110100010", 
    84 => "10111100110011111010010100111101", 
    85 => "00111110100101000000100011100110", 
    86 => "00111101110100111011010100111100", 
    87 => "10111101101000101001101011101101", 
    88 => "00111100001001111010111100001000", 
    89 => "00111101001000010100011101011001", 
    90 => "10111100110101100011010110011101", 
    91 => "00111110001100000101011111111001", 
    92 => "10111100100000010001001100110100", 
    93 => "00111110100001100001100101011001", 
    94 => "00111101111110110111101101000011", 
    95 => "00111110001110010111010010011111", 
    96 => "00111110001100000001010110111110", 
    97 => "10111100011111011010110101111001", 
    98 => "00111110100000000110010001010100", 
    99 => "00111110100111111011000000001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_13 is
    component nn_inference_hwmm_layer1_layer1_weights_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_13_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


