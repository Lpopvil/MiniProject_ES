-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_17_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_17_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010011010001111000001011", 
    1 => "00111110000100110001100111010110", 
    2 => "00111110000011110011011110100101", 
    3 => "00111110001011100110100011110010", 
    4 => "10111101011101011000111110101011", 
    5 => "00111110010000100010001001001101", 
    6 => "00111100110000101000010111001100", 
    7 => "00111101100100011111111100000100", 
    8 => "00111101101111010011000101111010", 
    9 => "00111101110000101001011000111100", 
    10 => "10111101111100001011001011001100", 
    11 => "00111110011000110011111100001000", 
    12 => "10111101011000011111011011100100", 
    13 => "00111110001011010001010101110110", 
    14 => "00111110000010111100111010110000", 
    15 => "00111101101010100100000000100001", 
    16 => "10111110000111100100011101101010", 
    17 => "00111110100000010010001100101111", 
    18 => "00111101111110000010111000100110", 
    19 => "10111110000000111011010100001010", 
    20 => "10111101110111100000111100000111", 
    21 => "00111110000001010101110111100010", 
    22 => "10111100101110101111000010111000", 
    23 => "00111110011111011011100010110011", 
    24 => "10111011011000101011000011101001", 
    25 => "00111101101001100000001110010001", 
    26 => "00111101111111001111000010001000", 
    27 => "00111110010101010100100110001111", 
    28 => "00111101011101001010111010001001", 
    29 => "00111110000101100011011110111111", 
    30 => "00111110000101101011010000110111", 
    31 => "10111101010101100111111100110100", 
    32 => "00111110100001110110001111111001", 
    33 => "00111110100001110101110010101011", 
    34 => "10111100101111100011010101110100", 
    35 => "10111101110010011100000001011100", 
    36 => "10111100101001001111010010001111", 
    37 => "10111110001010010100001101001011", 
    38 => "00111110010101100001010010101101", 
    39 => "10111101111111010011001110111101", 
    40 => "00111101110010011011000111001110", 
    41 => "10111110000100000000101001011110", 
    42 => "00111110100000011110010011000001", 
    43 => "00111101001010100001001000110000", 
    44 => "10111100011111001011110010000110", 
    45 => "10111101010100111101011111100101", 
    46 => "00111110011011001111001100110001", 
    47 => "00111101110000001111010011101000", 
    48 => "00111110010101000000100101101011", 
    49 => "10111101001001111101000111010100", 
    50 => "00111110010010010010100011001011", 
    51 => "10111101100010110101010010010011", 
    52 => "10111110000000010000000101110101", 
    53 => "10111101100010110011100011111110", 
    54 => "00111110011001010001101010100100", 
    55 => "00111110010101011011101100100010", 
    56 => "00111101011110110000100000010100", 
    57 => "00111101000110101100000101110111", 
    58 => "00111110010010011011100111010001", 
    59 => "00111101110101000111011110101110", 
    60 => "00111101101011000101010100000010", 
    61 => "00111101111110001111100110010100", 
    62 => "00111101010011000101101101001000", 
    63 => "00111101100001011011010010001001", 
    64 => "00111110011010010111011010011110", 
    65 => "10111110000101111000100110000111", 
    66 => "00111110001010010011000011110001", 
    67 => "10111110000010111011110000101011", 
    68 => "10111101100000101101001101111101", 
    69 => "00111101100111110011110100001011", 
    70 => "00111110000001010111011101001000", 
    71 => "00111101111000011001000000001101", 
    72 => "00111110010110001011001101000011", 
    73 => "00111110010111011010001000111111", 
    74 => "10111110000010100010010110011101", 
    75 => "00111110000100110111100011101000", 
    76 => "10111100110110100110101010011000", 
    77 => "00111101111110111000000110000101", 
    78 => "10111110000000110011000111110000", 
    79 => "00111110000111110111000110000000", 
    80 => "10111101100111101000101101001100", 
    81 => "10111101111011101111000110111110", 
    82 => "10111101101101101100101100010110", 
    83 => "10111110010101111000010111000010", 
    84 => "10111101100001000101001000010010", 
    85 => "00111101111011010110101100011111", 
    86 => "10111110010100011110101000100011", 
    87 => "10111110001010011011101101111000", 
    88 => "00110111111000100111000111011100", 
    89 => "00111110011011100101001010100000", 
    90 => "00111110000000110010110011000010", 
    91 => "00111110001101110100011110011001", 
    92 => "00111101110010011011110100111000", 
    93 => "00111101101110000110010101010001", 
    94 => "10111101001000001111111111111110", 
    95 => "10111101001000001111011011101110", 
    96 => "10111110001110111110100011000110", 
    97 => "10111101111111101100111011101110", 
    98 => "00111101100011000100000010011101", 
    99 => "00111101110101001110111000000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_17 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_17 is
    component nn_inference_hwmm_layer1_layer1_weights_17_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_17_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_17_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


