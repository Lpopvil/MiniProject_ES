-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_22_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101111101100101001011011", 
    1 => "00111100000110000001111001001110", 
    2 => "00111100010011100101101011011011", 
    3 => "00111110000000011000100110010001", 
    4 => "10111100111001010111000100000100", 
    5 => "00111101101001000011110110010100", 
    6 => "00111110001000111101011000000000", 
    7 => "00111110100001101001111010001111", 
    8 => "00111101001010101001111010111001", 
    9 => "00111110001110111110100010101111", 
    10 => "00111101011000001001110011111110", 
    11 => "10111101111110000010011010010001", 
    12 => "00111110011011101101110001011100", 
    13 => "10111101011000101011101001000101", 
    14 => "10111110100100110010101001100010", 
    15 => "00111101111010110110001000001010", 
    16 => "00111110001000010100101110101000", 
    17 => "10111100000000111111100000101101", 
    18 => "10111101101001111101011010101001", 
    19 => "00111110011101101111001001111011", 
    20 => "00111110010110101111111011101111", 
    21 => "00111101000110001111011110101010", 
    22 => "00111110001001100011010001110101", 
    23 => "10111101011010010110110001110000", 
    24 => "10111110010101111100100110101010", 
    25 => "00111101111110111000111110010000", 
    26 => "00111101110101001011101111011011", 
    27 => "00111101111000100110000001100001", 
    28 => "00111110011000110110100111010111", 
    29 => "00111110100010010110100101010111", 
    30 => "00111110010001001001110010101001", 
    31 => "10111100111010111000000111011111", 
    32 => "00111110001110011110001001000010", 
    33 => "00111101011000011111100010101000", 
    34 => "00111110011000110010000111100000", 
    35 => "10111101110010110001001111000000", 
    36 => "10111101010101100000001100110100", 
    37 => "00111101010111101010001110001100", 
    38 => "00111110010001110000001010000001", 
    39 => "10111011101101010111001010010001", 
    40 => "00111101000111110101000100011010", 
    41 => "10111101000100001101011000110000", 
    42 => "00111110001001011110011000000110", 
    43 => "10111101111100010010001111000011", 
    44 => "00111110010110011000100100100010", 
    45 => "10111101010110101101000110110110", 
    46 => "00111110001111110010010001011111", 
    47 => "00111101101111101101100100101100", 
    48 => "00111101010000110011001110110001", 
    49 => "10111101111001111111111000101001", 
    50 => "00111110000011000100010011110100", 
    51 => "00111110011011110110010000001111", 
    52 => "00111110000011010101111000001001", 
    53 => "00111101000000100011001100100110", 
    54 => "00111110100010101000000110101100", 
    55 => "00111110001000100011100001001110", 
    56 => "00111110011101010101010110110001", 
    57 => "00111110011000000011010010101101", 
    58 => "00111100111111110111000000011010", 
    59 => "00111110100001100101100110000001", 
    60 => "10111101111011000100011101010011", 
    61 => "10111101101101101000011111111100", 
    62 => "10111110000000101111010100010010", 
    63 => "00111110001000011000101011111001", 
    64 => "10111100111111100111110101101011", 
    65 => "10111101011011111110101100111101", 
    66 => "00111110011001100110000111001111", 
    67 => "10111101101101111000111001111110", 
    68 => "00111110011111101111100011000101", 
    69 => "00111110000000100111101011110011", 
    70 => "00111110000111000100011110010110", 
    71 => "00111110001100001110110000101001", 
    72 => "10111101110010001010000000101001", 
    73 => "10111110000010011110100110111100", 
    74 => "10111101000110111000010111110010", 
    75 => "10111101001001011000100111001000", 
    76 => "10111101111100100001111111111010", 
    77 => "00111101001000011010000010011100", 
    78 => "00111110011111001010110101101111", 
    79 => "00111100111000101111010011110000", 
    80 => "00111110010100000010011011001011", 
    81 => "10111101110000100111011101111111", 
    82 => "00111101111011111010100010010111", 
    83 => "00111110010010111110001100010111", 
    84 => "00111101110110010000110001101010", 
    85 => "10111101001010101101100111100011", 
    86 => "00111110010101100010010000011001", 
    87 => "00111101011000000100111000111000", 
    88 => "10111100100110001010000011111001", 
    89 => "10111101100101001000100110000010", 
    90 => "10111100111100001111000000101100", 
    91 => "10111101000001101110110100111001", 
    92 => "10111101101010010110000101110010", 
    93 => "10111110001110001110110011010111", 
    94 => "00111101100110001001100101011001", 
    95 => "10111101100110011110000110101010", 
    96 => "00111110001101100100011111000111", 
    97 => "00111110011110001101101111100011", 
    98 => "10111101110010000110100000010101", 
    99 => "00111110000110101111101001001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_22 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_22 is
    component nn_inference_hwmm_layer1_layer1_weights_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_22_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


