-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_3_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_3_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001111010110010010110000", 
    1 => "10111110001000101000111000100001", 
    2 => "10111101111010010100011011101000", 
    3 => "00111110000010110101110001011000", 
    4 => "00111100110101100010100100101111", 
    5 => "10111101101010000101111100110010", 
    6 => "10111101101111110101010111101111", 
    7 => "00111110001010000111010001110100", 
    8 => "00111101001000000001011001001101", 
    9 => "00111110000111001101010010000101", 
    10 => "00111101100010000001000011110111", 
    11 => "00111110000000011110000001100101", 
    12 => "10111110001001100101011110001010", 
    13 => "00111101101101000100101110111000", 
    14 => "00111101000111011011000011000011", 
    15 => "00111101101011010111110100011001", 
    16 => "00111101100010100101101001110011", 
    17 => "00111110000010110100000001101011", 
    18 => "10111101001011111100010001001001", 
    19 => "10111101100011100001101110111101", 
    20 => "00111101001100000110011001011000", 
    21 => "10111101101111110100110111110011", 
    22 => "00111110001010101011100100010101", 
    23 => "10111110010000000011001010101000", 
    24 => "10111101010100001101111111111101", 
    25 => "10111101110010100101011101101100", 
    26 => "10111110000010001110010111101001", 
    27 => "10111100111110000011000011111100", 
    28 => "00111101001000010101000100001101", 
    29 => "00111110000100011001101111000110", 
    30 => "10111110001000111001000011001001", 
    31 => "00111101001100101000111000100010", 
    32 => "10111110000000011000100000011010", 
    33 => "00111110001101110011010000100111", 
    34 => "10111110011001011110001011110110", 
    35 => "00111100101010001010100011110000", 
    36 => "10111110010011000010011001010011", 
    37 => "10111101111111101110101000001011", 
    38 => "10111101011100011101111101100111", 
    39 => "10111110010111011001000100010001", 
    40 => "10111110010100111000010000000010", 
    41 => "00111110001111111001011110011111", 
    42 => "10111101101110111111100110110111", 
    43 => "00111110001100100000111001001011", 
    44 => "00111101001100111001011101011001", 
    45 => "00111110000111111111110111011111", 
    46 => "10111101101111100100011010001110", 
    47 => "00111101110011110110100011001000", 
    48 => "10111101101110001101110111111110", 
    49 => "00111110001110000101100001101100", 
    50 => "00111110001011110001100100011010", 
    51 => "00111110001100001011101001000010", 
    52 => "10111110010011011101101001011101", 
    53 => "00111101001100010110001010100110", 
    54 => "10111101000010100010111000110101", 
    55 => "00111101100011100111010110011010", 
    56 => "10111100000100110101011100011110", 
    57 => "00111101010110111110110000011010", 
    58 => "10111110001010111111100111101111", 
    59 => "00111101000100000001110000010110", 
    60 => "10111110010110101001000111100100", 
    61 => "10111011000011100000010011010001", 
    62 => "00111101000111000011110011011110", 
    63 => "00111101010010011110101010101000", 
    64 => "00111010001110011100110110010101", 
    65 => "10111101100100110001100001100110", 
    66 => "00111101101100001010011000100010", 
    67 => "10111110010001110011000110010101", 
    68 => "00111110010010000111111000100110", 
    69 => "10111110010010001001100101111010", 
    70 => "10111101010011000000010011010111", 
    71 => "00111101100111001110101001011001", 
    72 => "00111100101111101110000110101110", 
    73 => "10111110000111010011111111011100", 
    74 => "00111101111101010000001100011101", 
    75 => "10111101101011101010000000111000", 
    76 => "10111110001100001101101001111001", 
    77 => "00111100100011110110000000111100", 
    78 => "00111100100011101110101001001001", 
    79 => "00111010001111001101101100110001", 
    80 => "00111101100011100011110011100110", 
    81 => "10111101111010110010101110000000", 
    82 => "10111110001001101100010100100110", 
    83 => "10111101110010111101001100110001", 
    84 => "00111101100010101111110101001000", 
    85 => "10111101110010100101101001101111", 
    86 => "10111101010000010111101100000100", 
    87 => "00111110001100111001100100111111", 
    88 => "10111110010100111111010100100101", 
    89 => "10111100111100101001010010000011", 
    90 => "00111100111000001101111000101010", 
    91 => "10111010100010010011100111001000", 
    92 => "10111100001010110001001100010011", 
    93 => "00111110001010010011101000001010", 
    94 => "00111100100001110010011010101010", 
    95 => "10111011100100011111101110000011", 
    96 => "00111100101001101100100001000010", 
    97 => "00111100110100000010100110011110", 
    98 => "00111101111010001010100011110000", 
    99 => "00111001111111001001111001100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_3 is
    component nn_inference_hwmm_layer1_layer1_weights_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_3_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


