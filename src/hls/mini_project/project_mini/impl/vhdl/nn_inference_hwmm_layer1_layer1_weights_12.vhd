-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_12_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_12_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000110111101011010001100", 
    1 => "10111110001010111000111011100010", 
    2 => "10111110010001100101111111111100", 
    3 => "00111100100110100111000001100000", 
    4 => "10111100111100011000100100000000", 
    5 => "10111101101000100110001011010000", 
    6 => "10111110000101010110001101010010", 
    7 => "00111101101010011010111000110100", 
    8 => "00111011111000101001110011000000", 
    9 => "10111100001101100110110100000000", 
    10 => "10111101101000111000111100111100", 
    11 => "00111100111110110001111001010000", 
    12 => "10111101000110011001001010110000", 
    13 => "00111101110001010001101110110000", 
    14 => "00111101000111110001100000000000", 
    15 => "00111101110000001111110110011000", 
    16 => "00111110000100001011100010010100", 
    17 => "10111110010100000010011100011100", 
    18 => "00111101101110110011011000110000", 
    19 => "00111110001000111110011001111100", 
    20 => "00111110000110001000101001101000", 
    21 => "00111100000100100110000011010000", 
    22 => "10111101111110100111010101101101", 
    23 => "00111110000001011111110010111000", 
    24 => "00111110010000110101101000001110", 
    25 => "00111110000100000001101100010000", 
    26 => "10111101010011110101110101111100", 
    27 => "10111110000111100111101011110000", 
    28 => "00111110010010111110110111011000", 
    29 => "00111110010011100001110011001110", 
    30 => "10111101101101000100000100111000", 
    31 => "00111101110001110001101000101000", 
    32 => "10111110010010110101001011001001", 
    33 => "00111101101000001101011110111000", 
    34 => "10111101100011011010110101100010", 
    35 => "00111101111011110001000110111000", 
    36 => "10111110010000101011110010011011", 
    37 => "00111110000000100110000101001000", 
    38 => "10111101111101010000100010000111", 
    39 => "10111110001101010001011011011000", 
    40 => "10111110001011111100001111011110", 
    41 => "10111101110100110101011001100111", 
    42 => "10111110000001110110000001100100", 
    43 => "10111110001110100110010000001010", 
    44 => "00111100110101001111100110000000", 
    45 => "00111101100000100100001101001000", 
    46 => "10111110010010001000011001100000", 
    47 => "00111101111110000101111000001100", 
    48 => "10111101110010111001001111101110", 
    49 => "00111100101111010110101111111000", 
    50 => "10111110001000010110000001101100", 
    51 => "00111101100011000000111110111000", 
    52 => "10111100100100101010000001011000", 
    53 => "10111110010101100110010000011010", 
    54 => "00111101011101011000101000001000", 
    55 => "10111110010011001011000001101111", 
    56 => "10111110010100011001000111000000", 
    57 => "00111101101011010101110011101100", 
    58 => "00111110010110010011001001000100", 
    59 => "10111101001101101100010101000000", 
    60 => "00111101111100111011010011101100", 
    61 => "10111011000111111011100101000000", 
    62 => "00111100000100111001001100110000", 
    63 => "00111110000000011001100001001100", 
    64 => "10111110010011011010110110011000", 
    65 => "10111100111010000111110001111000", 
    66 => "10111101101011000000011110011000", 
    67 => "00111110000001010000100101001100", 
    68 => "10111101011111110011000010001000", 
    69 => "10111100001001000011000011110000", 
    70 => "10111011010100000011111010000000", 
    71 => "10111101001100011010011111100000", 
    72 => "10111110000001100000100001101000", 
    73 => "00111110000111011001101010010110", 
    74 => "10111110000001101001011001001110", 
    75 => "00111101110011000100000101000100", 
    76 => "10111101111111100100101100010101", 
    77 => "00111100110100011111111011001000", 
    78 => "10111101101101111011001100011000", 
    79 => "00111101111010101110011011000000", 
    80 => "10111100110110000000001100101000", 
    81 => "10111101110101110110001011100111", 
    82 => "10111100000001101111111100110000", 
    83 => "10111110001111111000010110001110", 
    84 => "00111100000010001101001110100000", 
    85 => "00111101100000110110100110111000", 
    86 => "10111101010001010101101111010100", 
    87 => "10111101010010100000000000011000", 
    88 => "10111110001000010110101100011100", 
    89 => "00111101010111010101011100010000", 
    90 => "00111101101110001100110101101100", 
    91 => "00111101111011000101001001110100", 
    92 => "00111101111101001000000010011100", 
    93 => "00111110000000000001010001110010", 
    94 => "00111101010110110001111010101000", 
    95 => "10111110000100000110100010000011", 
    96 => "10111110000101111100111010000010", 
    97 => "00111100101001000010000100101000", 
    98 => "00111101100110111000000000111000", 
    99 => "10111101110000010000100000100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_12 is
    component nn_inference_hwmm_layer1_layer1_weights_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_12_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


