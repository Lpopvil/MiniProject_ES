-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_10_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_10_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010100011000100111100", 
    1 => "00111110000101110001000001010110", 
    2 => "00111100000001011100001111111111", 
    3 => "10111100111110111101011110010000", 
    4 => "10111110000100010001101100011110", 
    5 => "00111110000110010110000001001111", 
    6 => "00111110000100111011101010010100", 
    7 => "10111110000011101101010001111100", 
    8 => "00111110001110110001100010001111", 
    9 => "00111101111100001110001100101010", 
    10 => "10111101111101011011000000000101", 
    11 => "00111100111100011101010011100011", 
    12 => "10111110000001110010010010101100", 
    13 => "10111110010100000010110101001111", 
    14 => "10111101110100101000001010001010", 
    15 => "00111101111110100000001111111001", 
    16 => "00111100010000111110000111100010", 
    17 => "10111101110011111001001011001101", 
    18 => "10111101011010111110011111110010", 
    19 => "10111110001100010000101010111001", 
    20 => "00111011100100101010011100001010", 
    21 => "10111101001101110000011101011001", 
    22 => "10111100001011000001011000011010", 
    23 => "00111110001110010010001101000100", 
    24 => "10111101101111011101101010111011", 
    25 => "10111101011100111111100101100001", 
    26 => "10111101101010001010100001100000", 
    27 => "00111110000011110011100011101111", 
    28 => "00111101000100001111111110000111", 
    29 => "00111110000010011110011110010011", 
    30 => "10111110011000101100011101110001", 
    31 => "00111101101110100101011001100111", 
    32 => "10111101110010110000111010110101", 
    33 => "00111101110111011111000111100101", 
    34 => "10111101010110111000000001101011", 
    35 => "10111110000111110010001101111001", 
    36 => "10111110001101010010011111110000", 
    37 => "00111101010100000011100111100101", 
    38 => "10111100101000011110011101011000", 
    39 => "00111101111001110000010110011111", 
    40 => "00111101011110001001001000010001", 
    41 => "10111110001001101000100101100010", 
    42 => "10111110000001110101111010010011", 
    43 => "00111101000001101101100100000111", 
    44 => "00111110000001101010101100110101", 
    45 => "00111101111001100101101100101010", 
    46 => "10111101011001100110101001111011", 
    47 => "00111110000111001001101110000110", 
    48 => "10111110010110001000011011010000", 
    49 => "00111110000110001110111011111110", 
    50 => "10111110000001100011100010100011", 
    51 => "00111110000001001001000111111100", 
    52 => "10111110000011110010100110010111", 
    53 => "10111101001111011000100111100000", 
    54 => "10111110000010010000010110101110", 
    55 => "10111101111110001101110110000010", 
    56 => "10111110010110011101001001111101", 
    57 => "00111110000110101010100101010011", 
    58 => "10111110010000101110001111011001", 
    59 => "10111110010101011100110011001000", 
    60 => "10111110001110011011001011111011", 
    61 => "00111101111010110001111001000011", 
    62 => "00111101100011000100011001001110", 
    63 => "00111101100001000101100001001010", 
    64 => "00111101100000110010011110010101", 
    65 => "00111110000011011111101100100010", 
    66 => "10111110000001010101100101001010", 
    67 => "10111110000010010101010011001110", 
    68 => "10111101100000010001001111000000", 
    69 => "00111110000001101010101010100100", 
    70 => "10111110001011110001101100100100", 
    71 => "10111100001111110110101000000000", 
    72 => "00111101100001110110101011010001", 
    73 => "10111101100110111100010001000100", 
    74 => "00111110000111100111111010101101", 
    75 => "00111100001011100111001110110110", 
    76 => "10111110001011000010010011111001", 
    77 => "10111100101101000111000100110001", 
    78 => "00111101100000000110101111011110", 
    79 => "00111101100110000100110010011100", 
    80 => "10111101110010010000011000000110", 
    81 => "00111101101010000001001011010101", 
    82 => "00111100101010111101001000001101", 
    83 => "00111110010001100101011001100100", 
    84 => "00111110001101111001110000001101", 
    85 => "10111110000001011101001111101000", 
    86 => "00111101100100000111101111010010", 
    87 => "00111110010010101010111000101010", 
    88 => "10111101110111101101100011100100", 
    89 => "10111101111111010010100101010110", 
    90 => "10111110000110011100010000110000", 
    91 => "10111101111000000111111001001100", 
    92 => "00111110001000001110100010001001", 
    93 => "00111101011001001111000001001000", 
    94 => "00111101101001011011101100001110", 
    95 => "00111110000111100101010000011000", 
    96 => "10111101010000000100111001011001", 
    97 => "10111101111100100010011110110011", 
    98 => "10111100101101100101000000000011", 
    99 => "10111110001110010111001101111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_10 is
    component nn_inference_hwmm_layer1_layer1_weights_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_10_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


