-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_18_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100111010100001100000100", 
    1 => "00111110011000100100011001010101", 
    2 => "10111100010110011010000011001100", 
    3 => "10111101110101001000101011110001", 
    4 => "00111110100000000111110010110100", 
    5 => "00111101000100010110011000000110", 
    6 => "10111101000010010101001001001001", 
    7 => "10111100111100011001001100101001", 
    8 => "10111101111100101011111011110111", 
    9 => "00111110011101111101010000110111", 
    10 => "00111110001000111010001100100011", 
    11 => "10111101101010101010111101100110", 
    12 => "10111101010111100101001011111001", 
    13 => "00111100110100011100110110111011", 
    14 => "00111101001010001111010011011100", 
    15 => "00111110000011100111000001111011", 
    16 => "10111101101101010111000010100101", 
    17 => "00111110010101010000101000110110", 
    18 => "00111101010010011111111111011011", 
    19 => "00111110011100100111101000111101", 
    20 => "00111110011011010011010011110001", 
    21 => "00111100111111111001010010011010", 
    22 => "10111011100000001101101001010010", 
    23 => "00111110000111011011111001110111", 
    24 => "00111110000010111100100011000010", 
    25 => "00111110011000011100001100101001", 
    26 => "00111110011010100100111111011101", 
    27 => "10111011110000011100001001000111", 
    28 => "00111110010101111000010110001011", 
    29 => "00111101000011000001010000011001", 
    30 => "00111110001101110000011101000110", 
    31 => "00111100101111001100110010001000", 
    32 => "00111011000001010010110111000001", 
    33 => "10111101110101110001110011110100", 
    34 => "10111100111111010110010011010100", 
    35 => "10111101001110000100010000111110", 
    36 => "00111110100000001001111101110111", 
    37 => "10111011100101100111110100011100", 
    38 => "10111100101110001011110100111010", 
    39 => "00111110000101111011101111010111", 
    40 => "10111110000000100010110010101011", 
    41 => "10111011000011010001001010001010", 
    42 => "10111101101111010101011111111010", 
    43 => "00111110001011110101001111101001", 
    44 => "10111101010010111101001000001110", 
    45 => "10111100110100100000100000000100", 
    46 => "00111101010100000000100010110101", 
    47 => "00111101010010010001111011111110", 
    48 => "00111110100001100111001000010101", 
    49 => "10111101100000101100111110110110", 
    50 => "10111010100000011001001000100101", 
    51 => "10111101111000010010010011110101", 
    52 => "00111110001100111101000100011111", 
    53 => "10111110000011010010010011010110", 
    54 => "00111110000010101011010011010011", 
    55 => "10111101100111011010001101010100", 
    56 => "10111011011100001000000000110000", 
    57 => "10111101101011011111000001101000", 
    58 => "00111110100001111101111011100111", 
    59 => "10111110000110100101110001100101", 
    60 => "00111101010000010000101110101000", 
    61 => "10111101101100000110000111000000", 
    62 => "10111101100110011111111100000110", 
    63 => "10111110000101011001111101111010", 
    64 => "10111110000000001111011101010010", 
    65 => "00111110001010010001100111001010", 
    66 => "10111101101010010001010001111000", 
    67 => "00111100000111001100000100101000", 
    68 => "10111110000011011000100110001100", 
    69 => "00111110000001001100010011101011", 
    70 => "10111100111101111001101101110011", 
    71 => "00111101101101000000010011110110", 
    72 => "00111101100000110001001010101111", 
    73 => "00111110001110110001111100111101", 
    74 => "10111101110000101110000101011111", 
    75 => "00111110000011101101010010010111", 
    76 => "00111110000000111100101000010100", 
    77 => "00111100011010101000011111101010", 
    78 => "10111011101010100101100011101010", 
    79 => "10111101000001110100111010101001", 
    80 => "00111110010000010110001101101101", 
    81 => "10111010100001111111101111100011", 
    82 => "00111110100011110110000010100101", 
    83 => "00111101101001010100100110000101", 
    84 => "00111110100010011000110110000000", 
    85 => "00111110100011010110010000001100", 
    86 => "00111110100001101000101100110101", 
    87 => "00111110011010110111010011110110", 
    88 => "00111100000101110101111000111011", 
    89 => "10111101111101001011010100101010", 
    90 => "00111110010001100110110111110000", 
    91 => "10111110000010010001111110011100", 
    92 => "00111100010000100011001100010010", 
    93 => "00111101010110000011010110000111", 
    94 => "00111110010001111101001011100110", 
    95 => "00111110100100111000010111011110", 
    96 => "00111110100010000000100000110011", 
    97 => "10111101110000111001010110010010", 
    98 => "00111110010100000000011101001001", 
    99 => "00111110010011101000001000001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_18 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_18 is
    component nn_inference_hwmm_layer1_layer1_weights_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_18_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


