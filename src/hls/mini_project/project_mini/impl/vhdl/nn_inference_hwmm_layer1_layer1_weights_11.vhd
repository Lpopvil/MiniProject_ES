-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_11_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_11_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111001101101111001001001", 
    1 => "00111101001010100000111101111101", 
    2 => "10111101000111101010001111101000", 
    3 => "10111101001111100001110000010010", 
    4 => "00111110100011010111011100001110", 
    5 => "00111110010110101001010110111011", 
    6 => "10111101101001001101100010100001", 
    7 => "10111100100100011001000100100111", 
    8 => "10111110001010010111110110111001", 
    9 => "10111101001110010010000101010001", 
    10 => "10111101101000110101110100101110", 
    11 => "00111101001010011001011001000100", 
    12 => "00111101111100100010101011010101", 
    13 => "10111101010101000000101000111100", 
    14 => "00111101011100111010111100011100", 
    15 => "00111110100011101101110001110000", 
    16 => "00111110100100100101111101111101", 
    17 => "10111101100100010101100101110010", 
    18 => "00111101100010001000010010000110", 
    19 => "10111101100001110100011100101110", 
    20 => "00111101001011011100011110001011", 
    21 => "00111110001111111100000100001100", 
    22 => "00111101110011100101101100010001", 
    23 => "00111101110111000111000110011000", 
    24 => "10111100100000000100110111011101", 
    25 => "00111101110100111011000010001010", 
    26 => "10111101110000011001110110010111", 
    27 => "00111101111100011011010011111110", 
    28 => "10111101101110101000011000111011", 
    29 => "00111110001100000001110111101001", 
    30 => "10111110010100010000001010000000", 
    31 => "10111101000000101110110100010100", 
    32 => "00111101100010010000111000011001", 
    33 => "00111101100101100000001100100101", 
    34 => "00111110010011000000100100110011", 
    35 => "00111101100001101110011011111100", 
    36 => "00111110010011110100000010110100", 
    37 => "00111110010010000000000010100110", 
    38 => "00111100111010001110011101100111", 
    39 => "00111101111110000011111100001001", 
    40 => "10111101111010000101110011110011", 
    41 => "00111101011001011111010011011000", 
    42 => "00111110010110100100100100010100", 
    43 => "10111011111110001101000010100010", 
    44 => "10111110001000001110010000100111", 
    45 => "00111101111100000101010100011111", 
    46 => "10111101111000100110001011100111", 
    47 => "00111101101110101100110111110110", 
    48 => "10111101110110100011010111010010", 
    49 => "00111100111101010010111010111110", 
    50 => "10111101111000000100011011011111", 
    51 => "10111101101011011111011011010010", 
    52 => "10111110000000010100001111010001", 
    53 => "10111110100101101000111100110111", 
    54 => "10111110001100110010100100100010", 
    55 => "10111110100011110010111011010101", 
    56 => "00111110000111001111111110111110", 
    57 => "00111100001111010010101000110010", 
    58 => "00111110011100001010110000100000", 
    59 => "10111110010011100011011101010101", 
    60 => "00111101101101101011010000111000", 
    61 => "00111110011111000111110011010001", 
    62 => "00111101111011100101011001011011", 
    63 => "10111110001110101010010000100010", 
    64 => "10111110100111100110100100100101", 
    65 => "10111110001011110010011110110000", 
    66 => "00111101101000001111111111000011", 
    67 => "10111101111111010001011110010000", 
    68 => "00111110001101010010000111101111", 
    69 => "10111100001111110010010110010001", 
    70 => "00111110000011101010011110001001", 
    71 => "00111110100010011101110101101011", 
    72 => "10111110000100111010010111101100", 
    73 => "10111101110100000001010011010110", 
    74 => "10111110010101111100001101111001", 
    75 => "10111110001011011110000011001010", 
    76 => "10111110000111011101011101101100", 
    77 => "00111110010111111010101001000100", 
    78 => "00111110010111010100011111000110", 
    79 => "00111110001000110111110000001101", 
    80 => "10111101110100001100100011001000", 
    81 => "00111100010010010010001101011011", 
    82 => "10111101100001111010000110111011", 
    83 => "10111010101110111000110000000000", 
    84 => "00111110011000101100001101011101", 
    85 => "00111101001011011000011110011111", 
    86 => "00111101111101001100100100010111", 
    87 => "00111110010101111011000000010000", 
    88 => "00111101110001010000000111011100", 
    89 => "10111101111000000000010110111011", 
    90 => "00111101101100000100000000011100", 
    91 => "00111110010100000001011101001110", 
    92 => "00111101111001101011111001001111", 
    93 => "10111101011110000001101010011001", 
    94 => "10111110000011110111000101101111", 
    95 => "00111110001000000011000001101101", 
    96 => "00111100000000011100101010100011", 
    97 => "00111110001011100101110010001011", 
    98 => "10111101101101101110111110000110", 
    99 => "10111100001101100001000010011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_11 is
    component nn_inference_hwmm_layer1_layer1_weights_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_11_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


