-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_26_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010010101101111110011101", 
    1 => "00111101111100100110111100000100", 
    2 => "10111110010010011011111101101111", 
    3 => "00111101111101010011100011101100", 
    4 => "00111110010100010110000101100000", 
    5 => "00111100110011110010111001100000", 
    6 => "00111100010000101000111100100000", 
    7 => "10111101110000011110001000100100", 
    8 => "00111110010010101111011110010110", 
    9 => "10111101001000011101101010000000", 
    10 => "10111101101101000000100010111110", 
    11 => "10111101001001100100011000000000", 
    12 => "10111101111101001110011101010010", 
    13 => "10111100100010111010110000011000", 
    14 => "10111110001010111011100000101010", 
    15 => "10111101110110100111110110001110", 
    16 => "00111101100000000100101001100100", 
    17 => "10111110000000000001010000000100", 
    18 => "00111101111101111011001001001100", 
    19 => "00111101011010011010100101011000", 
    20 => "00111110000101101101100110011100", 
    21 => "00111110000100111010110001100000", 
    22 => "10111110001100010111110100010110", 
    23 => "00111110001011111110001110000100", 
    24 => "10111110001111110000010010011100", 
    25 => "00111101100011111101011101110000", 
    26 => "10111101100010111001010000011000", 
    27 => "00111011100100111001111001000000", 
    28 => "00111101000001111110110011011100", 
    29 => "10111101111011011100011101110010", 
    30 => "10111100110001100100100001010000", 
    31 => "10111110010101011001000010010001", 
    32 => "10111101111010010101010010010100", 
    33 => "10111100111010110000000100110000", 
    34 => "00111101101101101011101010110000", 
    35 => "00111110001000111010110011011100", 
    36 => "00111110001100010111000111100100", 
    37 => "00111110000000011011010110100000", 
    38 => "00111101011100011000110110001000", 
    39 => "00111110000101111110011010100110", 
    40 => "10111101110111000011001010101011", 
    41 => "00111101101101010000101010101100", 
    42 => "10111101010110110110100110001100", 
    43 => "10111110000000101010111100100011", 
    44 => "00111100011100010101001111010000", 
    45 => "10111101010110010011000011111100", 
    46 => "00111100110000101101111010100000", 
    47 => "10111101100000100001111001010010", 
    48 => "00111110000110001011000101001010", 
    49 => "00111110000000111001111100000000", 
    50 => "00111100011111100000000010000000", 
    51 => "00111110000001110001000110100110", 
    52 => "10111110001101110100000001001001", 
    53 => "10111110001110100000000001100010", 
    54 => "00111101010110011010101100000000", 
    55 => "00111110000110100001111001011110", 
    56 => "10111110001010101001110101101000", 
    57 => "10111101111111111010101100011010", 
    58 => "10111101001100100011000100000100", 
    59 => "10111110010011011000100000100000", 
    60 => "00111101110110000111001111100000", 
    61 => "00111100101110001010011011111000", 
    62 => "00111101101010000110000000100100", 
    63 => "00111101010001111000001100000000", 
    64 => "10111110010000011101011111111001", 
    65 => "00111100000000011111110111100000", 
    66 => "10111101110100111111111110100001", 
    67 => "10111101110100100100101010111010", 
    68 => "00111101101101111100011100010100", 
    69 => "10111110000101101100001100111000", 
    70 => "10111101111001111111010111011101", 
    71 => "10111011100001010100001001000000", 
    72 => "10111101100000010010001111010110", 
    73 => "00111110000110100000100001000010", 
    74 => "10111110001101101001000010100011", 
    75 => "00111100000001000111000001110000", 
    76 => "00111110000001100000000100100000", 
    77 => "10111101000110100110000111000100", 
    78 => "10111110010001100010111000110000", 
    79 => "10111101101100110100010101000100", 
    80 => "10111100111000001100111100110000", 
    81 => "00111110010100001001011000001110", 
    82 => "00111101010010110010101001101000", 
    83 => "00111101010110110010110100001000", 
    84 => "00111101111110010001010101110000", 
    85 => "10111110000100011010011100110101", 
    86 => "00111101010100110111001000111000", 
    87 => "00111110000001100101110110000010", 
    88 => "00111110000001011001111001001100", 
    89 => "10111101110011000011101011001001", 
    90 => "10111110010110010110111101100000", 
    91 => "00111101011111011111100101111000", 
    92 => "10111110000011001001110010101101", 
    93 => "00111101110000000001001110100000", 
    94 => "10111101101110100011100111011110", 
    95 => "10111101111100100111100011110000", 
    96 => "10111101000110010011111011110100", 
    97 => "10111100110001111111100110001000", 
    98 => "10111101111010101010110000100111", 
    99 => "00111011111100101000101101000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_26 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_26 is
    component nn_inference_hwmm_layer1_layer1_weights_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_26_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


