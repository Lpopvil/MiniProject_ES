-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_29_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_29_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000001011111000011100011", 
    1 => "00111110010000110011100010100111", 
    2 => "00111100110011011000001111110001", 
    3 => "00111110001001001101010010000110", 
    4 => "00111110010011111000011001000110", 
    5 => "10111101110100111100111100001111", 
    6 => "10111110000111000111101110101011", 
    7 => "00111101110000101101000101110001", 
    8 => "10111110011001000101001001001000", 
    9 => "00111101101000110001111101000011", 
    10 => "00111101010011010001111011101010", 
    11 => "00111110000101101101010001110000", 
    12 => "00111110011001101101100000111101", 
    13 => "00111110001111101011010000011001", 
    14 => "00111101101101000010100111110100", 
    15 => "00111110001101000101110000000001", 
    16 => "00111100110111111100010101111110", 
    17 => "00111101100100111110001011111100", 
    18 => "10111101010010100101000101001000", 
    19 => "10111101110011111010111100010110", 
    20 => "00111100111110011000001110010110", 
    21 => "00111110001100101001101110110100", 
    22 => "10111101010011001011000000000100", 
    23 => "10111100101011001101010000110011", 
    24 => "10111101011011011000111111110110", 
    25 => "00111101001110111011111001000011", 
    26 => "00111110000010101011000001100001", 
    27 => "00111101110011110010100001001010", 
    28 => "00111110000011100011110110111010", 
    29 => "00111101100000101000000110010111", 
    30 => "10111011101010000111110000111000", 
    31 => "00111101111000000100100100110010", 
    32 => "00111110011111100011001011011110", 
    33 => "10111101110111101000011100011100", 
    34 => "10111110000101100011111100111111", 
    35 => "00111100010001000100101110011101", 
    36 => "10111101011011011011101111100010", 
    37 => "10111110000101110100001011100101", 
    38 => "10111110010010000000100101000111", 
    39 => "00111101110010010100001000000100", 
    40 => "00111110001110010110101011001111", 
    41 => "00111100111111110110110001000011", 
    42 => "00111101100100111101111000111011", 
    43 => "10111101100000111100101001111101", 
    44 => "00111101000110110011011011011110", 
    45 => "10111110001101000111101101100110", 
    46 => "00111101100100111010010111111001", 
    47 => "00111101000010110110000010000001", 
    48 => "10111110001101001101111110011010", 
    49 => "10111110010011000101101001011111", 
    50 => "00111101110000100111111000010111", 
    51 => "00111110011111011100011001100111", 
    52 => "10111101011011010000101001110011", 
    53 => "10111101001110110000111010101100", 
    54 => "10111110101110011100001000111010", 
    55 => "10111011100111101100100110001101", 
    56 => "10111110001000101010011011110110", 
    57 => "10111110000000110111011101111100", 
    58 => "00111110010101011000100111100011", 
    59 => "00111101101101011011101000110110", 
    60 => "00111100000001100001101010001101", 
    61 => "00111101101010110001110010110100", 
    62 => "00111110000000000101100110111100", 
    63 => "10111110001000000001110101011101", 
    64 => "10111110101000000001111101110010", 
    65 => "10111110101101001110101001011000", 
    66 => "00111110000000010111101100101100", 
    67 => "10111101000000000100000111111001", 
    68 => "10111101010001011101111000101010", 
    69 => "00111101100001110000111011011010", 
    70 => "00111110010001111110100111100101", 
    71 => "00111110000011000101000000100010", 
    72 => "00111101110101000010010101111001", 
    73 => "10111100101001111100110000110000", 
    74 => "10111101100111110110000111001111", 
    75 => "00111101100001010101010010001000", 
    76 => "00111101100000010111011001010100", 
    77 => "10111100101000011111101000010001", 
    78 => "10111101100100111101111001000100", 
    79 => "00111101110110101111001001010101", 
    80 => "00111110001010010110010101101111", 
    81 => "10111110000010000111001010000111", 
    82 => "00111101001010110001110000010111", 
    83 => "00111101111110111001100101011101", 
    84 => "00111101110000111000010000000001", 
    85 => "10111101001010010101000011010111", 
    86 => "00111101100110000011110000110110", 
    87 => "00111110001110011000011010011101", 
    88 => "10111101101001011010011100000111", 
    89 => "00111101010010001011100110111101", 
    90 => "00111110001001011110110110000101", 
    91 => "00111110000100111100101011010111", 
    92 => "10111101010000101001010101011100", 
    93 => "00111101100010111011000110100000", 
    94 => "00111101101001111000111100110001", 
    95 => "00111110011010011011001011110011", 
    96 => "00111101010111110000100100100110", 
    97 => "00111100101101110011010001110011", 
    98 => "00111100110011101000011100011011", 
    99 => "00111100100110001101000000001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_29 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_29 is
    component nn_inference_hwmm_layer1_layer1_weights_29_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_29_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_29_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


