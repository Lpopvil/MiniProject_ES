-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_19_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_19_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101101100110100110010111", 
    1 => "10111101101010100111111010110110", 
    2 => "00111110101010010001111011001010", 
    3 => "00111100011011000101110111000001", 
    4 => "00111110100101100100001101001011", 
    5 => "00111110011011100000011111100001", 
    6 => "10111101000100110010101111110001", 
    7 => "00111110100101010110101110011011", 
    8 => "00111110101101111111111100001010", 
    9 => "00111101001000100011000111001110", 
    10 => "00111110010101110111110000001010", 
    11 => "00111110001111001001001100011111", 
    12 => "00111101101101101011000000011111", 
    13 => "00111100101100010001100000011111", 
    14 => "00111100110111110100011111000011", 
    15 => "10111101011101110111010110011100", 
    16 => "00111110100101010101101110110111", 
    17 => "00111101110110011000101010011100", 
    18 => "00111101111111100101011101101001", 
    19 => "00111100111001011011110111000010", 
    20 => "00111101111000011100011000110001", 
    21 => "10111101110100101010111110011110", 
    22 => "00111110100011100101001101010011", 
    23 => "10111101001111101101110001110000", 
    24 => "00111100111011000111010001000100", 
    25 => "00111110011111110010101001110001", 
    26 => "00111100010000110110011010011010", 
    27 => "00111101100101011110100111001111", 
    28 => "00111101011011101010100010000101", 
    29 => "10111010010111101100001100100101", 
    30 => "00111110010101100010001100110000", 
    31 => "00111101111001001000010001011100", 
    32 => "00111101101101111111110011100010", 
    33 => "00111110100010000111110011101110", 
    34 => "10111100110000010001110111110110", 
    35 => "00111100100001111110000111100101", 
    36 => "00111110100101101110010100010000", 
    37 => "10111110000110001100110011100110", 
    38 => "00111101010101001000110001011101", 
    39 => "00111101111010100011110000111111", 
    40 => "00111110001000001001110000111100", 
    41 => "00111101100110010011010000000111", 
    42 => "00111101100100001110010001111011", 
    43 => "00111110011010001110010100100100", 
    44 => "00111110010000101111111011111111", 
    45 => "00111110011111001000001010001011", 
    46 => "00111101111100011111100001010111", 
    47 => "00111110010000001010111110000001", 
    48 => "00111110000000101010111100100111", 
    49 => "10111101010001101100100011110101", 
    50 => "10111110010011101100100011111110", 
    51 => "00111101001100010011000010110011", 
    52 => "10111101110110101101011010000100", 
    53 => "00111011101011011110001111111000", 
    54 => "00111110000000111010000100111010", 
    55 => "00111101111111001110000010110110", 
    56 => "10111101010111011110001011101111", 
    57 => "10111110001000111010110011100110", 
    58 => "00111101100110111101110100000001", 
    59 => "00111110001000110111000010010101", 
    60 => "00111010111111001101101111101000", 
    61 => "10111110010100001100000110001000", 
    62 => "10111110001110100101100010110001", 
    63 => "10111110000010111110100110010101", 
    64 => "00111100101101101110101101110011", 
    65 => "00111110100100011010111111110000", 
    66 => "00111110000100101001111101010101", 
    67 => "00111101011110011011001111110110", 
    68 => "00111110000011011101001101100100", 
    69 => "00111110100010100110011010000011", 
    70 => "10111110000011111110000100001001", 
    71 => "00111101011011000101001010010101", 
    72 => "10111101000100111010110110110000", 
    73 => "10111110100011100001010111100000", 
    74 => "00111010111111100010101001111000", 
    75 => "10111100000101110100110111000101", 
    76 => "00111101001000000010110011010001", 
    77 => "10111110011101010011000010010111", 
    78 => "00111100101100111110110101000011", 
    79 => "10111100111111010010011100010000", 
    80 => "00111110000010101100011011011010", 
    81 => "00111101000001000101101110110010", 
    82 => "00111101110001001111111101111010", 
    83 => "10111110100100000010111001100100", 
    84 => "10111110011011101001000010110010", 
    85 => "10111110001010011001101000011100", 
    86 => "10111110100001101110110001110110", 
    87 => "10111101111001101001100100111110", 
    88 => "10111100011101011011010100101010", 
    89 => "00111101100010100010010010000100", 
    90 => "00111100100110000110101110010110", 
    91 => "00111110000110010110110110101110", 
    92 => "10111110010011100010001001111000", 
    93 => "10111110000110100111110101000111", 
    94 => "10111110101001001010011111101001", 
    95 => "10111110100011111000011010101100", 
    96 => "10111110001001000110110100101100", 
    97 => "10111110100111000101011111110010", 
    98 => "00111101110101100111001001010100", 
    99 => "10111101110010111001100010101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_19 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_19 is
    component nn_inference_hwmm_layer1_layer1_weights_19_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_19_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_19_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


