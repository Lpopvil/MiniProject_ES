-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_28_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_28_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010001111010100100101000", 
    1 => "10111110010100111000111000101110", 
    2 => "10111100110010111110010101101000", 
    3 => "00111110001010111011100101010010", 
    4 => "10111101000011001111000111010100", 
    5 => "10111110000010100110000011001000", 
    6 => "00111101111000010010010110010000", 
    7 => "00111101100110100001110011100000", 
    8 => "10111101110001101000000110100101", 
    9 => "00111101000000101001011110010100", 
    10 => "10111101111101000010011001101110", 
    11 => "10111110010001101000111110000100", 
    12 => "10111100011010111001110000110000", 
    13 => "00111101001010100001110111100000", 
    14 => "00111110001111001111101110110010", 
    15 => "10111110001110101100100100000001", 
    16 => "00111101111100010110100111110000", 
    17 => "00111101100101011001101100001000", 
    18 => "10111101110001101110111001101110", 
    19 => "10111101110010010001100110100001", 
    20 => "10111101100011101010000111001100", 
    21 => "00111110001011001001110100101010", 
    22 => "00111100110101010011010101010000", 
    23 => "10111110000000110001111110010000", 
    24 => "10111110010100011101001110110101", 
    25 => "10111101011000000001011001110100", 
    26 => "10111100111010000101111001101000", 
    27 => "10111101011100001011001011101000", 
    28 => "10111101001111110000011000111000", 
    29 => "10111101000100110100111001011100", 
    30 => "10111101110001100100001000001110", 
    31 => "10111110000101110010100000100100", 
    32 => "00111101100011000010111010010100", 
    33 => "10111110010001110100100101000001", 
    34 => "00111101100110010101111101011000", 
    35 => "10111110000111011000010111111100", 
    36 => "10111110001000000100110000110101", 
    37 => "00111101001100111100110111100000", 
    38 => "10111110010100111011111010110110", 
    39 => "10111110001110101100101000111011", 
    40 => "10111110000100010101101000110000", 
    41 => "10111011110100110010111111100000", 
    42 => "00111100111100011011100001011000", 
    43 => "10111110000110100010000100101110", 
    44 => "00111110001101101001111110110100", 
    45 => "00111110001100110000011101011000", 
    46 => "10111101100010011010101001111010", 
    47 => "00111100101000011111010101011000", 
    48 => "10111101100101000101010100100000", 
    49 => "10111110010101010000100010000100", 
    50 => "00111110000000001010010010100010", 
    51 => "00111110001100110100001001100100", 
    52 => "10111101101101111110100001010111", 
    53 => "10111100111111010100110101110000", 
    54 => "10111011110011111100111011000000", 
    55 => "00111101010101010110110010001000", 
    56 => "10111101010100101110101111001100", 
    57 => "00111110010100000111101101100000", 
    58 => "10111101011101111011100111010100", 
    59 => "00111110001011101010000010101000", 
    60 => "10111101111101010111000100100001", 
    61 => "00111110010001110010010101011010", 
    62 => "10111101001001011001111011001100", 
    63 => "10111001100000010111000000000000", 
    64 => "10111110000010101010010000100011", 
    65 => "10111101000010010101101101000000", 
    66 => "10111100110100001010011101101000", 
    67 => "10111011101010111010000101000000", 
    68 => "10111110001011110001101011101011", 
    69 => "10111101011000010100010101000000", 
    70 => "00111101101101010010010111101100", 
    71 => "00111101101110111100011110110100", 
    72 => "10111110000000110101010011110000", 
    73 => "00111110001110111100110010110110", 
    74 => "10111101111010011001101010001001", 
    75 => "00111100101010011110010001101000", 
    76 => "00111101111010101000010010000100", 
    77 => "00111101100100110011011111100100", 
    78 => "00111110000101001101100010000110", 
    79 => "10111101001101010011101011100000", 
    80 => "00111101011111011001100001000000", 
    81 => "00111101111011111001010110110000", 
    82 => "10111110001011011010110101110111", 
    83 => "00111101100000111111101011000100", 
    84 => "00111101001101010010101010101000", 
    85 => "10111110010010101110011011111100", 
    86 => "10111101101011010111110101100100", 
    87 => "00111101111100101111110010011000", 
    88 => "00111101101000110110001000110100", 
    89 => "10111110001111110000011011011100", 
    90 => "10111110010101101011001101110111", 
    91 => "00111101110101101110100011110100", 
    92 => "10111110001101100001110101000001", 
    93 => "10111110000100100110101100101010", 
    94 => "00111100101001100000010100100000", 
    95 => "00111011111111101100011011000000", 
    96 => "00111101010111110100000001001000", 
    97 => "00111101111100000000111100001100", 
    98 => "00111101000111011101101011100000", 
    99 => "00111101101100011000011101010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_28 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_28 is
    component nn_inference_hwmm_layer1_layer1_weights_28_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_28_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_28_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


