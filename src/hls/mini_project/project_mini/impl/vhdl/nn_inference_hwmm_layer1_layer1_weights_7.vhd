-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_7_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_7_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110110110011100010001001", 
    1 => "10111101110000100011001110011010", 
    2 => "00111100101101001100100010010000", 
    3 => "10111011101011111110110110110001", 
    4 => "10111100010011100011101101100010", 
    5 => "00111110001011010101010110110011", 
    6 => "10111101101100100100011010100110", 
    7 => "10111101100111100100000001110001", 
    8 => "00111101101000000001100010001011", 
    9 => "00111110010000101011000110101011", 
    10 => "00111110011010100001001110110110", 
    11 => "00111110011100001000101011010101", 
    12 => "00111101011010011111100001111110", 
    13 => "00111110011000011011110100100011", 
    14 => "10111101000100110101000111000011", 
    15 => "00111110000111011011011001001000", 
    16 => "00111110010010111110111001111111", 
    17 => "10111100110001101010011110010111", 
    18 => "00111110010110010111101001011000", 
    19 => "10111100111011011100101101101000", 
    20 => "00111100001101010110110111011100", 
    21 => "00111101101110001010110100011100", 
    22 => "00111101111001011101000000001110", 
    23 => "10111110001001000110001110110100", 
    24 => "10111110001000010011001110011110", 
    25 => "10111110001000000011110111111011", 
    26 => "00111101001101000010011010000011", 
    27 => "00111101101001010011011101000000", 
    28 => "00111011100110011001011111100100", 
    29 => "10111110001001111011110110000110", 
    30 => "00111110010001101111101110001110", 
    31 => "00111100011011000011110111110100", 
    32 => "00111110001111110110100011010100", 
    33 => "00111110000001111101011111011100", 
    34 => "00111101101100010101010101001010", 
    35 => "10111101011101110101000010000000", 
    36 => "10111101101110111100000101111010", 
    37 => "00111101000111001111111010010100", 
    38 => "00111101111011111100000000000100", 
    39 => "10111110000101100010001011100111", 
    40 => "00111110000101110000010110101011", 
    41 => "00111110011010100111000110110001", 
    42 => "00111110001110001111100110001111", 
    43 => "00111101110111111111001000000001", 
    44 => "10111101010010000001011100100000", 
    45 => "00111101001011111001101000001101", 
    46 => "10111101101111101010000000000101", 
    47 => "00111101001011111001000010010010", 
    48 => "00111010000001011001011111010010", 
    49 => "10111100000100010100111001010010", 
    50 => "10111101100010111000101001101011", 
    51 => "00111101100110000011100010100011", 
    52 => "10111100001011011110110101110010", 
    53 => "00111110001011001010111010101101", 
    54 => "00111110001001111000010101001001", 
    55 => "10111101110111011110111001111110", 
    56 => "10111110000001101010100101101000", 
    57 => "00111110001011011110001111010010", 
    58 => "00111101111001011100001101100010", 
    59 => "00111101010011010011000000010011", 
    60 => "10111101011010011101011100001010", 
    61 => "00111110010100101010110100110000", 
    62 => "00111110011111101011110011111010", 
    63 => "00111110011101001011110100001000", 
    64 => "00111110011100000110111011001001", 
    65 => "00111110010100010011110000001110", 
    66 => "00111110100000100101011011010000", 
    67 => "10111100101001111011110100001011", 
    68 => "00111101111001110101111111001010", 
    69 => "00111110100001111001101011010111", 
    70 => "10111100100011101001011010000000", 
    71 => "10111101100100011001001100001111", 
    72 => "10111101110010001111010000110011", 
    73 => "00111110010001011011010001110110", 
    74 => "00111101010011101100111001010100", 
    75 => "00111110001110010111011101000000", 
    76 => "10111101111010111010111001110101", 
    77 => "00111110001000000010100101010101", 
    78 => "10111100101011111011110101110101", 
    79 => "00111110100000100100101110010100", 
    80 => "10111101001011000100110111010110", 
    81 => "10111110000010101111101001110101", 
    82 => "10111101011010011110000100101011", 
    83 => "00111110010101001111111100100101", 
    84 => "00111101111101011110100111100001", 
    85 => "00111110001011011100011111110010", 
    86 => "00111100100001001000101010111100", 
    87 => "00111110010010000011010101100010", 
    88 => "00111101000101111100011001000100", 
    89 => "10111101100000110010101000000000", 
    90 => "00111101001010001110010110011100", 
    91 => "00111110001000111010010100110001", 
    92 => "10111110000011000101110011100010", 
    93 => "00111101111000000000000001110100", 
    94 => "00111011111110110010001101111001", 
    95 => "00111100001111010000110100000001", 
    96 => "00111110100100101000001110010101", 
    97 => "00111110100000010111100011100111", 
    98 => "00111110011010101011111011010100", 
    99 => "00111101001100100010011001100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_7 is
    component nn_inference_hwmm_layer1_layer1_weights_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_7_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


