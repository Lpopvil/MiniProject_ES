-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110011000111100010111111", 
    1 => "10111110001000001011000000100011", 
    2 => "00111110010010011011111100111000", 
    3 => "00111110001010100111000100000110", 
    4 => "10111101110000100000111011010011", 
    5 => "00111101111001110000101110110001", 
    6 => "00111101011010111110001000100011", 
    7 => "00111110000000101011010111101001", 
    8 => "10111100101100000101001000100001", 
    9 => "00111100100111011000010110001010", 
    10 => "00111110000100101000110100011101", 
    11 => "10111101100111111011011111001011", 
    12 => "10111110010011101011001101100111", 
    13 => "00111101100000011000010011001110", 
    14 => "10111101110010011100001100010010", 
    15 => "10111110010000100010101000111001", 
    16 => "10111101100111010001101101110101", 
    17 => "10111110001001010101110111101101", 
    18 => "10111101100011100110111010001011", 
    19 => "10111110010001001100000011011111", 
    20 => "10111101100100101111110001101101", 
    21 => "10111100111000000101100100011110", 
    22 => "00111101110001110000110000101011", 
    23 => "10111110010011010100100111011010", 
    24 => "10111011111111101100111111110010", 
    25 => "10111101101100101010110111111000", 
    26 => "10111101101100110000111101010100", 
    27 => "00111110000000111100111011111010", 
    28 => "10111100100010100110110111010010", 
    29 => "10111100001000101101110000100110", 
    30 => "00111110000110110011110111011011", 
    31 => "00111100100011101110001111011110", 
    32 => "10111100001000101111001100111101", 
    33 => "10111110001101101101010100010000", 
    34 => "10111110010110010110101000111011", 
    35 => "10111101101011101010010000001101", 
    36 => "10111100111000000001111000111110", 
    37 => "00111101100110100010101000001110", 
    38 => "10111110000101001000000100001001", 
    39 => "00111101111110110111011111101101", 
    40 => "00111110001111110011000101010110", 
    41 => "00111110000000000011001111101010", 
    42 => "10111101110010011111111110111010", 
    43 => "00111110000101101111101111001001", 
    44 => "10111101110001100011010010101010", 
    45 => "10111110010001100100001011111100", 
    46 => "00111110000010110001101000001010", 
    47 => "10111101001101001110110101100101", 
    48 => "00111110001101101001111001010110", 
    49 => "00111110000001110011010010100110", 
    50 => "00111101011011110000001111100010", 
    51 => "00111101101101011011010100010001", 
    52 => "10111110000000110001011101101111", 
    53 => "10111011110001001010111011000000", 
    54 => "00111110001110110101101111010110", 
    55 => "00111100100100100110010000100011", 
    56 => "10111110001110111000111101111110", 
    57 => "10111110010011011001000111011101", 
    58 => "10111110000101011010011101001111", 
    59 => "00111110001010111101011001110101", 
    60 => "10111101111011100100100000001011", 
    61 => "10111101000111010101110110001010", 
    62 => "00111100111100100001000001011011", 
    63 => "10111101010011011100101000000000", 
    64 => "00111110001111110111111011011001", 
    65 => "00111010100111001000110110110110", 
    66 => "10111101001010001101111110101110", 
    67 => "10111101110001011101111110101000", 
    68 => "00111100101011000111110001011110", 
    69 => "10111101101010010101111111100110", 
    70 => "00111110010010011011001001100111", 
    71 => "00111101010110011100010100110101", 
    72 => "10111101110110001011101001011110", 
    73 => "00111101111100110110000110000010", 
    74 => "00111101100110111010011101101111", 
    75 => "10111101111101001111101010111011", 
    76 => "10111101001100001001110100001101", 
    77 => "10111100011010010110100111000111", 
    78 => "10111110010100100001011001011100", 
    79 => "10111101010110001110010010010100", 
    80 => "00111101100111011010001111001001", 
    81 => "10111110000110010110111011010101", 
    82 => "10111100100110011111100111011100", 
    83 => "10111101110110101001011001011010", 
    84 => "10111110010101010101010110101110", 
    85 => "10111110010110101111001011011001", 
    86 => "10111110010000111000010100011010", 
    87 => "10111100101110000111000111111011", 
    88 => "00111101110001011110011101000111", 
    89 => "00111101101111011111001001001110", 
    90 => "00111110001111001001100101101100", 
    91 => "10111101100001110111000010010010", 
    92 => "10111110000000111111111111010110", 
    93 => "00111100011111001011110101100111", 
    94 => "10111110001100011111111110111110", 
    95 => "10111100100000010111001100010011", 
    96 => "00111110000110011100101111011111", 
    97 => "00111110010011110100010000001111", 
    98 => "10111110000000111110011000011110", 
    99 => "10111101101000000111111101010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_6 is
    component nn_inference_hwmm_layer1_layer1_weights_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_6_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


