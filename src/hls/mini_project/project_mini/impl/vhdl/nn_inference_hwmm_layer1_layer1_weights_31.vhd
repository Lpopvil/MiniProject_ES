-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_31_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_31_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001111111010111111011101", 
    1 => "10111011011111001111100011010110", 
    2 => "10111110010111111110110100100001", 
    3 => "10111101000011110100101011010101", 
    4 => "10111110010100011000111011011010", 
    5 => "00111110000001100111110010001101", 
    6 => "00111100101011101010110011011011", 
    7 => "10111101000001110001001010101001", 
    8 => "00111101111101000110111000001100", 
    9 => "00111110010001000011011111001001", 
    10 => "10111110001110101001001111010101", 
    11 => "10111110010011110110010011001111", 
    12 => "10111110001010101110100110010110", 
    13 => "10111101110000010011101000001000", 
    14 => "00111101101110000010011001110000", 
    15 => "10111110000101010000000100010110", 
    16 => "00111101101011100111000011001001", 
    17 => "10111101110000010101010011100101", 
    18 => "00111101001011001000010001001011", 
    19 => "00111110010000101010000001100101", 
    20 => "10111101101100111110011001010011", 
    21 => "00111110001001110101110111100100", 
    22 => "00111101100011110101000001101010", 
    23 => "10111101111111111100111001011100", 
    24 => "10111011100101010001010101011101", 
    25 => "00111101101010001011010111001011", 
    26 => "10111101111101001011000010100000", 
    27 => "10111110001111111111000100101100", 
    28 => "10111100111010011011100010111001", 
    29 => "10111101101101111110001001011010", 
    30 => "10111101101011100100010001111100", 
    31 => "00111100110111000100100010101001", 
    32 => "10111110010010111000110000100111", 
    33 => "00111101110111000011010011000110", 
    34 => "00111100101001101100001110110111", 
    35 => "00111101001111110111000111001110", 
    36 => "00111110000111011110010011001101", 
    37 => "00111101001110101100011011100010", 
    38 => "10111101111000011111110100110100", 
    39 => "00111101100110010001011001010111", 
    40 => "00111101010010101000001001000111", 
    41 => "00111101010111000101111101001001", 
    42 => "00111101111000000010100011111110", 
    43 => "00111101100010100110000101100000", 
    44 => "00111101110110111011011010011111", 
    45 => "00111100101101111100010011000100", 
    46 => "10111101001011111101000100101000", 
    47 => "10111110010011110000110110010000", 
    48 => "00111110001010101011100110001000", 
    49 => "10111101110101001001100101101011", 
    50 => "00111100001101110001011001010100", 
    51 => "10111100101101010011100000010111", 
    52 => "10111110000011011010010110111101", 
    53 => "10111101110111101011100010010111", 
    54 => "10111110010100001001101101101101", 
    55 => "00111101000011100000101110001010", 
    56 => "00111110000001001100011111011000", 
    57 => "10111110001110101011111010100110", 
    58 => "00111110001101110101000011011110", 
    59 => "00111100111001111011100111101001", 
    60 => "10111011010010101110010111000000", 
    61 => "00111110001010010111010100111111", 
    62 => "00111110001111010000110101100110", 
    63 => "00111110000110101111001111010101", 
    64 => "00111101101100001001010110010100", 
    65 => "10111101000101011100001111110110", 
    66 => "10111110001100001110010001111101", 
    67 => "00111101100011000111001101111101", 
    68 => "10111101110100110010000001011101", 
    69 => "10111110001100111000001010101101", 
    70 => "00111100100000110011001011101100", 
    71 => "00111110000101110111001100110000", 
    72 => "00111100101010011100110111010010", 
    73 => "00111100100110100001100000011001", 
    74 => "10111101001001011011100000011110", 
    75 => "10111101000010001100100001111101", 
    76 => "10111110000110011011100010000100", 
    77 => "10111101101001101100000000000111", 
    78 => "00111110010001001010110011010100", 
    79 => "10111100100100011110101011000011", 
    80 => "10111110001011001100101011011101", 
    81 => "10111101001110111001111001101011", 
    82 => "00111110010001110000111010010001", 
    83 => "10111101001010111010011001111101", 
    84 => "00111101100100000010010110011000", 
    85 => "10111101111000010000011110101100", 
    86 => "10111110010010100001100111101100", 
    87 => "10111101111111111001100010100010", 
    88 => "00111110001100110010100110000010", 
    89 => "10111101110000010011000101100000", 
    90 => "00111101100011010011001101111001", 
    91 => "10111101011111010110001010111101", 
    92 => "00111101000011100111001000000100", 
    93 => "10111101110100001000011100000001", 
    94 => "00111101100110010011010000110110", 
    95 => "00111101101010110110101011011011", 
    96 => "10111110001011101101000110111011", 
    97 => "10111101010101101011111101101111", 
    98 => "10111110010111001110010111001000", 
    99 => "00111100110001000111100110100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_31 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_31 is
    component nn_inference_hwmm_layer1_layer1_weights_31_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_31_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_31_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


