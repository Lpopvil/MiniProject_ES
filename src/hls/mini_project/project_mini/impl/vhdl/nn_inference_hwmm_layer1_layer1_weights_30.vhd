-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_30_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_30_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010001011110111000000011", 
    1 => "10111110010010001011011110000100", 
    2 => "10111101101000010010101010100011", 
    3 => "00111110000000011011011001100000", 
    4 => "10111110000011001000011011010010", 
    5 => "00111100001000111010010011001010", 
    6 => "00111110001110110100011011001000", 
    7 => "10111100110000110000100000101110", 
    8 => "10111110010001011000000001100001", 
    9 => "10111110000011000110111110110110", 
    10 => "10111011100001010001000110010101", 
    11 => "10111110000000010011010010101011", 
    12 => "10111101110011000101100000100111", 
    13 => "10111101110101110110011110001101", 
    14 => "10111100001111011101100000010010", 
    15 => "10111100001000111110101010011011", 
    16 => "10111101110001100011001111010110", 
    17 => "00111110001011100000101110001000", 
    18 => "00111110001011000100011010111000", 
    19 => "00111101101001100010010000010100", 
    20 => "10111100110011011100100000001110", 
    21 => "10111100010001111000111011001100", 
    22 => "10111110001101000001011111001100", 
    23 => "10111110000010011010001001011001", 
    24 => "00111101110100111100000000000100", 
    25 => "10111101111101000010101011100001", 
    26 => "00111101100001011000111110001011", 
    27 => "00111101110010010011101010010011", 
    28 => "10111110000100000011101000110101", 
    29 => "00111101000100010111000001100111", 
    30 => "10111110000000000100011000001000", 
    31 => "00111100100110000111101111101001", 
    32 => "10111110010001100011011011111100", 
    33 => "10111100011100001101101110110000", 
    34 => "10111011100010000111100111100001", 
    35 => "10111101100010110101110000100000", 
    36 => "10111011100000111110100010001010", 
    37 => "00111110000111000000101100110011", 
    38 => "10111110010110100011100010011111", 
    39 => "10111101011100110010101011010110", 
    40 => "10111101110001100111000011101100", 
    41 => "00111101011101010011011000001000", 
    42 => "10111110011000100111001100011001", 
    43 => "10111101101110011000010110111110", 
    44 => "00111101100010110011101010111010", 
    45 => "00111101010001010011111110001100", 
    46 => "10111100100001000001001011110111", 
    47 => "10111110000010000011000000010110", 
    48 => "10111100010101001000001010100000", 
    49 => "10111101101110110100011110101110", 
    50 => "10111100010001100011110100100001", 
    51 => "10111001110001000001001111000100", 
    52 => "10111011001001101101100110000010", 
    53 => "00111110000010010110000101101110", 
    54 => "00111110000001111011110110001100", 
    55 => "00111100100111011001100010110000", 
    56 => "00111110001101000011000011100001", 
    57 => "00111101110010010010000100001111", 
    58 => "10111101101000001111001100010010", 
    59 => "00111100000111101011101001010000", 
    60 => "10111110001010101001010110111011", 
    61 => "10111110000000011010010101101001", 
    62 => "10111110001111110111101001110010", 
    63 => "10111101101100000001111010011000", 
    64 => "10111110001001101110011011101110", 
    65 => "00111101101101000111100100010100", 
    66 => "00111101100110110010110110001010", 
    67 => "10111101101000010110000110110001", 
    68 => "00111110001010001001100001110111", 
    69 => "10111101000101101000011010111000", 
    70 => "10111101111000101011000001100101", 
    71 => "00111110000001100101110001001011", 
    72 => "00111110000000100111110110001100", 
    73 => "00111101101111100110011010010100", 
    74 => "10111100100111101100100100011101", 
    75 => "10111101010111000100101010110000", 
    76 => "00111101101100000010111010110011", 
    77 => "10111101001110001100011000011000", 
    78 => "10111110011000111001011101001011", 
    79 => "00111110001000001001111110110001", 
    80 => "00111011100011110101110100110100", 
    81 => "10111110000000001101110110011110", 
    82 => "00111110000010100100101000110101", 
    83 => "00111110010001001111111010110010", 
    84 => "10111100111000011110100111111101", 
    85 => "00111011100000000011101101110001", 
    86 => "00111100000011111001011111011001", 
    87 => "00111101101000001011110111000101", 
    88 => "10111110011000100011010110000101", 
    89 => "00111101101001100011101000110011", 
    90 => "10111110001110010101000001110101", 
    91 => "00111100101010111101010000101011", 
    92 => "10111110000001011001010100010011", 
    93 => "00111101000101011111000000101010", 
    94 => "10111110011000010110011001111111", 
    95 => "00111110001011101111001100001110", 
    96 => "10111110001001111111100000100111", 
    97 => "00111101000001001011100101111110", 
    98 => "00111101011000110010001011000000", 
    99 => "00111110000101101111100111110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_30 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_30 is
    component nn_inference_hwmm_layer1_layer1_weights_30_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_30_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_30_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


