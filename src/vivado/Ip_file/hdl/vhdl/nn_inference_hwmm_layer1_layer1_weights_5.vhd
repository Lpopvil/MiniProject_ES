-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_5_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_5_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001101001110000100011", 
    1 => "10111110111100010010011110110100", 
    2 => "10111110011001000111101110000111", 
    3 => "00111101100101100100111100010000", 
    4 => "00111110100011001110110010001101", 
    5 => "00111110111010111011010100101111", 
    6 => "00111110101111001100110001010100", 
    7 => "10111101001010100110111000110110", 
    8 => "10111101110111001011110001011000", 
    9 => "10111111001111110001011111111110", 
    10 => "10111110011001001011111001001110", 
    11 => "10111101001111001111001001101101", 
    12 => "00111110000100101001001001011011", 
    13 => "10111110101011000100010100000110", 
    14 => "10111110001100111101000101110010", 
    15 => "10111101011100000100010110101101", 
    16 => "00111110101010000001000110011110", 
    17 => "10111111000010110111110010110100", 
    18 => "10111110101001100000111110110001", 
    19 => "10111111000000111001111000110111", 
    20 => "10111110101011110110101001011100", 
    21 => "10111110101111000011100001110000", 
    22 => "10111110000000100001111101011001", 
    23 => "10111110111011001110100010101011", 
    24 => "10111110000010111111111000000001", 
    25 => "00111110110000000000101011000100", 
    26 => "10111110000000000011011110101101", 
    27 => "10111110100111101100001000000010", 
    28 => "10111111000010000011001011110101", 
    29 => "10111111000001111010010100111101", 
    30 => "10111111010001011011000110010111", 
    31 => "10111111000010111010101001100110", 
    32 => "10111110101111001100010110110000", 
    33 => "10111100110000010000000110101111", 
    34 => "00111110101110000111011110011101", 
    35 => "00111110110110000100001100111101", 
    36 => "10111110111100001011001000000000", 
    37 => "10111110111001011000110011100000", 
    38 => "10111111010100101101111111011111", 
    39 => "10111110111010010100100110101111", 
    40 => "10111111001111101001111100100100", 
    41 => "10111111001110001111111011010000", 
    42 => "10111110100011000111111100010100", 
    43 => "00111110101001010100011111000100", 
    44 => "00111111001011110000100000111000", 
    45 => "00111110111110000011111000011110", 
    46 => "00111110001100001001110011101001", 
    47 => "10111110100001100010011000101000", 
    48 => "10111111010100100010111101101000", 
    49 => "10111111010100011001101011011001", 
    50 => "10111111001011100001100100110111", 
    51 => "10111110011101000000111101001110", 
    52 => "10111111001001100111110010111111", 
    53 => "00111110011011100001110110101111", 
    54 => "00111110010101011001111110111001", 
    55 => "00111110101001111100001001100000", 
    56 => "00111100100101110100100100111000", 
    57 => "10111110111100000010001101100010", 
    58 => "10111110100010010101111111011010", 
    59 => "10111111000111110010000110100010", 
    60 => "10111111000101100100110011011110", 
    61 => "00111100011100011100010100011010", 
    62 => "10111110100000100001100011111000", 
    63 => "10111110011110000110011101111011", 
    64 => "00111100101001111000100100101011", 
    65 => "00111110100111111100000100111001", 
    66 => "10111110111010100001110101110100", 
    67 => "10111110100101011010101101111000", 
    68 => "10111101001011010111011100001001", 
    69 => "10111110110111000111000101110101", 
    70 => "10111111010011101110011000000000", 
    71 => "10111110010011001110110111100000", 
    72 => "10111111001000110100010010101010", 
    73 => "10111111000100110101001010100000", 
    74 => "00111101100010011111000010100010", 
    75 => "00111010000111110011110000010110", 
    76 => "10111110100101001001011001011000", 
    77 => "10111101000100000111001100000000", 
    78 => "10111110111010011101111011100000", 
    79 => "00111101000110011101100100101111", 
    80 => "10111111001110000100000011000000", 
    81 => "10111111010010111101000011011010", 
    82 => "10111111010011100011010101101111", 
    83 => "10111110100011110000111111010010", 
    84 => "10111110100000011011101001111011", 
    85 => "10111110000101110001010000010101", 
    86 => "00111110101011010100100111010011", 
    87 => "10111101100011011000000011110100", 
    88 => "10111101000101110110101111100011", 
    89 => "00111110100001100101111010000010", 
    90 => "10111101111010001000101010100101", 
    91 => "10111001010010001011000011111000", 
    92 => "00111110000000111001110111101111", 
    93 => "00111110101010000001110001011000", 
    94 => "10111101111010010010011100001101", 
    95 => "10111101111011001001011001000110", 
    96 => "10111100000110011101110001001110", 
    97 => "10111110100010101011111101010000", 
    98 => "10111101100001010111001001011111", 
    99 => "00111110100101100100100001100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_5 is
    component nn_inference_hwmm_layer1_layer1_weights_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_5_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


