-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111111000101001100011101100010", 
    1 => "10111110101101111010001000110110", 
    2 => "10111110010101011100010111111011", 
    3 => "00111110100000010011001001000000", 
    4 => "00111111000111001100101011111100", 
    5 => "00111110010100100011000111111010", 
    6 => "00111110110100010000011100100011", 
    7 => "00111111000110010011011011101010", 
    8 => "00111110110111010111010110011011", 
    9 => "00111110000000101000011000101011", 
    10 => "10111111001101111001101001111011", 
    11 => "10111111001010101100100010110000", 
    12 => "10111111001000010011011010000110", 
    13 => "10111101111100101111010101000001", 
    14 => "10111110000101001011100110110011", 
    15 => "00111110001011000100011001110001", 
    16 => "00111110010101111001100100010011", 
    17 => "00111101100110011010110011111100", 
    18 => "00111110101100101101011110011011", 
    19 => "00111100110011111100001100001011", 
    20 => "10111111000100011101101101100100", 
    21 => "10111111000001001001010110010011", 
    22 => "10111110011101001100011111000001", 
    23 => "10111110011010001011011000110011", 
    24 => "00111110100011001010111111100010", 
    25 => "10111110100101110000001101000011", 
    26 => "00111001101000111110110100100011", 
    27 => "00111101011100000110100010100010", 
    28 => "00111110011101000101101000111010", 
    29 => "00111110101111111000101001000111", 
    30 => "10111111000000010100010001011011", 
    31 => "10111110110100001001000001011111", 
    32 => "10111101000001110011010100101110", 
    33 => "00111110010100000001110000101000", 
    34 => "00111110010100011011010011000111", 
    35 => "00111101000010110011001001001101", 
    36 => "10111110001010101011010111000111", 
    37 => "00111100000001000001111011011111", 
    38 => "00111110101111101111100110111010", 
    39 => "00111110011001101100011011110001", 
    40 => "10111110111001000011100000001001", 
    41 => "10111110100101010111110111110010", 
    42 => "00111100110101110110110111010010", 
    43 => "00111110010001011011111111110001", 
    44 => "00111110101010100111101001100000", 
    45 => "10111110100110100001010110011000", 
    46 => "10111110100111110110100001000011", 
    47 => "00111101011010100100110011000100", 
    48 => "00111110110111100111101010111010", 
    49 => "00111110100100111110100000011110", 
    50 => "10111110111001100000010100110101", 
    51 => "10111110011101111010100101000110", 
    52 => "00111110001101110111011110101011", 
    53 => "00111110010001010000000101101110", 
    54 => "00111110110000001101001111110111", 
    55 => "10111110101001010101001111011000", 
    56 => "10111110101111101001001100011000", 
    57 => "10111100101010111101100000000011", 
    58 => "00111110001111110111001111101001", 
    59 => "10111101100011000010010011000001", 
    60 => "10111110101011011011110000001100", 
    61 => "10111110001000011111011101111111", 
    62 => "00111110001010111010000101010011", 
    63 => "00111110011001001001100111101110", 
    64 => "00111110110001001010100100000000", 
    65 => "10111101010000000110111111010101", 
    66 => "10111110110010001110011110001000", 
    67 => "10111101001111001111001111110011", 
    68 => "10111101110101100010001111100101", 
    69 => "00111110011010110011010000110100", 
    70 => "10111110110011110100011101000100", 
    71 => "00111110000001101111000101110101", 
    72 => "00111110100110110001011010100011", 
    73 => "00111110100011001100001101101001", 
    74 => "00111110101110111100100000101001", 
    75 => "00111110001101100110101110101001", 
    76 => "00111101111001110011101001111010", 
    77 => "10111100101110101010100010110010", 
    78 => "10111100000001000111011000010011", 
    79 => "00111101100010111000111110010110", 
    80 => "10111101100110111010011101000100", 
    81 => "10111110000110100101001001101000", 
    82 => "00111110100011000000000110011011", 
    83 => "00111110011101000001110111110000", 
    84 => "00111110100000111010000111111000", 
    85 => "00111110110010011101001110000110", 
    86 => "00111110000110000101001111010100", 
    87 => "10111110000011110110101100101010", 
    88 => "10111110101011001000100011100010", 
    89 => "10111100001010100100000000100100", 
    90 => "10111110101100001100111011110010", 
    91 => "10111110110100101010110001010010", 
    92 => "10111111000001011000001001100000", 
    93 => "10111110111111100101111110001000", 
    94 => "10111111000011101100000110110100", 
    95 => "10111110111001001111110010101101", 
    96 => "10111110111001100010000101011001", 
    97 => "10111110111101011100110011100101", 
    98 => "10111101011000001100000000000100", 
    99 => "10111100110000011100100000111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_4 is
    component nn_inference_hwmm_layer1_layer1_weights_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_4_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


