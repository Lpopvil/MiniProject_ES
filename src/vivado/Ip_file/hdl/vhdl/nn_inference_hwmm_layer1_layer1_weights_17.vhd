-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_17_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_17_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101000111101011110011101", 
    1 => "00111110001011010100101111100100", 
    2 => "10111110011001111011010110011110", 
    3 => "10111100111011001000011010110001", 
    4 => "10111100101010101000011001010101", 
    5 => "00111110011001000101101100001011", 
    6 => "00111011101011111100011110000001", 
    7 => "10111110000010111000011010011011", 
    8 => "00111110110001011100000101111111", 
    9 => "00111110011011010001011100111001", 
    10 => "10111101101001001001001001000010", 
    11 => "10111110010011110011101101000110", 
    12 => "10111111001110000111011101010001", 
    13 => "10111111000001111000000110101101", 
    14 => "10111110011100100000101101111010", 
    15 => "10111110001010000110101101010110", 
    16 => "10111110100010111111110000010100", 
    17 => "10111111001011101000011010100000", 
    18 => "10111111001110010010001101110111", 
    19 => "00111101000101111111010011000111", 
    20 => "00111110000001101111110000000011", 
    21 => "00111101100011110011000101100001", 
    22 => "10111110101100111011011100001101", 
    23 => "10111110110111011000110110100100", 
    24 => "10111110110101010111000001001100", 
    25 => "10111110001100011000001010000001", 
    26 => "10111110100111111011100010001111", 
    27 => "10111100110111100101101111110101", 
    28 => "00111110011110100010000001111111", 
    29 => "00111110010010100011111011011111", 
    30 => "10111101100010110011010100100111", 
    31 => "10111101111010110110110001001010", 
    32 => "10111110101011001010010000111101", 
    33 => "10111110100100110000010010011000", 
    34 => "00111110011100110101100100000011", 
    35 => "00111110100100100100000000000010", 
    36 => "00111111001000111001111011101101", 
    37 => "00111110111111010101100100001101", 
    38 => "00111111000011111001100010000100", 
    39 => "00111111001011011001001100110001", 
    40 => "10111110000001011111000010111100", 
    41 => "10111110110101011011010101111000", 
    42 => "00111101000000101011111000111001", 
    43 => "00111110111110100101001110000000", 
    44 => "00111110101011110101001110111110", 
    45 => "10111101100100100011101100001010", 
    46 => "10111110100001001111000100101101", 
    47 => "10111110101001101000001010111110", 
    48 => "10111111000111000110111000001101", 
    49 => "00111111011010000111011011111100", 
    50 => "00111111000100111000011100010100", 
    51 => "00111111000100111110000100010111", 
    52 => "00111110110011001001111110000010", 
    53 => "00111110111000110011010110000011", 
    54 => "00111110010111111011010001001111", 
    55 => "00111110011101100100101000000111", 
    56 => "00111110101111000010101101010111", 
    57 => "10111101111100001000011100000000", 
    58 => "00111110010010100000101001000000", 
    59 => "00111111000111110110111110011110", 
    60 => "00111111010000110000000011001110", 
    61 => "00111111000010101101110000010100", 
    62 => "00111110101000001001101100110001", 
    63 => "10111110011011011000011111000111", 
    64 => "00111011011101110010111010010011", 
    65 => "00111110100101001000111010110000", 
    66 => "00111110100010111110010010011100", 
    67 => "00111110100001101100101010101111", 
    68 => "00111101110001011111000010101111", 
    69 => "00111110011001001001000110011010", 
    70 => "00111111011011010100001111001100", 
    71 => "10111100111110111111010110000011", 
    72 => "10111110100001111100001101111110", 
    73 => "10111110100110110100100101111100", 
    74 => "10111110110001111111100000000111", 
    75 => "10111110100101000101000011010001", 
    76 => "10111110001010011010000111101011", 
    77 => "10111110000001000001111000011000", 
    78 => "00111100110111100000101010101001", 
    79 => "00111110110000111100001100000110", 
    80 => "00111111011111011001011001010010", 
    81 => "10111110010101000110100100000110", 
    82 => "10111110100010000101011001001011", 
    83 => "10111101000000001010111010100000", 
    84 => "10111101101010101010000010110011", 
    85 => "10111100110011001101110001010000", 
    86 => "10111101010000110000011000111101", 
    87 => "10111101000010000001110111011010", 
    88 => "00111110010101101101000011000010", 
    89 => "00111111000010111010110101001100", 
    90 => "10111101001000101110110000111100", 
    91 => "10111110100000000000100000010111", 
    92 => "10111110111100101111000100111110", 
    93 => "10111110100111000000001000001000", 
    94 => "10111110110001011110001111101000", 
    95 => "10111110100000100100010100000000", 
    96 => "10111111000010000111010111010001", 
    97 => "10111110110010001011110001110101", 
    98 => "00111110111011001110100101011111", 
    99 => "00111101011001011111010000101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_17 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_17 is
    component nn_inference_hwmm_layer1_layer1_weights_17_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_17_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_17_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


