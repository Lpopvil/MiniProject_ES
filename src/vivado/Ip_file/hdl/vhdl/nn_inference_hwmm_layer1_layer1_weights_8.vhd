-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_8_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010110011101100001100010", 
    1 => "00111110100100110001101111111010", 
    2 => "10111100101110101101011101111100", 
    3 => "10111110000011111100010110001011", 
    4 => "10111110101011000100010010110101", 
    5 => "00111100011100001011010110111001", 
    6 => "10111110100011001000010110100000", 
    7 => "10111110101100101111100101010100", 
    8 => "10111111000100100000101001100110", 
    9 => "10111111000011110111010111110110", 
    10 => "00111111000011010101000111001110", 
    11 => "00111110000011101011000001111000", 
    12 => "00111110111000110001001001000001", 
    13 => "00111110110101101000100011011001", 
    14 => "00111110110011011010101101110000", 
    15 => "00111110110110110000000010100110", 
    16 => "00111110101100000111100101101110", 
    17 => "10111110011010000010101001001111", 
    18 => "10111110111111101101110011110111", 
    19 => "10111111001111001001101000110111", 
    20 => "00111110110100101010110111001011", 
    21 => "00111110100010100100101110011001", 
    22 => "10111101011000110010010111110111", 
    23 => "00111101011111101011011110110000", 
    24 => "00111110000100010111001011011100", 
    25 => "00111110011110000001111101110110", 
    26 => "00111111000000111001110110000010", 
    27 => "00111110101011000101001111000000", 
    28 => "10111110001001101010101000101001", 
    29 => "10111111010001110100101001010011", 
    30 => "00111111000011100111010111010010", 
    31 => "10111101010110111011100001101100", 
    32 => "10111111000101100000111000000011", 
    33 => "10111110111001001111110010111100", 
    34 => "10111111000000000001110001011111", 
    35 => "00111110101011111010111101001010", 
    36 => "00111110111011000101000101010010", 
    37 => "00111111000011100101100000100111", 
    38 => "00111110101011011100000001100000", 
    39 => "10111111010010010101001111100010", 
    40 => "00111111001110000010001011011010", 
    41 => "10111110111100101101110100010100", 
    42 => "10111101101011011100010101110110", 
    43 => "10111101111011011110011111000101", 
    44 => "00111100100110100101111001011111", 
    45 => "10111110110011100000010010100001", 
    46 => "00111110000110000110010011110011", 
    47 => "00111110100110011111111111010111", 
    48 => "10111011101100111111110111111100", 
    49 => "10111111000110000100100100111100", 
    50 => "00111110100011000000111010001101", 
    51 => "00111110101011011011001111101110", 
    52 => "00111101111100110111111110011101", 
    53 => "00111101111110011000111001100111", 
    54 => "10111110001011011111101010000001", 
    55 => "10111110110000001101111000111101", 
    56 => "10111101110110101001001011011111", 
    57 => "10111110000011011111011100000001", 
    58 => "10111110010110010001000010011011", 
    59 => "10111101010101010111011100101100", 
    60 => "10111101101101110000001100011111", 
    61 => "00111110001101010110010001100100", 
    62 => "00111101110100000111011010010100", 
    63 => "10111110100001000011011110110110", 
    64 => "10111110101111010110100101001100", 
    65 => "10111110101000111011001111010111", 
    66 => "00111011111010000000011110100111", 
    67 => "10111100000110101111111011010010", 
    68 => "10111110001010111010111010001001", 
    69 => "10111110000101000011010100110101", 
    70 => "10111110100001111100110100000110", 
    71 => "00111110101100100111110101010011", 
    72 => "00111110100100011111111100010100", 
    73 => "00111101111000001011010000100000", 
    74 => "00111110011100111100000010111110", 
    75 => "00111110010110111100100011110100", 
    76 => "10111101111100111011100000110110", 
    77 => "10111101100111101100111001000011", 
    78 => "00111100110010101110011011101001", 
    79 => "00111110001110001100100011101100", 
    80 => "10111110100001011110110010100011", 
    81 => "00111110001110010010111101101100", 
    82 => "00111110100111100101111100011010", 
    83 => "00111110000111011001000110011110", 
    84 => "00111111000000101111100001010000", 
    85 => "00111110100000110110001110001010", 
    86 => "00111110010000011011110100011111", 
    87 => "10111110100000001011001101111010", 
    88 => "00111110100000010010011000011111", 
    89 => "00111110100111111111101010100010", 
    90 => "00111111000100000101111100111001", 
    91 => "00111110011111000101110100110101", 
    92 => "00111110111001111101011001111001", 
    93 => "00111111000000110010010001000000", 
    94 => "00111101110111001000011001011101", 
    95 => "00111101101100011110001111110100", 
    96 => "10111101001011110011001001101000", 
    97 => "10111101000000011110100001001100", 
    98 => "10111101001110111100010001001000", 
    99 => "00111110101111011001111000001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_8 is
    component nn_inference_hwmm_layer1_layer1_weights_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_8_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


