-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_31_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_31_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110101110000101110001010110", 
    1 => "00111011010011110011100011001101", 
    2 => "10111101110000111110100000110110", 
    3 => "00111111001010000010110101100010", 
    4 => "00111111000001101100111100001111", 
    5 => "00111110010011110101110110001001", 
    6 => "00111110000010001111110011011111", 
    7 => "00111111001011100101010001001010", 
    8 => "00111110101001111111101101000111", 
    9 => "10111101101010000010001010110111", 
    10 => "10111110101111010000011111101100", 
    11 => "10111110001010111111100110011010", 
    12 => "10111101111100011000010110000111", 
    13 => "10111110110011110111010010100101", 
    14 => "10111110110011010100110110000100", 
    15 => "10111110101000000101111001111110", 
    16 => "10111110101101000000111111001001", 
    17 => "00111110110011110110001011011011", 
    18 => "00111110011000101110011100101001", 
    19 => "00111101000000011001000110011110", 
    20 => "10111011111001011100111010010111", 
    21 => "10111110101111011001101100101110", 
    22 => "10111110101010110110100110010000", 
    23 => "00111101111111110100000101110111", 
    24 => "00111101001010010010000111010110", 
    25 => "00111110000001000101111111101100", 
    26 => "00111101101100011100000101000110", 
    27 => "00111110100010000010111100110011", 
    28 => "00111111000110111111011101010000", 
    29 => "10111101011100011101011011101001", 
    30 => "10111110001000100100111110000101", 
    31 => "10111101100010011000101011011100", 
    32 => "00111110100010100001100111001011", 
    33 => "00111110100100100001001001111001", 
    34 => "00111110101001100100111110001100", 
    35 => "00111110001000101011110100110000", 
    36 => "00111110001100010111101010010001", 
    37 => "00111101110101110101110101101010", 
    38 => "00111110001111111100001100111101", 
    39 => "10111110101100011101110111010000", 
    40 => "10111110010111000101110000011011", 
    41 => "00111110100100010000000001001110", 
    42 => "00111110011100111101000100001101", 
    43 => "00111110111011110111011010011101", 
    44 => "10111101111101101110001001111011", 
    45 => "10111110011010011010111000110110", 
    46 => "10111110001000100101110110000101", 
    47 => "00111110111000111111110001110111", 
    48 => "00111110011111011101000100001010", 
    49 => "10111111010100010101000011000011", 
    50 => "10111110101111101001101111000110", 
    51 => "00111110010111010100001010001001", 
    52 => "00111111000000011001111111110010", 
    53 => "00111110011001111011111110001001", 
    54 => "10111110011001010111110011110111", 
    55 => "00111011011101001001010100110110", 
    56 => "10111100001000100011101101000111", 
    57 => "00111110100011010111110111100110", 
    58 => "00111110010111100001000111101100", 
    59 => "10111111000110000100001110100111", 
    60 => "10111110110101001110001010010111", 
    61 => "10111110111101011111001111110001", 
    62 => "10111110000011001010110101010111", 
    63 => "00111110100001111111111111111010", 
    64 => "00111101101000011111101010010111", 
    65 => "00111101010110100111000010100000", 
    66 => "00111101110100111000110101001001", 
    67 => "00111110000011001100100001111001", 
    68 => "10111101110101011011110110000000", 
    69 => "10111110010010111000101010000001", 
    70 => "10111110011111100011111110001000", 
    71 => "10111110010010111111010111000100", 
    72 => "10111110011010010010111010011001", 
    73 => "00111110000101111100100100000110", 
    74 => "00111101101000100001100001111110", 
    75 => "00111110010100101110001001110101", 
    76 => "00111101010100110010111100110010", 
    77 => "10111110010001110110110110100100", 
    78 => "10111101110110111110100111111011", 
    79 => "10111100001111010011011110011001", 
    80 => "10111110011010101010111000111000", 
    81 => "10111101111111010110110110110111", 
    82 => "00111101111110111101101011011011", 
    83 => "10111011100110100011010010001000", 
    84 => "00111101101001001010011011000110", 
    85 => "10111110001100101001101110101101", 
    86 => "00111110000111010010101101111000", 
    87 => "00111101100010111001000101000111", 
    88 => "10111110000110001011100100111110", 
    89 => "10111110100011100000101100111001", 
    90 => "00111101010010110011001011011110", 
    91 => "00111100110010100111011101001110", 
    92 => "10111101110100001111100110011011", 
    93 => "10111110000100001001100100000010", 
    94 => "10111110100011011101111110101100", 
    95 => "10111110101111001000111110010000", 
    96 => "10111110010100101110011001011011", 
    97 => "00111110010111100000000011010011", 
    98 => "00111110011100000010101110101101", 
    99 => "10111100011111000010011100110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_31 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_31 is
    component nn_inference_hwmm_layer1_layer1_weights_31_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_31_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_31_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


