-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_25_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_25_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110100101100100010110001", 
    1 => "10111110011100110101101001011000", 
    2 => "00111110000110100100001010111011", 
    3 => "00111110010001110010001111010100", 
    4 => "00111110111001101111011001111011", 
    5 => "00111110110010011100110011011110", 
    6 => "00111110100010100110010010011110", 
    7 => "00111110011000100100011010111100", 
    8 => "00111110101100010100111000001010", 
    9 => "10111110100010100000011100111111", 
    10 => "10111101010000010111101110000110", 
    11 => "00111110000100001110010101110010", 
    12 => "00111110010110010000000010110111", 
    13 => "10111100100101101110010010110101", 
    14 => "00111101011100011010010111001100", 
    15 => "00111110001111110000011011111101", 
    16 => "00111101111100100111100111010011", 
    17 => "00111110101000111111011110100100", 
    18 => "00111110010100011111000000101011", 
    19 => "10111110101101001010101110000110", 
    20 => "00111101010111011110011001010001", 
    21 => "00111100001001101111010101111100", 
    22 => "10111100110111000001110010111110", 
    23 => "10111110011101100000001001101100", 
    24 => "10111101100110000001001100011100", 
    25 => "00111101110011101111111001000000", 
    26 => "00111101110110010011100111100110", 
    27 => "10111101101001111100111110010110", 
    28 => "10111100101001100001001000111111", 
    29 => "10111101001110001101000101000010", 
    30 => "00111101101100101110100100101110", 
    31 => "10111110001110110010110111011111", 
    32 => "10111110001100011111011110010000", 
    33 => "10111110000001010010010001011000", 
    34 => "10111110000101101000110111001011", 
    35 => "10111101110110111101100101001111", 
    36 => "10111110000001100000001111110110", 
    37 => "00111101001001000111000001001001", 
    38 => "10111110100110001101000110100001", 
    39 => "10111111000000000100100100001010", 
    40 => "10111110001101110001001100000111", 
    41 => "10111110101011100001011110010011", 
    42 => "00111101100111100011101110101001", 
    43 => "00111100101110000010111100101001", 
    44 => "10111110011001100110001011010111", 
    45 => "00111110100110101111010110001110", 
    46 => "00111110001010100000000011000100", 
    47 => "00111110001101010110000001000100", 
    48 => "00111110110110010100101001100101", 
    49 => "10111111000000111100111011101110", 
    50 => "10111110111101101111110010111001", 
    51 => "00111110001001100001000001001110", 
    52 => "00111110111111011000011010011010", 
    53 => "00111110001100110010101000101000", 
    54 => "00111110100110001001001001100000", 
    55 => "00111110100101100010110001000000", 
    56 => "00111110001101110101010111001100", 
    57 => "10111110010010010010000001111111", 
    58 => "10111101110100011110010001001001", 
    59 => "00111110100100110011010100011011", 
    60 => "10111110111110111101011001011011", 
    61 => "10111110100000111010010111000100", 
    62 => "10111101100100011100010010001110", 
    63 => "00111110100001111111110111101111", 
    64 => "00111110100111110101101101101100", 
    65 => "00111101101110100100111000111110", 
    66 => "00111100101011011111101010001100", 
    67 => "00111110011001100001011111010100", 
    68 => "10111101110010101010011110110101", 
    69 => "00111110111010001010011001011111", 
    70 => "10111110111001100100010111001010", 
    71 => "10111110100100000100110100001011", 
    72 => "00111110001011010011100000011011", 
    73 => "00111100110000111011010000110100", 
    74 => "00111110000101100010101111101110", 
    75 => "00111110100001011110010011010111", 
    76 => "00111110111111011001010101010001", 
    77 => "00111110011010011101111001110111", 
    78 => "00111101110010010000000101000010", 
    79 => "00111110101111010111110101010000", 
    80 => "10111110111110000000111011101110", 
    81 => "10111110001011010111010101101000", 
    82 => "00111110001111001110100100110100", 
    83 => "00111110000100111111111110110000", 
    84 => "10111101111011111011101100111110", 
    85 => "10111101101010000011100110011001", 
    86 => "00111110010000011000010101000111", 
    87 => "00111110000100110111111010101110", 
    88 => "00111110101111010011010110111001", 
    89 => "00111110011110000110101111111100", 
    90 => "10111110100000100010001111001100", 
    91 => "00111101011110111111110010101001", 
    92 => "10111110000100001111101111001111", 
    93 => "10111110110101001111010001110111", 
    94 => "10111110001101110000011100001001", 
    95 => "10111110101010100111110110100110", 
    96 => "10111110000111010011100001010001", 
    97 => "10111110010001011101110011011101", 
    98 => "10111110100111101010001011011111", 
    99 => "00111110101011100100011000010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_25 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_25 is
    component nn_inference_hwmm_layer1_layer1_weights_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_25_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


