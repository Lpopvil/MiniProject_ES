-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_10_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_10_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001011101011100010000110", 
    1 => "00111110010110001110001000000110", 
    2 => "10111110011000101110101110001111", 
    3 => "10111101101111010100010110110011", 
    4 => "10111111010000100011000110101100", 
    5 => "10111111001001001110101010111100", 
    6 => "10111101100010001001000001001100", 
    7 => "00111101101001101001111001101111", 
    8 => "00111110111100001010100100011100", 
    9 => "00111110100110100010001101110011", 
    10 => "10111101100010010100100010011111", 
    11 => "10111101010000110000001110011111", 
    12 => "00111101110110100011111011001110", 
    13 => "10111101100010101011101011001101", 
    14 => "00111101000110011101010110111100", 
    15 => "00111110010100100011110111110111", 
    16 => "00111101111101101100100101111111", 
    17 => "10111101100101111111000010100011", 
    18 => "00111110010011010010011011101100", 
    19 => "00111110110101010001100011111101", 
    20 => "10111101010100000110110111110001", 
    21 => "00111100110101010101010010111010", 
    22 => "00111110101110000111001101101010", 
    23 => "00111110010101100010110111100001", 
    24 => "00111110001010000110011001101101", 
    25 => "00111110100100111001011001101000", 
    26 => "00111110101011100100001000011000", 
    27 => "00111100111111110101000011100001", 
    28 => "00111101001101011001100110010101", 
    29 => "00111110110011011001101100010010", 
    30 => "10111110111111011000001000011101", 
    31 => "10111110100011101101000100100011", 
    32 => "00111110100100100100010000100001", 
    33 => "00111110101111110100111111111001", 
    34 => "00111110100100011001010001100010", 
    35 => "10111101001000101010111001010011", 
    36 => "10111101001000101100100001011101", 
    37 => "00111110100110111011100000111000", 
    38 => "00111111000001101010111000000000", 
    39 => "00111110110001001101000110100000", 
    40 => "10111111000000011010010100001111", 
    41 => "00111101100000100110001001000000", 
    42 => "00111110001001111111001100000110", 
    43 => "00111110001100110010010010000011", 
    44 => "00111110101010010111011010111100", 
    45 => "10111101110001010000010111010011", 
    46 => "00111110000000001011011100001001", 
    47 => "00111101011101000111100101111000", 
    48 => "10111110011001010111101111011011", 
    49 => "00111110110010111110101011000101", 
    50 => "10111101101001101011000101111110", 
    51 => "10111101101101110111110111000100", 
    52 => "10111110100101010011010100011010", 
    53 => "00111110010110101011100010110010", 
    54 => "00111110001110111001000101101111", 
    55 => "10111110001011110011000000000001", 
    56 => "00111110111001011010000010011110", 
    57 => "00111100111000111110010000101110", 
    58 => "00111110000111110110010010010110", 
    59 => "10111111000101010100011001010101", 
    60 => "00111110110111000010001100001010", 
    61 => "00111110001100011111000000101010", 
    62 => "10111110001100010010111111110001", 
    63 => "10111110000001111001110110001100", 
    64 => "10111100010101000101001001000001", 
    65 => "00111101000110000001000010010000", 
    66 => "00111100101010110111100100100101", 
    67 => "10111100001011110111100000000111", 
    68 => "10111110000001010101100111110100", 
    69 => "10111111000111000010010000100110", 
    70 => "00111110111111010111100001001111", 
    71 => "10111110011100100110101101101111", 
    72 => "10111101111011010101000011011110", 
    73 => "10111110011111111000100010000100", 
    74 => "00111101100100000011011111011000", 
    75 => "00111101110111101011110110110001", 
    76 => "00111101010101101110011111100111", 
    77 => "10111110100010100010101010111011", 
    78 => "10111110100000101111000010100101", 
    79 => "10111111001010100101101011110000", 
    80 => "00111111001101011010100010101001", 
    81 => "10111101110110101011101100001010", 
    82 => "10111101010111110110100000011111", 
    83 => "00111101011111000110110110111110", 
    84 => "00111110010001011011000100110100", 
    85 => "00111110000101110001001100111000", 
    86 => "00111101011010100000010010110010", 
    87 => "10111100100101101001011000010111", 
    88 => "00111110010001101111010101110011", 
    89 => "10111111010001110101011101101011", 
    90 => "00111111000011010111000101111110", 
    91 => "00111111000100001100010011101011", 
    92 => "00111111000010101011011111111000", 
    93 => "00111111000000111100000001000010", 
    94 => "00111110111100001011110011000110", 
    95 => "00111111001110111101000000110111", 
    96 => "00111111100010001101000110100000", 
    97 => "00111111000111000101101111100001", 
    98 => "00111111000000100111010101000111", 
    99 => "10111110110011111110101100110011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_10 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_10 is
    component nn_inference_hwmm_layer1_layer1_weights_10_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_10_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_10_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


