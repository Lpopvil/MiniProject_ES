-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110100100001010011111111100", 
    1 => "00111110100010001111010010111010", 
    2 => "00111110010001011001110101101110", 
    3 => "00111110110110110001011010111110", 
    4 => "00111111000011101011001000000010", 
    5 => "00111110000011101011010100110010", 
    6 => "00111110000100110101010111010000", 
    7 => "00111110111001011110110010010100", 
    8 => "00111110111101100000000110101110", 
    9 => "10111110110110011011111101000000", 
    10 => "00111110100011010111110001111011", 
    11 => "00111110011011011011100010001111", 
    12 => "00111101010101100100101000111101", 
    13 => "00111110000010110011010010000000", 
    14 => "10111101001101111111001101110111", 
    15 => "10111101011100001010100001101101", 
    16 => "00111110000011010000111011011000", 
    17 => "00111110000001011011111011001010", 
    18 => "00111110010001100010110101001000", 
    19 => "00111101110001001001100001001111", 
    20 => "00111110110010111101000010100000", 
    21 => "00111110000111000111001001010011", 
    22 => "00111110101011000010101000011100", 
    23 => "10111100101110110001100101110011", 
    24 => "00111101000011101100001010001100", 
    25 => "00111101001101010111100111110010", 
    26 => "00111110000101000110000000010010", 
    27 => "00111101000011001011010011101000", 
    28 => "10111100111011010011100101111111", 
    29 => "10111100000010111111010011000001", 
    30 => "10111100111001100001001010001011", 
    31 => "00111110010101111001011010110001", 
    32 => "00111110101001010010100101101010", 
    33 => "00111110000101100001000101101011", 
    34 => "00111100011100010110000100000101", 
    35 => "00111110001110001111100100100111", 
    36 => "10111100101101101101011010011101", 
    37 => "00111110001101100001100000110101", 
    38 => "00111110011010110010101110011111", 
    39 => "10111111000110110000010111000010", 
    40 => "00111110001111110011101100110111", 
    41 => "00111011011110111000111000001111", 
    42 => "00111101011111001101110111000000", 
    43 => "00111110001010000001111000011101", 
    44 => "00111110001111110100101011011101", 
    45 => "10111110101100101100110001011100", 
    46 => "00111110100001011001011010111011", 
    47 => "00111101010001111111000001100101", 
    48 => "00111110101011100011111111101001", 
    49 => "10111110111001101111011100000011", 
    50 => "00111100110101101000111110010001", 
    51 => "00111101111110110101111110101000", 
    52 => "00111110010111010100000111100111", 
    53 => "00111110111011001110101111010110", 
    54 => "10111110000010001110011010000001", 
    55 => "00111101111110100001001011110101", 
    56 => "00111110110011110011100111101010", 
    57 => "00111101100011101111011001001100", 
    58 => "00111110011110011001111100011110", 
    59 => "10111110100110111101111010011010", 
    60 => "10111110010101000110101001001011", 
    61 => "00111101110000101110111000011001", 
    62 => "00111110110001101011100011010001", 
    63 => "00111110010011111010110111101100", 
    64 => "10111110000100100010000100101111", 
    65 => "00111110001100101001100111011000", 
    66 => "00111110111001000000101010111101", 
    67 => "00111110100111000001101001001100", 
    68 => "00111110100001110100100101000011", 
    69 => "10111101001101011000100111010001", 
    70 => "10111110000011000110001111000111", 
    71 => "10111110000111001100011001101010", 
    72 => "10111101101101101100000000000110", 
    73 => "10111101111110100100100010110001", 
    74 => "00111110011000110101111110100110", 
    75 => "00111110011111001000000001100111", 
    76 => "10111110011010111000011000010001", 
    77 => "10111101111100010000000100011110", 
    78 => "10111101111111100110000101000110", 
    79 => "10111110000111000011000101000101", 
    80 => "10111110011100001111100100101010", 
    81 => "10111110011000101100011011111111", 
    82 => "10111101110010001111011010110000", 
    83 => "00111110010110101101001011001111", 
    84 => "00111110010010110000111000000001", 
    85 => "10111110001010011110100100011001", 
    86 => "10111110110110011010111111001001", 
    87 => "10111111001110011101011101011111", 
    88 => "10111110111101011001010001000110", 
    89 => "10111111000011110100011011010101", 
    90 => "00111111001101000100100101110000", 
    91 => "00111111001011000111100001001111", 
    92 => "00111111000110001101011101110011", 
    93 => "00111110011010100001011000011101", 
    94 => "00111110011111011100011101101101", 
    95 => "00111101001111100111110010110101", 
    96 => "10111110100100101010111101011000", 
    97 => "10111111001010010111000010000101", 
    98 => "10111111000111000001101000001101", 
    99 => "10111110101101011101110010100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_6 is
    component nn_inference_hwmm_layer1_layer1_weights_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_6_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


