-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_13_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100110011100000100001111", 
    1 => "00111101101010011001111011101010", 
    2 => "00111110111110011011100101011011", 
    3 => "00111110110110001111111010011011", 
    4 => "00111111000000110101101010010100", 
    5 => "00111101111011100010000001110100", 
    6 => "00111110101001101010001111110000", 
    7 => "00111111000001100000000011110011", 
    8 => "00111110110101100111101110000011", 
    9 => "00111110001100110110101110011110", 
    10 => "10111101110111011010100110001011", 
    11 => "10111101101100000001101110011010", 
    12 => "10111101101111010000010011011101", 
    13 => "00111101101100111110111111000000", 
    14 => "10111110101011101110110111010100", 
    15 => "10111101110110001101011010001010", 
    16 => "00111110010101010110101001000111", 
    17 => "00111110110110101111000000011001", 
    18 => "00111110100111011100010011100000", 
    19 => "00111101100010001010110000000101", 
    20 => "10111110100000011000111011010100", 
    21 => "10111101001111011111111010010001", 
    22 => "10111101111100101010111000110110", 
    23 => "00111101001000010000000001001010", 
    24 => "10111110001000111111101000101110", 
    25 => "10111110100000010010000111111000", 
    26 => "10111111000000111111011010010001", 
    27 => "10111110100010011110111101000101", 
    28 => "00111101011001110001011111010110", 
    29 => "00111110101001011001011011001011", 
    30 => "10111111001110011011000011100001", 
    31 => "10111110100110010010100100111111", 
    32 => "10111101011111010000000010101100", 
    33 => "00111110000101010100110001100001", 
    34 => "00111110011000001011001001110101", 
    35 => "10111111000000101011100010111000", 
    36 => "10111110110000100001111111010100", 
    37 => "10111110100111100010001001101010", 
    38 => "00111101100110000110111011001010", 
    39 => "10111101110111011111000110111001", 
    40 => "10111111011001101110101110000110", 
    41 => "10111110100110100110111010011110", 
    42 => "00111101101111101111111111110011", 
    43 => "00111101111010111010100110111011", 
    44 => "00111110110011010000111001000100", 
    45 => "10111110000011010101001111100100", 
    46 => "00111110010110001101100110100100", 
    47 => "00111100011100101001011010011110", 
    48 => "00111110101101111100011110111011", 
    49 => "10111110010001111000111111010010", 
    50 => "10111111001000011111000111101111", 
    51 => "10111111000011000001100011111000", 
    52 => "10111101110000110010010001110100", 
    53 => "00111110011000010101011111001001", 
    54 => "00111110001111001000111100100110", 
    55 => "00111101110110000000110010111001", 
    56 => "00111110110100111011110110000000", 
    57 => "00111110100011010101111110111000", 
    58 => "00111110111101110100011000111100", 
    59 => "10111110000001100011000101110101", 
    60 => "10111110111110011001100011110010", 
    61 => "10111110100111011101011101110010", 
    62 => "10111110011110101011101110001110", 
    63 => "00111110101111101101001011000101", 
    64 => "00111110100000100110101000111100", 
    65 => "10111101100111100100111001110110", 
    66 => "00111110001010100001000110100111", 
    67 => "10111101001001111001010100110010", 
    68 => "10111101011111101100000001011111", 
    69 => "10111110101011000000101101011101", 
    70 => "10111110111110100011100010101000", 
    71 => "10111111000010111110101010111101", 
    72 => "10111111000001011101011101001011", 
    73 => "00111101110111101100111101000011", 
    74 => "00111111000010100111001100010110", 
    75 => "00111110101101100110010100100001", 
    76 => "10111101000000111000111110011101", 
    77 => "10111110100110010101101000110011", 
    78 => "10111110101111000011110111111100", 
    79 => "10111111000001001000100011101000", 
    80 => "10111110110011100011010110011110", 
    81 => "10111110101011000100000010101100", 
    82 => "10111111000001100101100100001100", 
    83 => "10111110000000001000111110101100", 
    84 => "00111110101001101011101101101101", 
    85 => "00111101100011111110110000101101", 
    86 => "10111111000001010101111111001110", 
    87 => "10111111000010110010011110000010", 
    88 => "10111110111100111000010101000110", 
    89 => "10111110101000011011011111010001", 
    90 => "00111101000010010000110010110000", 
    91 => "10111101011101111101010010010111", 
    92 => "10111110000110010010001010000001", 
    93 => "00111101111000010011110100111010", 
    94 => "10111110111101111011110000010101", 
    95 => "10111110111011011110101100000101", 
    96 => "10111111000111111101011010000101", 
    97 => "10111111011000000000101111010100", 
    98 => "10111110001100100110010010110110", 
    99 => "10111110111111011000110111010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_13 is
    component nn_inference_hwmm_layer1_layer1_weights_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_13_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


