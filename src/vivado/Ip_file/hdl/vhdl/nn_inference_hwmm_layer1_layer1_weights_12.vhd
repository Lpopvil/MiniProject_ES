-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_12_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_12_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101010011100111010000010", 
    1 => "00111011110001110001110110000101", 
    2 => "10111100110011100001110111010001", 
    3 => "10111101101101101100101011011010", 
    4 => "10111110000000001110110111111101", 
    5 => "10111101100011111011011100110111", 
    6 => "10111110001010111010011110000101", 
    7 => "10111110000000010000001001011111", 
    8 => "10111101011000011110011010101011", 
    9 => "00111110110101100001011110101010", 
    10 => "10111101110010110100010101011100", 
    11 => "00111110000101011010111010010100", 
    12 => "00111110000001100100010101011111", 
    13 => "00111110001011010011010000000101", 
    14 => "00111110100110110000100011110100", 
    15 => "00111110010111110101001100011000", 
    16 => "00111110101110001000101101011011", 
    17 => "00111100100111101010001011011111", 
    18 => "00111101110011111010101101001110", 
    19 => "00111110000010110111011000000110", 
    20 => "00111101101010100110111010111011", 
    21 => "00111110001010101000000011001001", 
    22 => "00111110001000000110011011101111", 
    23 => "10111101010000011011110011101000", 
    24 => "10111101110110110101100110010111", 
    25 => "00111110001001110000111000011001", 
    26 => "00111110101000100000100111011100", 
    27 => "00111110000000111100011001000011", 
    28 => "00111110100101010111011110000001", 
    29 => "00111110110011111010110000100101", 
    30 => "00111110000011110001001100010111", 
    31 => "10111101100001000000111011011001", 
    32 => "10111100100101001011100100110010", 
    33 => "00111110000010010001110010100011", 
    34 => "00111110100111000001100110100011", 
    35 => "00111110111101000001100101000101", 
    36 => "10111101001101001101100010110001", 
    37 => "00111110010010001001100000011000", 
    38 => "00111110100111000011011001001100", 
    39 => "00111110110010001010000100000010", 
    40 => "00111110011111100001011111001101", 
    41 => "00111100111001101001010010110001", 
    42 => "00111110101011000100111000111100", 
    43 => "00111110000011101010010000111001", 
    44 => "00111110011001000100101101101001", 
    45 => "00111110101110101100000001000011", 
    46 => "00111010001101100101100000100111", 
    47 => "00111101110010100000000100001111", 
    48 => "00111011100011000110111000010110", 
    49 => "00111111010110100101101011011111", 
    50 => "00111110001011101001010011111000", 
    51 => "00111101111011010111101010001011", 
    52 => "10111100111100010010010011011010", 
    53 => "10111110000110001111111011010100", 
    54 => "00111101110111101111111110001111", 
    55 => "10111100101100111000011010001101", 
    56 => "10111110000100010111010101001000", 
    57 => "00111101111011011000000100110011", 
    58 => "00111110011110101100101101001111", 
    59 => "10111110010100000111001001011001", 
    60 => "00111111001000011111110001011001", 
    61 => "00111110111101000100001011001111", 
    62 => "00111101110000001101010010101110", 
    63 => "10111101100010110100101110001001", 
    64 => "10111100101111001010101111101111", 
    65 => "10111110000011101000001000111100", 
    66 => "00111101010000100101010100011001", 
    67 => "00111011110001101001100011110101", 
    68 => "00111110010000110001011000010111", 
    69 => "10111110000010011000100110101010", 
    70 => "00111111000100111110111000011111", 
    71 => "00111100111100101011001000110011", 
    72 => "00111101110110100000010111101011", 
    73 => "00111110011101011010001010111001", 
    74 => "00111110110111111110010111000110", 
    75 => "00111110111110110000011110001001", 
    76 => "00111110010110101000011011111110", 
    77 => "00111110100101001001101110110011", 
    78 => "10111101110100110100011011101101", 
    79 => "10111101000011010100000011011011", 
    80 => "00111111000100110101101101111001", 
    81 => "00111110110000011111000011111110", 
    82 => "10111101111101010000010111011010", 
    83 => "00111110011010110000000111001110", 
    84 => "00111110000101011110110101111000", 
    85 => "00111110101001001111111010011100", 
    86 => "00111110111010010011001010010000", 
    87 => "10111110000111011111001011011011", 
    88 => "10111110100010110011111010000011", 
    89 => "10111101000100101110110000111001", 
    90 => "00111110100011000011010000101101", 
    91 => "10111101110110011010010011101001", 
    92 => "00111101101010101011000011001101", 
    93 => "00111110101000010110101000110010", 
    94 => "00111110111010011110110001000100", 
    95 => "00111110001011100111111111011111", 
    96 => "00111110101100011000001101111010", 
    97 => "10111110001101101011001111010010", 
    98 => "00111110101001010110010011000100", 
    99 => "10111110010101000000011110110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_12 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_12 is
    component nn_inference_hwmm_layer1_layer1_weights_12_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_12_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_12_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


