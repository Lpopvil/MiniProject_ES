-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_3_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_3_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011100010111100000001", 
    1 => "10111110100101101001110010110100", 
    2 => "10111101101011000010010110111010", 
    3 => "00111100110101011011101011001000", 
    4 => "00111101111110001111110110000001", 
    5 => "00111110100001111101010100010110", 
    6 => "00111110001101111110000100110011", 
    7 => "00111110011111011011111000100011", 
    8 => "10111110001011110010000010110001", 
    9 => "10111111000010010101111100101101", 
    10 => "00111011111001010111000011110101", 
    11 => "00111110010010101001100111000001", 
    12 => "00111101100110011001011100011000", 
    13 => "00111110000100110100111000100011", 
    14 => "00111100111110100110111000011001", 
    15 => "10111110011010000101000111011001", 
    16 => "00111100110000100110010110111000", 
    17 => "10111101100110100111110100110011", 
    18 => "10111101101111101011100010000110", 
    19 => "10111110001010101110001011110111", 
    20 => "00111110010011001101001101000101", 
    21 => "00111101100010101000000101101000", 
    22 => "10111110100101011100011000101000", 
    23 => "00111110001011010100100000011000", 
    24 => "10111101100011110100001101010101", 
    25 => "00111110101001100100011101010010", 
    26 => "00111110000010000011010101000101", 
    27 => "10111101101001001010100111011011", 
    28 => "10111110100010111000010110001000", 
    29 => "10111110100100000111011011110100", 
    30 => "10111110010100111111100100100111", 
    31 => "10111101000001001010010111001010", 
    32 => "00111110000010001010100000101110", 
    33 => "00111100110010001001101011101010", 
    34 => "10111100100100101010011110001100", 
    35 => "00111110101011010100010001110111", 
    36 => "00111110100111010101110010000101", 
    37 => "00111110001110010111000101111101", 
    38 => "10111101111010011000111110111000", 
    39 => "10111111000100101001010110100110", 
    40 => "10111110101111111011000000100100", 
    41 => "00111110000010101000001010101100", 
    42 => "00111110100101111100000101101001", 
    43 => "00111110101011100110100101101000", 
    44 => "00111110000010000100101010110110", 
    45 => "00111110111001011001001011001001", 
    46 => "00111110110011100000101010010001", 
    47 => "00111110101111001010001001101111", 
    48 => "00111110100101000111100111001000", 
    49 => "10111111011000010100100101001001", 
    50 => "00111100110001011100001010010110", 
    51 => "00111110000111000000001100100110", 
    52 => "00111110011001010010001011011000", 
    53 => "10111101100101010011001111111001", 
    54 => "00111110001111011010100000010101", 
    55 => "00111110010100001011010000101011", 
    56 => "00111101001010110101100111110011", 
    57 => "00111110010000100101001110011100", 
    58 => "10111101000001101011000010100100", 
    59 => "10111110110111111010011001011001", 
    60 => "00111110011001100011001011001100", 
    61 => "10111101100011111111111110010000", 
    62 => "10111110010010110001001001000100", 
    63 => "00111110000111100001111100000010", 
    64 => "10111110011111010010000100101001", 
    65 => "10111110000111001011001101010001", 
    66 => "00111110010101110001100110100001", 
    67 => "00111110000101001000000101111100", 
    68 => "10111110110000101100111000011110", 
    69 => "10111110101111110010010000001001", 
    70 => "10111011110001111110010110001001", 
    71 => "00111110000110011100111101100011", 
    72 => "10111110010110111100001001110011", 
    73 => "00111100101110101101110011111101", 
    74 => "10111110100001111111010110010000", 
    75 => "00111110011101110011101000001001", 
    76 => "00111110001000010010100011011110", 
    77 => "10111101110111000111110101110010", 
    78 => "10111110100011100111101101010100", 
    79 => "10111110110101110010110111001011", 
    80 => "00111110101110101001111110011101", 
    81 => "00111110010011101000100111001001", 
    82 => "00111110101111001011101100100111", 
    83 => "00111101110000111010010101111111", 
    84 => "10111100110111011000011100001110", 
    85 => "00111110100001101101010100110010", 
    86 => "10111110000001010110001100001101", 
    87 => "10111110001011010101111010111100", 
    88 => "10111101000111110101001111001001", 
    89 => "10111110110100111100110001110001", 
    90 => "00111111001011110001000111110110", 
    91 => "00111111001000001001100000011111", 
    92 => "00111110111110011000100110011001", 
    93 => "00111110100011011111010000001001", 
    94 => "00111110011011100100111011011000", 
    95 => "00111110011001001110111110101011", 
    96 => "00111110000011010011111000010000", 
    97 => "00111110011010111011010100001011", 
    98 => "00111101101001011101100101101100", 
    99 => "00111100111111110010011011111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_3 is
    component nn_inference_hwmm_layer1_layer1_weights_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_3_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


