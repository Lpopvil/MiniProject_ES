-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_30_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_30_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111111001000110110111100011010", 
    1 => "10111111010101101100110011000100", 
    2 => "10111111010000101000101101111010", 
    3 => "10111111011100101001100001011010", 
    4 => "10111111001111100101110100110011", 
    5 => "10111101111101101100000010001001", 
    6 => "10111110001101001010011110000000", 
    7 => "10111110111010011101010000010100", 
    8 => "10111111010000010001011000001010", 
    9 => "10111110110101111101111001100000", 
    10 => "10111111000101010101001010101111", 
    11 => "10111111001101011011001100000100", 
    12 => "10111111011000010101010101010110", 
    13 => "10111111011100000011000101101111", 
    14 => "10111111011100110111110010011010", 
    15 => "10111110100111110101001011111001", 
    16 => "00111110101110110100001101100111", 
    17 => "00111110101100111011110101000011", 
    18 => "10111110001000101011111101101010", 
    19 => "10111110010010110100011001010101", 
    20 => "10111110111011111010011110000001", 
    21 => "10111110100101101000100010011011", 
    22 => "10111110000001110100111010000000", 
    23 => "10111110001000011001001111111001", 
    24 => "10111110011000101110101110110101", 
    25 => "10111101010101000001011000000100", 
    26 => "10111100101111010001001110001100", 
    27 => "00111110101111100110010011010000", 
    28 => "00111101110101101100010000111001", 
    29 => "00111101110111010101101110101101", 
    30 => "00111111001110001101110000111011", 
    31 => "00111111001011010010010011001101", 
    32 => "00111110111111011100110110111101", 
    33 => "00111111000110010001101010010101", 
    34 => "00111110110010110100100010100101", 
    35 => "10111101110010011110100001010111", 
    36 => "10111110100001110111011110010000", 
    37 => "00111101111001111111101010010101", 
    38 => "00111110111011110100101001000000", 
    39 => "10111101100101100110011001000100", 
    40 => "00111111001110001001001100000101", 
    41 => "00111110010111111100010110111110", 
    42 => "10111110000101111101110111001001", 
    43 => "10111101101000111100100001101110", 
    44 => "10111110110011111010101110000100", 
    45 => "10111110000111110110110101101101", 
    46 => "00111110000100011000101001000101", 
    47 => "00111110111100010001110100111010", 
    48 => "00111110011001110011010111011100", 
    49 => "00111110001100000101000101010100", 
    50 => "00111111000010011001000001100111", 
    51 => "10111101110010110010110111001000", 
    52 => "10111101011101011101100111001100", 
    53 => "00111101110011011110011110001101", 
    54 => "00111110001111101110001101010011", 
    55 => "00111110001011110100111011111001", 
    56 => "00111110100000011110101111010000", 
    57 => "00111110101101111010101011101100", 
    58 => "00111110011011101011110001000000", 
    59 => "00111110111001100001011000111011", 
    60 => "10111110101111001000100101100010", 
    61 => "00111100100011011110001000011010", 
    62 => "00111101011101001010100110010000", 
    63 => "10111101001000101110011000011001", 
    64 => "00111110011110001000101101110111", 
    65 => "00111011111110110110000000000011", 
    66 => "10111110000001000100011100010111", 
    67 => "10111110010000101110111100010011", 
    68 => "00111101111011100010110011111100", 
    69 => "00111110110001001111000011110101", 
    70 => "10111110100100110100110011101111", 
    71 => "00111110100000101000000010111101", 
    72 => "00111011000100000111010100101000", 
    73 => "10111101110111011100101100101000", 
    74 => "10111110010011000001000111001000", 
    75 => "00111101111010110010010110000010", 
    76 => "10111011101001110010011101100100", 
    77 => "10111110101000010100011100011101", 
    78 => "10111011101001111101101110000011", 
    79 => "10111101101110000110000100000111", 
    80 => "10111110110111110001100101110000", 
    81 => "00111101001111110011011000111100", 
    82 => "10111110000001001000100101101110", 
    83 => "10111110000101110010100101010100", 
    84 => "10111101111101000010101101110000", 
    85 => "10111110001111010100111110011110", 
    86 => "10111101110000111010011100000010", 
    87 => "10111110011110001010100000011011", 
    88 => "10111110100000101111010100001110", 
    89 => "00111110010101000010011001111110", 
    90 => "00111101010111010011010011110101", 
    91 => "10111110110100010001101010000001", 
    92 => "00111111000100000101000111110001", 
    93 => "00111111000110100110110101001100", 
    94 => "00111110011110000100100101011101", 
    95 => "00111110101101010011011010000011", 
    96 => "00111110110001110010000100000111", 
    97 => "00111110001111001110000011011111", 
    98 => "10111110111100100010111111100001", 
    99 => "10111110010000111011110001011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_30 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_30 is
    component nn_inference_hwmm_layer1_layer1_weights_30_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_30_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_30_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


