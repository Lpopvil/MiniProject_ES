-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_19_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_19_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110100001000110111110001", 
    1 => "00111110101011110011101010101101", 
    2 => "00111101111100111101000111011100", 
    3 => "00111011101110001010110010011011", 
    4 => "00111110011101001100101000110001", 
    5 => "10111110000010000111001111011000", 
    6 => "10111101111100000000111011110101", 
    7 => "10111110110111111111100101000000", 
    8 => "10111110100000000001111111010100", 
    9 => "10111110110010111100010110100101", 
    10 => "00111110100000110111110011010010", 
    11 => "10111101111000100010010011111010", 
    12 => "00111110000101010101101010000010", 
    13 => "00111110110000101001101000011010", 
    14 => "10111100101101111001010000001111", 
    15 => "00111101111001010011110000100111", 
    16 => "00111110000000110101110001000111", 
    17 => "10111110011010110001001000111101", 
    18 => "10111110111010100011000111011101", 
    19 => "10111110111011011100111101110011", 
    20 => "00111110110001111010010001010011", 
    21 => "00111110010100010100110100101011", 
    22 => "00111110100000000011001101010001", 
    23 => "00111110010111000010101100010100", 
    24 => "00111110110111100110010111101111", 
    25 => "00111110110011101101100110000111", 
    26 => "00111110001000101001101111000010", 
    27 => "10111100000010011010001011011100", 
    28 => "10111110100000011100100100101111", 
    29 => "10111111000100011101111110101011", 
    30 => "00111111000101101011000010101100", 
    31 => "00111110001000011001010110100100", 
    32 => "00111011101110101001100100001000", 
    33 => "00111110010000001011011111110011", 
    34 => "10111101111001100100011011100011", 
    35 => "00111110001000100011111001101101", 
    36 => "00111110101111000111001011000001", 
    37 => "00111110101000101000001001111000", 
    38 => "10111110101100110100011010001011", 
    39 => "10111110101110011100011101011101", 
    40 => "00111111001100011101010111010100", 
    41 => "10111111000100010001011000111010", 
    42 => "10111111001010011001011110001111", 
    43 => "10111111001000101000000111011100", 
    44 => "10111111001011011111110100101101", 
    45 => "10111110111011011000100110100010", 
    46 => "00111101110011100010001000010110", 
    47 => "10111110010001100110101100011001", 
    48 => "10111110110110010100010000101111", 
    49 => "00111110001011101001100111011111", 
    50 => "00111110111011110111001100110111", 
    51 => "10111110100110111101011000110001", 
    52 => "10111101111001001000101100001111", 
    53 => "00111101000011000001011010111110", 
    54 => "00111101001111101110101100100111", 
    55 => "10111101101101110101110010010010", 
    56 => "10111101100110111111000011111111", 
    57 => "10111110001111010101100001010000", 
    58 => "10111111000011111101011001010001", 
    59 => "00111110100010100111101101011101", 
    60 => "00111101000001011011101110101101", 
    61 => "00111110001100101101100111011100", 
    62 => "00111110001111010000100101000111", 
    63 => "10111101101011010101011011100001", 
    64 => "10111110001001000000001100111000", 
    65 => "00111110001011010000011110010011", 
    66 => "10111110001001101100001101100100", 
    67 => "10111110101111011111010110101101", 
    68 => "10111101110100000010101011100000", 
    69 => "00111110101011111000010001100101", 
    70 => "00111110011011011101100010001110", 
    71 => "00111110010111000111100111110011", 
    72 => "00111101000100101011100010010011", 
    73 => "00111110000100010000110000100010", 
    74 => "00111110100010000010100001010111", 
    75 => "00111110000000100101001110110100", 
    76 => "00111011111111010001001100100101", 
    77 => "00111110000110011010010011001110", 
    78 => "00111100101011001001001100011001", 
    79 => "00111110011011110111110001101111", 
    80 => "00111100101011100100000111100111", 
    81 => "00111110011111111011000111101100", 
    82 => "00111110100101111111011111110011", 
    83 => "00111101110011100011100101110000", 
    84 => "00111101001111100001101010101101", 
    85 => "10111101110110011110011000101010", 
    86 => "00111110100001100010101011100101", 
    87 => "00111110110010011000000111101001", 
    88 => "00111111000010111100111101000100", 
    89 => "00111111001110011000110000001111", 
    90 => "10111110100000111000110111011101", 
    91 => "10111100100011100100010111010100", 
    92 => "00111110000111101001101101010100", 
    93 => "00111110011101111101011010100110", 
    94 => "00111111000010101111110010101001", 
    95 => "00111110110110000000000100001100", 
    96 => "00111110110111011001100010011011", 
    97 => "10111110000010010010110011000100", 
    98 => "10111110100010100010000101101011", 
    99 => "00111110101110011011111111010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_19 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_19 is
    component nn_inference_hwmm_layer1_layer1_weights_19_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_19_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_19_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


