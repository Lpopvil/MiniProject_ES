-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_24_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_24_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111111000011010100111101110110", 
    1 => "10111110000110001110111111111100", 
    2 => "00111101011100100001110100100101", 
    3 => "00111110101000000110111010000111", 
    4 => "00111110100001100001111011110101", 
    5 => "00111101011100111011101011110111", 
    6 => "00111101000111101000000110011100", 
    7 => "00111101100110000101111010010100", 
    8 => "00111110101010100110011100110001", 
    9 => "00111110011111101111101010011101", 
    10 => "10111111000110011110100001100011", 
    11 => "10111111000100011000000101011010", 
    12 => "10111110100100101111001110010100", 
    13 => "00111110010110110001011000000011", 
    14 => "00111110001110100000000100100101", 
    15 => "00111110001110111001010110111000", 
    16 => "00111100111110111010100001110010", 
    17 => "10111110010011110000101101000011", 
    18 => "10111110101011010000100011010001", 
    19 => "00111110000100110000001100111110", 
    20 => "10111110111111110010111010101101", 
    21 => "10111111000110100100110101101010", 
    22 => "10111110100100011110011010001000", 
    23 => "00111101001110100011110001110000", 
    24 => "00111101011001010000100001011000", 
    25 => "00111110101001010011100101101100", 
    26 => "00111110101010110000010000111001", 
    27 => "00111011111101011011010000010101", 
    28 => "00111110110010111010110101000100", 
    29 => "10111101101001001001011100001001", 
    30 => "10111110100101011111010010111001", 
    31 => "10111110000011011010010011101110", 
    32 => "00111110000010011100100101001100", 
    33 => "00111110111111001010011001000100", 
    34 => "00111110011010110011010011100110", 
    35 => "00111101111110010011101011001010", 
    36 => "00111101001110010101100101001100", 
    37 => "00111101100100011101001101011110", 
    38 => "00111111000101110101101011001011", 
    39 => "00111110000000110011101100001100", 
    40 => "10111110100011110001000011000100", 
    41 => "00111110001100011100001011000010", 
    42 => "00111111000110011010001000111101", 
    43 => "00111110011100100010010111101010", 
    44 => "00111110000110001011010100000010", 
    45 => "10111110111010100010101011111111", 
    46 => "10111101100000000001111010101101", 
    47 => "00111101111101110100101001010011", 
    48 => "00111110111100010001000111001111", 
    49 => "00111110101000010100100100110101", 
    50 => "10111110011000000000110111100011", 
    51 => "00111110010010001110001101101001", 
    52 => "00111101100011101011101001110110", 
    53 => "00111110101001111000101001100100", 
    54 => "00111101101111010110001000101110", 
    55 => "10111110110011011111010101111000", 
    56 => "00111101001011100101010110010001", 
    57 => "10111101001010001011100010011111", 
    58 => "00111110101000101100110110111111", 
    59 => "00111110001111001000011010011111", 
    60 => "10111111010000000101000100100001", 
    61 => "10111110000101100001000011100000", 
    62 => "00111110010001001000110011001101", 
    63 => "00111101111111110111111000001110", 
    64 => "00111101111111110010011001011100", 
    65 => "10111110001111011000010001010101", 
    66 => "10111100111100010110100001001010", 
    67 => "10111100100010101111001000011110", 
    68 => "00111110100101000111011011111011", 
    69 => "00111110101001011101111010011110", 
    70 => "10111111000101001101110110111011", 
    71 => "00111100100011111010111001010001", 
    72 => "00111110011001101100101101000111", 
    73 => "00111110101000000110011000111010", 
    74 => "00111110110011100010111101110001", 
    75 => "00111110000110000010000110000011", 
    76 => "00111101101111010000101100111101", 
    77 => "00111110001011111101100100010101", 
    78 => "00111110011011000100011100010111", 
    79 => "00111110010001100010101110001110", 
    80 => "10111111000011001101100100010101", 
    81 => "10111110010110100110110001111110", 
    82 => "10111100110000000100101100010001", 
    83 => "00111101111000001010000010100101", 
    84 => "00111110100001110000011111000000", 
    85 => "00111111000010001011000001000010", 
    86 => "10111110001010011111000011111001", 
    87 => "00111101111000110010000101100001", 
    88 => "00111110010111011110111101110001", 
    89 => "00111110000011111010010111011110", 
    90 => "10111111000110011101010100111111", 
    91 => "10111110110111110101011100000100", 
    92 => "10111110111110000010001111001100", 
    93 => "10111111001100101111001001111100", 
    94 => "10111111000110011011010100011100", 
    95 => "00111011011001110010101111011010", 
    96 => "10111110001010101110001110101110", 
    97 => "10111110000110101011010101111110", 
    98 => "10111110010111101010101101000110", 
    99 => "00111110000011101001011011101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_24 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_24 is
    component nn_inference_hwmm_layer1_layer1_weights_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_24_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


