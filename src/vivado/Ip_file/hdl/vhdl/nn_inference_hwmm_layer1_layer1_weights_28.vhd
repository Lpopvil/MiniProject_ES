-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_28_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_28_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110101000111000010111100", 
    1 => "00111110010000101101110011001111", 
    2 => "10111110001010011001000111111111", 
    3 => "10111110111101110101011001001010", 
    4 => "10111110101011001011011000001000", 
    5 => "10111110000101001110100011100000", 
    6 => "10111110101100100001010110100101", 
    7 => "10111110100110001101010001001111", 
    8 => "10111110111100011110010010100110", 
    9 => "00111111001000110001011001101010", 
    10 => "00111110011100110000001111100001", 
    11 => "00111101000010001011000100011001", 
    12 => "00111110010011101100111100001001", 
    13 => "00111101101101101000001110001110", 
    14 => "00111101010011001001101001010000", 
    15 => "00111110101110111110011011010011", 
    16 => "10111100110010111100100111010001", 
    17 => "10111101001111001100011001001000", 
    18 => "10111110101101010000100111000010", 
    19 => "00111101110010100000110000100001", 
    20 => "00111011101101101111001011101001", 
    21 => "00111110000110101111000001100101", 
    22 => "00111101110110011000001111111101", 
    23 => "00111101110000000001111101001000", 
    24 => "00111101111010010100010100111000", 
    25 => "10111110001001111110100010101011", 
    26 => "10111100111010011110010011100100", 
    27 => "00111110101101111100111011110000", 
    28 => "00111110001110100110000101100110", 
    29 => "00111101101001000110100111101000", 
    30 => "00111110111010100010001111100011", 
    31 => "00111110100000000101111010111110", 
    32 => "00111101110001001011101111011100", 
    33 => "10111101010100101000000001100001", 
    34 => "00111111000001111001110011100010", 
    35 => "00111110110010100100010111000001", 
    36 => "00111110010011001000001111101001", 
    37 => "00111101000001100100000001100110", 
    38 => "00111110011111111111101111110111", 
    39 => "00111111001100010000110000010010", 
    40 => "00111110111110101001110011011111", 
    41 => "00111110100011001010000100000110", 
    42 => "00111110000100000001101010010000", 
    43 => "10111110000111000101001010111100", 
    44 => "00111110010110101101101011010011", 
    45 => "00111110111110000011110001101011", 
    46 => "10111110010100011111101001000011", 
    47 => "10111110011001110110010000000111", 
    48 => "10111110111011101001111001001001", 
    49 => "00111110100011010011010110110110", 
    50 => "00111110111011010101111110001001", 
    51 => "10111101001000011101000001001000", 
    52 => "10111110001001011110000101010100", 
    53 => "10111110010001110110000101001000", 
    54 => "10111110101100000101000100010010", 
    55 => "10111110001111011010011111111110", 
    56 => "10111110001000010111110011111101", 
    57 => "10111100100011100011011001110000", 
    58 => "10111101111001110011011011111111", 
    59 => "10111110110101000001010111100111", 
    60 => "00111111010110110010101110101111", 
    61 => "00111110000000000101100011111101", 
    62 => "10111101011000011010010101001001", 
    63 => "10111110100001101010111110010110", 
    64 => "10111110110010010111110010011100", 
    65 => "10111101000000101001010001001001", 
    66 => "10111100110011000001011001000100", 
    67 => "00111110010101100111010110111010", 
    68 => "10111100110100010011111000010011", 
    69 => "10111110100110111110011111001110", 
    70 => "00111111001010000101110010000110", 
    71 => "00111101111101000111000100100101", 
    72 => "00111110110000110110101111100100", 
    73 => "00111110011011111000101001100100", 
    74 => "00111110001100101110101111111001", 
    75 => "00111110101000001011011100000111", 
    76 => "00111110111001100010100000111010", 
    77 => "00111011101001011011001000110101", 
    78 => "10111110000110101001011101001010", 
    79 => "10111101100110111110101001111011", 
    80 => "00111111010100010000000000011010", 
    81 => "00111110111001101011010001000101", 
    82 => "00111110010010110101000001011111", 
    83 => "10111110000001110101100010011011", 
    84 => "10111101001011011110000010010011", 
    85 => "00111110001011100111110000110011", 
    86 => "00111110011001101000111000011001", 
    87 => "10111101110011011000111110110110", 
    88 => "10111110100011000100011111011011", 
    89 => "10111110101101011011100011100011", 
    90 => "00111111000011011100100011001110", 
    91 => "00111110100111000110010110101111", 
    92 => "00111110101100101000010010011011", 
    93 => "00111111000110101111010111001010", 
    94 => "00111111000011110010101000011110", 
    95 => "00111110100011011111101001011010", 
    96 => "00111110111011111110010100100011", 
    97 => "00111110101010001100111100111100", 
    98 => "00111110011001101111000001011001", 
    99 => "00111110001111011101000110011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_28 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_28 is
    component nn_inference_hwmm_layer1_layer1_weights_28_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_28_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_28_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


