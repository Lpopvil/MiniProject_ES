-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_22_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010001101111001111000000", 
    1 => "10111110100101000001101001011111", 
    2 => "10111110001011011011111110000011", 
    3 => "00111100110110000110010111001110", 
    4 => "10111110100000011101010100101111", 
    5 => "10111110101110011001000010110101", 
    6 => "10111101011010011001100000010011", 
    7 => "00111110011100111110011000101010", 
    8 => "00111110100000111111110000111011", 
    9 => "00111110000001101111110000001010", 
    10 => "10111110101101001010010011001111", 
    11 => "10111110011000000010000000100001", 
    12 => "10111110001001000110101110001111", 
    13 => "10111110101101111000001001110000", 
    14 => "10111110100010111000010110010111", 
    15 => "10111110101011000110110101100000", 
    16 => "10111110010011111011100101110111", 
    17 => "10111110100000100001101111000001", 
    18 => "10111110100001011110001111101101", 
    19 => "00111101000110110000001111001100", 
    20 => "10111110100100111011111101011000", 
    21 => "10111110111111001100100010011001", 
    22 => "10111111000000110011011110111011", 
    23 => "10111110011011000000111010101000", 
    24 => "00111110011011001001011001000100", 
    25 => "00111101000000001010100011001110", 
    26 => "00111110100110100001011110101000", 
    27 => "00111110100000010010000110010111", 
    28 => "00111110011100101101111110011000", 
    29 => "00111101111001101110100001001001", 
    30 => "10111111001011111011000010010101", 
    31 => "10111110111001000000110010010101", 
    32 => "10111110101001110001111011001011", 
    33 => "00111110001001110100111000001001", 
    34 => "00111101100001101101011000010110", 
    35 => "00111110100011111001111101100101", 
    36 => "00111110100011001111100100011010", 
    37 => "00111110011100110011101010100001", 
    38 => "00111110111101000110000001000101", 
    39 => "00111110101100000100111101101000", 
    40 => "10111111001000001100110111111011", 
    41 => "10111110011010111010011111101000", 
    42 => "00111110010111110111110011110010", 
    43 => "00111110100100000000110100110011", 
    44 => "10111110101011111110100101111011", 
    45 => "00111110010100111111101101010001", 
    46 => "00111101011110100011101010101011", 
    47 => "00111110000101111010100000111010", 
    48 => "00111110010011001111010101101110", 
    49 => "10111110001110111110100110001011", 
    50 => "10111110110011011101010001101001", 
    51 => "10111110000010111010001001100100", 
    52 => "10111110011110010001101111010001", 
    53 => "00111110000000110011101010011010", 
    54 => "00111110101101100101011000000110", 
    55 => "00111110101011010111100000000101", 
    56 => "10111101010100100100001001110100", 
    57 => "10111110110111100111100010010000", 
    58 => "10111110011101000101001110010010", 
    59 => "10111111000000111011101000010011", 
    60 => "00111100101111111011111110100011", 
    61 => "10111110110011101011111100100111", 
    62 => "10111110101001100010100100011110", 
    63 => "10111110100000000101001001111111", 
    64 => "00111110010100111100000101010000", 
    65 => "00111100110101001101001010101111", 
    66 => "10111110111001000111101100011001", 
    67 => "10111111000010001010110100111010", 
    68 => "10111110100011000001001111111011", 
    69 => "10111110100101000110101100101101", 
    70 => "00111101110100010000011101111111", 
    71 => "10111110100001111001000000010000", 
    72 => "10111110001000000101000111010111", 
    73 => "10111110100011001110000011010011", 
    74 => "00111100111001010000011001000000", 
    75 => "10111110010110110100011100010000", 
    76 => "10111111001101111111000100111010", 
    77 => "10111111000001011111111100111000", 
    78 => "10111111000101110010001111001000", 
    79 => "10111110100011110011100010011010", 
    80 => "00111110000011100000001010111010", 
    81 => "00111101100010101011100101101010", 
    82 => "00111110011010000010010001100111", 
    83 => "00111110001000001110011010011100", 
    84 => "00111110101011000011101101000000", 
    85 => "10111101000101100111011000000111", 
    86 => "10111110111010001110110000111000", 
    87 => "10111110101101111001111000110111", 
    88 => "10111110010010110101111111010100", 
    89 => "10111110100111001100001100100001", 
    90 => "00111110100011011011011011011101", 
    91 => "00111110111011001101000100000000", 
    92 => "00111110010000010101101101010000", 
    93 => "00111110001101010011010100110101", 
    94 => "00111110100000011110011110001010", 
    95 => "00111110110110101000011100000100", 
    96 => "00111110101101000011111011111100", 
    97 => "00111110110110010010100110011001", 
    98 => "00111110100110011001000001110100", 
    99 => "10111110100000011011010110010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_22 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_22 is
    component nn_inference_hwmm_layer1_layer1_weights_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_22_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


