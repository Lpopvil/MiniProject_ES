-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_7_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_7_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100110001111101001010100", 
    1 => "00111101100110001110111111011001", 
    2 => "00111110100100000001101101100100", 
    3 => "00111101011100011111111100110100", 
    4 => "00111110010111001101001000110100", 
    5 => "00111101111110001001101100100001", 
    6 => "00111101000011111110001101100001", 
    7 => "10111100010100110010010100001010", 
    8 => "00111110011001011010011010110010", 
    9 => "00111111001000011001001100101101", 
    10 => "10111100001011010101011001111001", 
    11 => "10111101110101001111001101001010", 
    12 => "10111110010100110110011111101111", 
    13 => "00111110010101011000100011100001", 
    14 => "00111101010011110011110001100101", 
    15 => "00111110011001001010100000001011", 
    16 => "00111110010011101001101111101010", 
    17 => "00111101111110010001101000110000", 
    18 => "00111110110001001101011010110110", 
    19 => "00111110111100110010111000010011", 
    20 => "00111101001110010111010111010010", 
    21 => "00111101111110000100100001011001", 
    22 => "00111001101001011110100110010010", 
    23 => "00111101011010110001101110100010", 
    24 => "10111101011101101010100010000111", 
    25 => "00111010101110011000101011010001", 
    26 => "00111110000000001011001011111000", 
    27 => "00111110100110110011100111011010", 
    28 => "00111110100100111100001001001100", 
    29 => "00111110111001101111011011101001", 
    30 => "00111110100011110000100000010011", 
    31 => "00111110000110000111010101111100", 
    32 => "00111110000110000111110011100011", 
    33 => "00111110100011110000010111100010", 
    34 => "00111110000101100100101110110001", 
    35 => "00111110101001000000111000100101", 
    36 => "10111101111010110001100110011001", 
    37 => "00111101111100000001001010101110", 
    38 => "00111110100010010110100001111101", 
    39 => "00111111001111001100000011111100", 
    40 => "00111110001011110001010111010110", 
    41 => "10111101111101110001010010010100", 
    42 => "10111110100011010111000010110100", 
    43 => "10111110001110011001100010101111", 
    44 => "00111110010100100111011011111010", 
    45 => "00111110111101110111110111010011", 
    46 => "10111110001001001010011100000000", 
    47 => "00111101001010010111111100110011", 
    48 => "10111110000011100110010110000011", 
    49 => "00111111011011001001101010011111", 
    50 => "00111110001100001000110111101101", 
    51 => "10111110110001000101110000011010", 
    52 => "10111101010111110010000111111011", 
    53 => "10111110100100011000011011100010", 
    54 => "00111110110010110000111101101100", 
    55 => "00111110110011100101000010101100", 
    56 => "10111110111101110101011010111110", 
    57 => "10111110111001011011101010100100", 
    58 => "10111111000000101011101101100010", 
    59 => "00111110100000100101100110010101", 
    60 => "00111110111010100101100111110111", 
    61 => "10111110011111000101011101011110", 
    62 => "00111100101100001100111000100110", 
    63 => "10111101101111011101011111010000", 
    64 => "00111110100010010110110110001000", 
    65 => "00111101111011110010000101001010", 
    66 => "10111101011000000110100110001100", 
    67 => "10111100110100100011001101101001", 
    68 => "10111011100101100100000101011111", 
    69 => "00111110110010011010011001110000", 
    70 => "00111110111101001101110001110111", 
    71 => "10111101100100001001001101010011", 
    72 => "00111110000110000100011100000101", 
    73 => "00111110011110010111110010101011", 
    74 => "00111110100111000011110100001011", 
    75 => "00111110000010011111110011001000", 
    76 => "10111100100011011011101011101100", 
    77 => "00111101100001110100110010000000", 
    78 => "00111110111100100100110111000001", 
    79 => "00111110010000110111011000010101", 
    80 => "00111101110000100101110011001010", 
    81 => "00111101110100100010111100100011", 
    82 => "00111101100000010111110101101110", 
    83 => "00111110001101011111010001010110", 
    84 => "00111110011110010010001011000100", 
    85 => "00111101100110101010000010001000", 
    86 => "00111110101111100001001011010111", 
    87 => "00111110001000001010101101001011", 
    88 => "00111110010101010100010100100000", 
    89 => "00111110000100100100100001101000", 
    90 => "10111110110101100111110011111101", 
    91 => "10111111010010000010111101100111", 
    92 => "10111111000101011001111010101000", 
    93 => "10111110010111000100010111000101", 
    94 => "10111110100101001001011101101101", 
    95 => "10111110011010000001000000110110", 
    96 => "10111110100001000011111001000000", 
    97 => "10111101101010101001110110011001", 
    98 => "00111110011110000110100101000011", 
    99 => "10111110011000001000101111111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_7 is
    component nn_inference_hwmm_layer1_layer1_weights_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_7_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


