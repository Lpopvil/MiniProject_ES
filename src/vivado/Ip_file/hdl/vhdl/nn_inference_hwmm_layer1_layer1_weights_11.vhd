-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_11_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_11_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110101110000000011100011101", 
    1 => "00111110110111111101001110000101", 
    2 => "00111110000001010110110111111010", 
    3 => "10111110100001010001010001011110", 
    4 => "10111110100100000111011101100111", 
    5 => "10111101000011110100001011011000", 
    6 => "00111110101101111000001111011111", 
    7 => "00111110111101011010000100010111", 
    8 => "00111110011110000100010110010001", 
    9 => "10111110111010010001101000111010", 
    10 => "00111111000100101100010100000000", 
    11 => "00111110101111010010010001010010", 
    12 => "10111110000110011001001001101011", 
    13 => "10111110110100000010000110110000", 
    14 => "10111110110110011110110011101010", 
    15 => "10111110101101110101111010110110", 
    16 => "00111101000000100001100101010010", 
    17 => "00111110011001011000010111100010", 
    18 => "00111111000000111011000110001010", 
    19 => "10111110100000001000111111100000", 
    20 => "00111111000100000101010100011011", 
    21 => "00111101011111011101000110001011", 
    22 => "00111011011010101000010100011000", 
    23 => "00111110001111111100001101001100", 
    24 => "10111110000101010111111010110001", 
    25 => "10111110101010001000100001111010", 
    26 => "00111110101111110111000001001011", 
    27 => "00111110101101101100110100100010", 
    28 => "00111110000001010110101100100110", 
    29 => "10111111000000000111011110011101", 
    30 => "00111101111010011101001011101100", 
    31 => "10111100000101000100111000101011", 
    32 => "00111101111010010111011000111101", 
    33 => "00111110010010000010110101111010", 
    34 => "10111110100011010010101000110101", 
    35 => "00111110100111001111010001101000", 
    36 => "00111110101101010111011000110001", 
    37 => "00111110001011000011001111110100", 
    38 => "10111110100111110111111110000101", 
    39 => "10111111010010101101101000000010", 
    40 => "00111111000110100111001101001001", 
    41 => "00111100101110101100000000101010", 
    42 => "00111101010011110110101111101011", 
    43 => "10111101101101101011010010101100", 
    44 => "10111110111100000000110101001010", 
    45 => "00111110101111010111011010100110", 
    46 => "00111110010111100111010010111011", 
    47 => "00111101001111000011010011010110", 
    48 => "10111101101000101101100010111101", 
    49 => "10111110100010111010000001001111", 
    50 => "00111110100101001111010010100111", 
    51 => "00111110101010000110101100100010", 
    52 => "00111110110101010010101011110110", 
    53 => "00111100101111001110010010010100", 
    54 => "10111110100101010011001011101101", 
    55 => "00111100100011101100111001101000", 
    56 => "00111101101000110011111110000010", 
    57 => "00111110010110110001001000110101", 
    58 => "00111110110110001011000111111011", 
    59 => "10111110110011101100010110011111", 
    60 => "00111110101011100111101011011000", 
    61 => "00111101100111011001010011101001", 
    62 => "00111101100101001100011100110010", 
    63 => "10111101111000010110001000010101", 
    64 => "00111110010011101111001001101111", 
    65 => "00111110000100010001101101011110", 
    66 => "00111110000111100111000111110110", 
    67 => "00111110100000000100111100010010", 
    68 => "10111110100000001110110001111110", 
    69 => "00111110000001100110111000110001", 
    70 => "00111110110111001110101110011001", 
    71 => "00111101010010001011100101101010", 
    72 => "10111110100101101101110001101110", 
    73 => "00111110001011011000000101110110", 
    74 => "00111110000010001100110010101101", 
    75 => "10111110101100001110110001110101", 
    76 => "10111110001111010000001110100111", 
    77 => "10111110011111010101000001000100", 
    78 => "10111110101000010000001000011100", 
    79 => "00111110100110100000011111101110", 
    80 => "00111110101000111011110011100010", 
    81 => "00111110010010000110100111101010", 
    82 => "00111110110100101010111100111001", 
    83 => "00111110010110101010000000110100", 
    84 => "10111110101000110101100010000100", 
    85 => "10111110000010010010111000010001", 
    86 => "10111110011001001110101110001011", 
    87 => "10111110100101000111001100001101", 
    88 => "10111110001001000001000011100100", 
    89 => "00111110100010010110111100010010", 
    90 => "00111111000101110001011100010010", 
    91 => "00111110110111011010110000101010", 
    92 => "00111110100101000110001011001111", 
    93 => "00111110001110011110001100111100", 
    94 => "10111110001100000110110111101111", 
    95 => "00111110001011110011000101000010", 
    96 => "00111110011100010011000111011000", 
    97 => "10111100110011001011100000001101", 
    98 => "10111100100100101000110101111000", 
    99 => "00111100010101001001101110111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_11 is
    component nn_inference_hwmm_layer1_layer1_weights_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_11_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


