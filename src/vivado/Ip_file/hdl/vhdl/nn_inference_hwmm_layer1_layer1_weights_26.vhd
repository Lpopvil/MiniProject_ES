-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_26_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111000000001010111111000010", 
    1 => "00111111010000111101110010001011", 
    2 => "10111100101000111001101011000111", 
    3 => "10111011111101000100010111001011", 
    4 => "10111110110000011000111111011110", 
    5 => "10111110000001110001111101100100", 
    6 => "00111111011011001010101111110101", 
    7 => "00111111001110000111011101111001", 
    8 => "00111111001000100010011001110110", 
    9 => "10111110101100000110010100000001", 
    10 => "00111111000101101010110010001100", 
    11 => "00111110101110010100010101010010", 
    12 => "00111110000000101111010001101000", 
    13 => "00111110110011101010111001001111", 
    14 => "00111110000111000000101101011100", 
    15 => "10111101100011101011011100111101", 
    16 => "00111110111011001100000010011000", 
    17 => "00111110000111001110010110010100", 
    18 => "00111110101010111010011111100101", 
    19 => "10111110001111101100011011100011", 
    20 => "00111111010010001101111110100001", 
    21 => "00111110110010110100111110101010", 
    22 => "00111111000000100010010001101101", 
    23 => "00111110100000000011111111111010", 
    24 => "10111110111011011010111110100100", 
    25 => "10111111000101001101111011010110", 
    26 => "00111110100011001111100011000000", 
    27 => "00111110011100000000110100111011", 
    28 => "00111110010101010110111101100101", 
    29 => "10111110101101100100110001100001", 
    30 => "00111110110011110001101011010111", 
    31 => "00111110101111010111101000011110", 
    32 => "00111110001010000100011111100101", 
    33 => "00111110101110111010111001100101", 
    34 => "10111110101110111111110100110101", 
    35 => "10111110001001110010111110110000", 
    36 => "00111110100011100110011010000001", 
    37 => "10111101101111001110001001110001", 
    38 => "00111011110100001001000000010110", 
    39 => "10111100100010001001101000011111", 
    40 => "00111111000110010110011111111000", 
    41 => "00111110000001001100101111010100", 
    42 => "10111100100001100011100111110101", 
    43 => "00111110101111011010011100110110", 
    44 => "10111101100101111011100111101011", 
    45 => "00111101011010000101010011101010", 
    46 => "00111100100110110111001100100010", 
    47 => "10111101011101100011001110010000", 
    48 => "10111110011000101011001010101110", 
    49 => "10111101001010011101110110010011", 
    50 => "00111110101000001110100111111011", 
    51 => "00111101111100001011001011001000", 
    52 => "00111101010111000110101000001100", 
    53 => "10111101110011010101100001001100", 
    54 => "10111110010000000100100010111011", 
    55 => "00111101110011111100100010010110", 
    56 => "00111110100110111010011100000101", 
    57 => "00111110101100011010011000110110", 
    58 => "00111110000111100010000010111100", 
    59 => "10111101110001101000010010001101", 
    60 => "10111101110000000010001111111100", 
    61 => "00111110011110010110101001111000", 
    62 => "00111101100001000001011101011100", 
    63 => "10111110110001110110001011010000", 
    64 => "10111110110101000001011011010000", 
    65 => "00111110100111111101110110000001", 
    66 => "10111101110101101101000110111010", 
    67 => "10111110000010101011101110100100", 
    68 => "10111110100110011011101011111100", 
    69 => "10111110110000000111100110110011", 
    70 => "10111110101000110110101111010111", 
    71 => "10111110010110110001000011110110", 
    72 => "10111110101001111101111111101001", 
    73 => "10111111001001100110000001101000", 
    74 => "00111101001000100100011111011001", 
    75 => "00111101011000111111110010111010", 
    76 => "00111110000101001001010101111011", 
    77 => "10111110010001010101011100110111", 
    78 => "10111101001000110110110000010011", 
    79 => "10111110010110011110111100111011", 
    80 => "10111110110001111011011110010000", 
    81 => "00111100111010110010010010001101", 
    82 => "10111110111010100101000001001001", 
    83 => "10111110110101001000110110101000", 
    84 => "10111101111000011000100110001100", 
    85 => "00111110100101000101011111010000", 
    86 => "00111101011000000111000000001010", 
    87 => "10111100011010000110101011000101", 
    88 => "10111101111010111101100010000010", 
    89 => "10111100111001001011000010101011", 
    90 => "10111110100010001011110110100001", 
    91 => "10111101100011110101010111011011", 
    92 => "10111100110111001000001001110110", 
    93 => "10111110010001101100011100011111", 
    94 => "10111110011010011110010110111101", 
    95 => "10111110010011000101001011100101", 
    96 => "10111100101011011110000111001101", 
    97 => "10111111000001011101000101000010", 
    98 => "10111110100110000101100100001100", 
    99 => "10111110110010110010111101101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_26 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_26 is
    component nn_inference_hwmm_layer1_layer1_weights_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_26_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


