-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_14_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_14_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101001100110000111101001", 
    1 => "00111101111001011100000110111111", 
    2 => "10111110100001010000010110110110", 
    3 => "10111111001110101111100100101101", 
    4 => "10111111000101101101000101001000", 
    5 => "10111110101010011001001100001001", 
    6 => "10111110111010000001110101010010", 
    7 => "10111110100101110100110001011111", 
    8 => "10111110001001101000101011100101", 
    9 => "10111101100001011101111110010001", 
    10 => "00111110001000111010110111001110", 
    11 => "00111110100101101011110000001001", 
    12 => "10111101111000001011111100101001", 
    13 => "10111110010110011111110011000001", 
    14 => "00111101100111000011001110100010", 
    15 => "00111110000000111101001010001001", 
    16 => "10111110000000011001001101110100", 
    17 => "10111110101001000001100100101011", 
    18 => "10111111000101101101100101011000", 
    19 => "10111100100000011111001000111011", 
    20 => "00111110101100001110000111010000", 
    21 => "00111101111001100111010001010111", 
    22 => "00111110010110000011100010011000", 
    23 => "00111111000001010101000000101011", 
    24 => "00111110111000111100101110101111", 
    25 => "00111110100111000010010001100010", 
    26 => "00111110100011010011011001101001", 
    27 => "00111101000010011011111011101000", 
    28 => "10111110001010110100011111001000", 
    29 => "10111101100111101011101001000101", 
    30 => "00111110110100001010111100000111", 
    31 => "00111101011011101101010001101001", 
    32 => "10111101000100000011001010001100", 
    33 => "00111101111111101101010101000111", 
    34 => "00111110110100101111101110111001", 
    35 => "00111110011110011011111000000011", 
    36 => "00111110101101001110100011010110", 
    37 => "00111110111001000110111101010111", 
    38 => "00111110001001001111011110100111", 
    39 => "00111101111010110001000101010001", 
    40 => "00111110111111100001010111101001", 
    41 => "00111110000001100100001100001011", 
    42 => "00111110010111011101100100110001", 
    43 => "00111101100111011101111001110010", 
    44 => "00111011000001010100101100000011", 
    45 => "00111110111101000001111110100111", 
    46 => "00111110100001100000001011001011", 
    47 => "10111101101001101001100001011000", 
    48 => "10111110000010111101110101011101", 
    49 => "00111101111001101011010011101100", 
    50 => "00111110100111100001101001100001", 
    51 => "10111110010000100101010110101111", 
    52 => "10111101111100000010110011111111", 
    53 => "10111101101111010110001001100101", 
    54 => "10111110100000011111100111001110", 
    55 => "00111110001100000001000100101100", 
    56 => "00111110011000100111010010110011", 
    57 => "10111110001101110011011010011001", 
    58 => "10111110101001110111110001011010", 
    59 => "10111110110101010100001111000101", 
    60 => "00111110010011110000011100011001", 
    61 => "00111101011100010100100101001110", 
    62 => "10111101001011011110001100001011", 
    63 => "00111101110001111100110010010000", 
    64 => "10111101010110001001000001010001", 
    65 => "00111101110110001011000011101101", 
    66 => "10111110100001111010101110110001", 
    67 => "00111101100011101001101101101011", 
    68 => "10111110100010011011101110101111", 
    69 => "10111110101111100001010100000000", 
    70 => "10111100011010000000011000010000", 
    71 => "10111110010000001010010101100111", 
    72 => "00111101110011001010110000011110", 
    73 => "10111110100100101100001110011101", 
    74 => "10111110001101111001011100100100", 
    75 => "10111110100010010100100101101101", 
    76 => "10111110100100100001010000010101", 
    77 => "10111110000100010000010110110101", 
    78 => "10111110000010010110010001110001", 
    79 => "10111110110011110010100101011001", 
    80 => "00111110000100011001001000110000", 
    81 => "00111101001100001101001000011001", 
    82 => "00111110001011110100110101011000", 
    83 => "00111110011111100000111101101101", 
    84 => "00111110101000011000100101001100", 
    85 => "00111110100001101010001100010110", 
    86 => "00111110001000011111101001110000", 
    87 => "10111101111000011000110001100011", 
    88 => "00111101000100110001111110000001", 
    89 => "10111110100000000110011110000001", 
    90 => "00111110110101010111110101001111", 
    91 => "00111110100111000110111000001010", 
    92 => "00111110101010100000010011011000", 
    93 => "00111101101010011110110100101100", 
    94 => "00111110101000110111011110000001", 
    95 => "00111110110101011010001001110001", 
    96 => "00111110111001101001110001110110", 
    97 => "00111111001100111010001111100100", 
    98 => "00111110100111101100100001000110", 
    99 => "10111110011000000010000010001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_14 is
    component nn_inference_hwmm_layer1_layer1_weights_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_14_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


