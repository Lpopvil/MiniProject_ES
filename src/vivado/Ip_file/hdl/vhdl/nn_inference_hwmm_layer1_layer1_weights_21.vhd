-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_21_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_21_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000110110111010001110110", 
    1 => "10111110100010101100101011110101", 
    2 => "00111110110110101110011111110111", 
    3 => "00111110100111010001010001001100", 
    4 => "00111110111110010100110100110111", 
    5 => "00111110110001001101001010100110", 
    6 => "00111110010101101001000000011111", 
    7 => "00111100111110001001101011010000", 
    8 => "10111110101011000001111000110101", 
    9 => "00111110111000111010110011010110", 
    10 => "10111101101110110110000101010010", 
    11 => "00111101001001101111110110000100", 
    12 => "00111110011010111111111100100111", 
    13 => "00111111000010011100100010000001", 
    14 => "00111110100100101101011111101000", 
    15 => "00111110001101011110110111011101", 
    16 => "00111110111110101011100110111100", 
    17 => "00111110001000001111011000110110", 
    18 => "10111110101000101010100010110001", 
    19 => "00111101101100100100101010111110", 
    20 => "00111101110101111011000011011010", 
    21 => "00111110000010110110010001001010", 
    22 => "10111110101000011011001100010001", 
    23 => "10111110001110001101110011010110", 
    24 => "10111100110110011010110010011000", 
    25 => "10111101000001100100101100000011", 
    26 => "10111110100101110001100000000011", 
    27 => "10111110100111000001011100111110", 
    28 => "10111110100111110010110010110111", 
    29 => "00111110101001001001001101101111", 
    30 => "00111111001111101010010101111001", 
    31 => "00111101110011000100111001001010", 
    32 => "00111101100100101011011010011000", 
    33 => "10111011110010001100100101001110", 
    34 => "10111110000011101100011011000111", 
    35 => "00111101101100101100000101010011", 
    36 => "10111110010100101100011101011101", 
    37 => "10111110011010100001010011011100", 
    38 => "10111110010001101011101001100101", 
    39 => "00111110011100100010000100000000", 
    40 => "00111110111010000110011000011101", 
    41 => "10111101010010100101010111000110", 
    42 => "10111110011000010001001011000011", 
    43 => "10111101010100111010110101110101", 
    44 => "00111101101110110110111011000100", 
    45 => "00111101111110000101111101010101", 
    46 => "10111110100110000010011010110110", 
    47 => "10111110000001111101011100100011", 
    48 => "00111110011110000110100011000111", 
    49 => "00111111000010101110100000011111", 
    50 => "00111110101110111010001011000010", 
    51 => "10111101011001111101101100111000", 
    52 => "10111110101001101101101110101010", 
    53 => "10111101111100100011101010101011", 
    54 => "00111110101001001111001101100011", 
    55 => "00111110001000000001010100010111", 
    56 => "10111110001010000111001010110011", 
    57 => "00111100111010110011010111010100", 
    58 => "00111110001001111001111001000110", 
    59 => "00111110111101101000010010011000", 
    60 => "00111110101110010010100111110000", 
    61 => "00111110111001110001111010100111", 
    62 => "10111101100110010001001100001111", 
    63 => "00111110001001100000100001001000", 
    64 => "00111110110100001110100110100100", 
    65 => "00111110001101110011101010110000", 
    66 => "00111110110011001000000111011011", 
    67 => "00111110011100100110101011101100", 
    68 => "00111101100000011100001110111011", 
    69 => "00111111001111110010101010011011", 
    70 => "00111110110110010001111100111010", 
    71 => "00111110100011000110100000101111", 
    72 => "00111110110001100111000010010000", 
    73 => "00111110100000010110000000011100", 
    74 => "00111110011111111001000010110100", 
    75 => "00111110111010000110010011101001", 
    76 => "00111110101101011011001110100110", 
    77 => "00111110100000011001110000100101", 
    78 => "00111011100010110100111111001010", 
    79 => "00111111010011001111001101101110", 
    80 => "00111101111111011011100111001000", 
    81 => "10111100111101010101000010101011", 
    82 => "10111110011111100111001000110010", 
    83 => "10111110100010000000101111011011", 
    84 => "10111110110000001111110011010110", 
    85 => "10111110110010100010110000000000", 
    86 => "10111110111000100100001110010001", 
    87 => "10111110100001011001000011000010", 
    88 => "00111011001000011010101101110111", 
    89 => "00111111000011110110011010101010", 
    90 => "10111110100010111100100000110101", 
    91 => "10111111000000011000101010110011", 
    92 => "10111110101110000100101111101101", 
    93 => "10111110101110111001000100001111", 
    94 => "10111101100110100001101010100001", 
    95 => "10111101011000011101101010000110", 
    96 => "00111110001010100000011110011111", 
    97 => "10111101111010100000100110111011", 
    98 => "10111110110001110110111110001000", 
    99 => "00111110100100010000011110010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_21 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_21 is
    component nn_inference_hwmm_layer1_layer1_weights_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_21_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


