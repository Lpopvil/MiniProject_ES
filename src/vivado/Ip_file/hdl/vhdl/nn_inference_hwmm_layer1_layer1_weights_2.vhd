-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011101111100010011000011", 
    1 => "10111110111010000000011101011100", 
    2 => "00111100011011000101000010101111", 
    3 => "00111110000000101000100111010000", 
    4 => "00111101010101101010111000110111", 
    5 => "00111110000101101111101000110001", 
    6 => "00111110110011000111010000111111", 
    7 => "00111111000101110000010010011111", 
    8 => "00111111001110011010011111100010", 
    9 => "00111111010111110001101011011100", 
    10 => "10111111000110100110110001001001", 
    11 => "10111111000110010001101100110000", 
    12 => "10111110000101100101010100110111", 
    13 => "00111110000011110001110011101011", 
    14 => "00111101010111110110000100000100", 
    15 => "00111101101001111001110000011100", 
    16 => "00111110101100110011000111111111", 
    17 => "00111110110110101010110001110100", 
    18 => "00111111001001010010111000010101", 
    19 => "00111111000111011101001000100010", 
    20 => "10111110011101110111011000001101", 
    21 => "10111111000111001001010110011010", 
    22 => "10111110001000000100011010110100", 
    23 => "00111110101011001001100101101010", 
    24 => "00111110100000101101001110010010", 
    25 => "00111110101100101111000101010101", 
    26 => "00111110111111101000001000100010", 
    27 => "00111110111011110000010100111110", 
    28 => "00111110101001110011100000110111", 
    29 => "00111111011000111110110000001000", 
    30 => "10111111011001000000110111000011", 
    31 => "10111111000101100110011100100000", 
    32 => "10111101101111111011101011000100", 
    33 => "00111110001011111000010111100100", 
    34 => "00111110011101100110010110111110", 
    35 => "10111111000001001000111100100000", 
    36 => "10111111010010110100111010111011", 
    37 => "10111111010110011010011000100000", 
    38 => "10111111001100001101100001001101", 
    39 => "00111110110001100001111100011000", 
    40 => "10111111010101010000100010100100", 
    41 => "00111101100001001100100111011001", 
    42 => "00111110011011100111000011110011", 
    43 => "00111100100001111110011101011001", 
    44 => "10111110100100000100100000000010", 
    45 => "10111110001101011011111010111011", 
    46 => "00111100111111111110000010110111", 
    47 => "10111110011101110011101011001101", 
    48 => "10111111001111100101010001010101", 
    49 => "10111110110000000010001001111000", 
    50 => "10111110101101010111001001110011", 
    51 => "10111110100011010111101100100111", 
    52 => "10111110001100000100101101110000", 
    53 => "10111100010110010110011110101010", 
    54 => "10111101101101101111100101001010", 
    55 => "10111110001010110100110010001111", 
    56 => "10111101011001110101011000011111", 
    57 => "00111110001000000000111101010000", 
    58 => "00111101101000010101101010101000", 
    59 => "10111101110011010100001000101000", 
    60 => "00111111000111011010101000101001", 
    61 => "00111101111100001110110010000101", 
    62 => "10111111000101011010111111101110", 
    63 => "10111110101010010000001101110110", 
    64 => "10111111001010100001111001110001", 
    65 => "10111101100000110000011101111010", 
    66 => "00111101110101111101010010000110", 
    67 => "00111110001110001110110010000101", 
    68 => "00111101101101010100011101101100", 
    69 => "10111101001111101001011110110111", 
    70 => "00111111001100000100100101000111", 
    71 => "00111110110001101010110101010111", 
    72 => "00111101101110011010000110000000", 
    73 => "10111100111011010101010011111010", 
    74 => "00111110010110001101110011010110", 
    75 => "00111110100010111110000010010101", 
    76 => "00111101001111011001001111001010", 
    77 => "00111110001010010111110110001101", 
    78 => "00111110110000001011011100000000", 
    79 => "00111110000111001001011010100101", 
    80 => "00111111010110111001110000100101", 
    81 => "00111111000000010000010100010011", 
    82 => "00111101101011011101100100010100", 
    83 => "00111110100110010010110000100000", 
    84 => "00111101111101011001101000110101", 
    85 => "00111110001000100010100010011010", 
    86 => "10111101101001100111001011111001", 
    87 => "00111110010001011001001001000101", 
    88 => "00111101111110101110000101010011", 
    89 => "10111101111011110010100111110111", 
    90 => "00111111000001110010101001100101", 
    91 => "00111110010110110001011010011000", 
    92 => "00111110001011110111011100000101", 
    93 => "00111111001001001010101010011101", 
    94 => "00111111010001000010111000010101", 
    95 => "00111111000100111000011000110101", 
    96 => "00111110110001010110111001001110", 
    97 => "00111110111011101111110011110000", 
    98 => "00111111000100111101000010011101", 
    99 => "10111110001110101111011001111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_2 is
    component nn_inference_hwmm_layer1_layer1_weights_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_2_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


