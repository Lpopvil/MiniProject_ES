-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_29_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_29_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110111011000110110001010110", 
    1 => "10111110110100010110001000101010", 
    2 => "10111110101001001111110101010001", 
    3 => "10111101010110011010110001100001", 
    4 => "10111110101100100110001010001011", 
    5 => "10111111000111101101101000000001", 
    6 => "10111101100100010011000010011011", 
    7 => "00111111000100011101001101111010", 
    8 => "00111110111110001111110111010001", 
    9 => "00111110100110000000011011010010", 
    10 => "10111111000001100100001011011010", 
    11 => "10111111001000100101000000010111", 
    12 => "10111110100010100111111011100111", 
    13 => "10111110100111010101001010100111", 
    14 => "10111110010101110011010011101111", 
    15 => "10111101111100001011100001100001", 
    16 => "00111011101110100011000110100110", 
    17 => "00111110010101011000011001011110", 
    18 => "00111110101010111110001111111010", 
    19 => "00111110110011001110000111100110", 
    20 => "10111111000011100010110011100101", 
    21 => "10111111000001111111011010010001", 
    22 => "10111101111111011001010000111111", 
    23 => "00111101110000110100010100110100", 
    24 => "00111110010001110111110010101110", 
    25 => "00111110101111110011011101001011", 
    26 => "00111110100011100011001100010110", 
    27 => "00111110011110101000001110011111", 
    28 => "00111110110101011111111101111000", 
    29 => "00111111000000000011110100110100", 
    30 => "10111111100000100111010001011001", 
    31 => "10111110111011001111101001010000", 
    32 => "10111011100111000000000011010011", 
    33 => "00111011100110001000000101011101", 
    34 => "10111101010010100111111110101000", 
    35 => "10111110001010100011010100000111", 
    36 => "00111110010010000001000000100110", 
    37 => "00111110100100100000110001111110", 
    38 => "00111110010101110100010100011101", 
    39 => "00111111000100011111001100001011", 
    40 => "10111111001101101100100110000001", 
    41 => "10111101111111110100111001010000", 
    42 => "00111110110000111011101101110011", 
    43 => "00111110000110100000111011100011", 
    44 => "00111110100011000001100111111011", 
    45 => "00111101001100011000000011111001", 
    46 => "00111101000001001111100010110000", 
    47 => "00111101110001101001110001101000", 
    48 => "10111110000100001011111000001000", 
    49 => "00111101011001111111010101100011", 
    50 => "10111110110111110011010011001010", 
    51 => "00111110010001101110111011000010", 
    52 => "00111110011111110000011011011011", 
    53 => "00111110001010110001000000110100", 
    54 => "00111110110010110110111010011100", 
    55 => "10111100000011101001000011010101", 
    56 => "00111110001011110101100011010001", 
    57 => "10111110101111110101110100001111", 
    58 => "10111110101001111001011001111100", 
    59 => "10111110110010110110111011101110", 
    60 => "00111110101011110111100010001001", 
    61 => "10111110001111000000011010000010", 
    62 => "00111101010011001111110010001010", 
    63 => "00111110111001000001011010101111", 
    64 => "10111110101110101000101110001010", 
    65 => "00111110010011100100010100001111", 
    66 => "00111110100100010010111010001110", 
    67 => "10111110011000000011111111001100", 
    68 => "10111110010101110000110000011111", 
    69 => "10111111000000101011010111010100", 
    70 => "00111110100111011011110010110100", 
    71 => "10111101111100010001101001100100", 
    72 => "00111110001101011000101100011100", 
    73 => "10111101110010000111101100011001", 
    74 => "10111110100001100111010100010101", 
    75 => "00111101011111000011100010000010", 
    76 => "00111101011100001000110100011101", 
    77 => "00111110000100000101010010011100", 
    78 => "00111101010110100100101111100000", 
    79 => "10111111000110110101101110011010", 
    80 => "00111110110101111011001110101000", 
    81 => "10111110100011001001010110000001", 
    82 => "10111101101110110111111011100010", 
    83 => "00111110101001011111100100100110", 
    84 => "00111110100100100100111000100011", 
    85 => "00111110001010011011011111000110", 
    86 => "00111110001101111001100100001110", 
    87 => "00111110000011011011011100111011", 
    88 => "00111111001000011001110111010000", 
    89 => "10111110110101010010010010111010", 
    90 => "10111101001000011110000100001101", 
    91 => "00111110101010011000001101111011", 
    92 => "00111101000101010001100101001010", 
    93 => "00111110101011110101100111111000", 
    94 => "00111110101101011101111100011100", 
    95 => "00111110010101100000001100111001", 
    96 => "10111011111100111111000011111100", 
    97 => "00111110100001001110011011100010", 
    98 => "00111110110001111001100011110001", 
    99 => "00111101001000001111011000011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_29 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_29 is
    component nn_inference_hwmm_layer1_layer1_weights_29_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_29_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_29_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


