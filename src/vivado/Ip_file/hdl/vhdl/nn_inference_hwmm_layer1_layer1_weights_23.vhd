-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_23_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001010011101011100101010", 
    1 => "00111100100111010001110110010111", 
    2 => "00111110011011110111100000101110", 
    3 => "00111110111001011001101011110001", 
    4 => "00111101100110000101101110010101", 
    5 => "00111101100000011010110011111011", 
    6 => "00111110100110100000111000100111", 
    7 => "00111101001001101100010101011011", 
    8 => "00111110011100010110010111101111", 
    9 => "00111111000111101100000110001001", 
    10 => "00111100100010101111100011001110", 
    11 => "00111110010100011001100101011011", 
    12 => "00111110101111101100101010110100", 
    13 => "00111110000011011010010101111101", 
    14 => "00111110011000111101101000000011", 
    15 => "00111110100011001110101110011011", 
    16 => "00111111000000100011101101101000", 
    17 => "00111101111111100001100101011001", 
    18 => "10111100011011100011000101000000", 
    19 => "00111110110001101111011111101100", 
    20 => "00111101001011101001110000000101", 
    21 => "00111111000001001011001000001000", 
    22 => "00111100000101100101010111100000", 
    23 => "00111110000110101011011000111111", 
    24 => "10111011111000100000101100100011", 
    25 => "00111110011000011101101101110010", 
    26 => "00111101100001011110101111011010", 
    27 => "00111110011001010100010011011111", 
    28 => "00111110000000001111101110110011", 
    29 => "00111110101111011001100011110101", 
    30 => "00111110001100111010110101100001", 
    31 => "00111101010101000100100010111010", 
    32 => "00111011000110000001111111010001", 
    33 => "00111100001010011011011100000010", 
    34 => "10111101010111011100010111100100", 
    35 => "10111101010101101100001101111110", 
    36 => "10111110001001101001111101000100", 
    37 => "00111110011101101101101001011101", 
    38 => "00111110100100001011111000111011", 
    39 => "00111110111011001111000110110100", 
    40 => "10111011001100110101111000110101", 
    41 => "10111101101111001110011000100011", 
    42 => "10111101100010101000101100110101", 
    43 => "10111110101000001101010111000100", 
    44 => "00111110101001011101011111010111", 
    45 => "00111110101100011010111011010011", 
    46 => "00111100010011000111101111010001", 
    47 => "10111101110000111010110100001111", 
    48 => "10111110000010010110011000111111", 
    49 => "00111110110101001101000111100110", 
    50 => "00111110001100110100110111011111", 
    51 => "10111110110000010011010001100101", 
    52 => "10111110100011010111011111111001", 
    53 => "10111110010000100100010001100001", 
    54 => "00111110111111010111011100110000", 
    55 => "00111111000001000110011011001110", 
    56 => "10111110100010101000000000000111", 
    57 => "10111110001000111110110010000110", 
    58 => "10111110001000011000100110111011", 
    59 => "00111110111001010101010101101111", 
    60 => "00111110001000100000100010010001", 
    61 => "00111110100010000111000101111001", 
    62 => "00111110100100100000110011011000", 
    63 => "00111101100000101111111010011001", 
    64 => "00111101100111100010110101001011", 
    65 => "00111110100001011100010101000111", 
    66 => "00111101101101001000011110101010", 
    67 => "00111110001010101101011001110011", 
    68 => "00111110101010011000101001100100", 
    69 => "10111101010011011001000000000100", 
    70 => "00111110101000101111011001001001", 
    71 => "00111110100000101011000101110000", 
    72 => "00111101010101101011010000011001", 
    73 => "00111110000000111001010111011110", 
    74 => "00111110100100100111001010000110", 
    75 => "00111110101001101100101001011011", 
    76 => "00111110101001101101110111011010", 
    77 => "00111110100100001001001100100101", 
    78 => "00111110110010101111010101111101", 
    79 => "00111101001100011001011111110100", 
    80 => "00111110101001011101000111000010", 
    81 => "00111010110010110111101110011010", 
    82 => "00111101110010110111010101000001", 
    83 => "00111100111010000011010000001001", 
    84 => "00111110100000001110010001011111", 
    85 => "00111110100011010111100000100011", 
    86 => "00111110011100100011100101101001", 
    87 => "00111110000111000101011000101011", 
    88 => "10111101101101011110110111011011", 
    89 => "10111110000100100111010001110001", 
    90 => "10111110100101100111000111100001", 
    91 => "10111110110100000001000100110001", 
    92 => "10111110000101001101011001100100", 
    93 => "10111110001110111101010000111111", 
    94 => "10111101110001011111001111110101", 
    95 => "10111110010011100001111110110001", 
    96 => "10111101100000111011010100111000", 
    97 => "10111111000010011001011110000001", 
    98 => "10111110000011110101110100110011", 
    99 => "10111110001010011110111110011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_23 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_23 is
    component nn_inference_hwmm_layer1_layer1_weights_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_23_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


