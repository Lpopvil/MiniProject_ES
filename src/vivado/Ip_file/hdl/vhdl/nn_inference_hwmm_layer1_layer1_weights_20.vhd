-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_20_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_20_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110100011011010001001011001", 
    1 => "00111110110111001001010000101100", 
    2 => "00111110100001110000101000100110", 
    3 => "00111110111001011001000000110001", 
    4 => "00111110110001111011001000101010", 
    5 => "00111110101010000101110010100010", 
    6 => "00111110111010101010110000101100", 
    7 => "00111111000100010111000101000111", 
    8 => "00111110111110111111110110100110", 
    9 => "00111101010011010000101110101011", 
    10 => "00111110001000111000110101001101", 
    11 => "00111110011010001010010110011110", 
    12 => "00111110000010011111100000100101", 
    13 => "00111101111100010101100110100011", 
    14 => "10111110000111010100101111010111", 
    15 => "00111101101100000010011110000111", 
    16 => "10111100110100001010001101010010", 
    17 => "00111110000000010100011001100000", 
    18 => "00111110101100110001100100110001", 
    19 => "00111110011100010101100111101010", 
    20 => "00111110110100011000011101100111", 
    21 => "00111110101111000100100011011010", 
    22 => "10111101100110111101010000010011", 
    23 => "00111101010100011001100100001101", 
    24 => "00111110000010100010000000111000", 
    25 => "10111110110101010010000001101111", 
    26 => "10111110111001101011001011100011", 
    27 => "00111101111010000100110001011110", 
    28 => "00111111001001001110101010110011", 
    29 => "00111101101011011000001001111000", 
    30 => "10111110100000000110011010000011", 
    31 => "00111101110110100000110111101110", 
    32 => "10111110100001110010010111000010", 
    33 => "10111011110110001100100000010100", 
    34 => "10111110001010100110001000011001", 
    35 => "10111110100000000000101011110110", 
    36 => "10111110000100000111010100111011", 
    37 => "00111101111010101101011001011011", 
    38 => "10111101111101011011001111000100", 
    39 => "10111111001100101111101100100101", 
    40 => "10111110000111011001011101001111", 
    41 => "10111110110011100010000100001100", 
    42 => "10111101000100100000010000111110", 
    43 => "00111110000110111101110111111101", 
    44 => "00111101010000011000011000111010", 
    45 => "00111100110001101100001110110000", 
    46 => "10111011100100101010001110100100", 
    47 => "10111101000001100111001110010101", 
    48 => "10111101011001101101111001001100", 
    49 => "10111110101011111111100101100101", 
    50 => "10111101110011101100001110110101", 
    51 => "00111100010110001110111110000100", 
    52 => "00111110011110011101100110010001", 
    53 => "00111110100110110100010101010100", 
    54 => "00111011101111011010111101111010", 
    55 => "00111110110100010111110010000101", 
    56 => "00111110100010111111011110001010", 
    57 => "00111110100001000011101111111010", 
    58 => "10111100111001110011100111100000", 
    59 => "00111110110100111010001111111000", 
    60 => "10111110111100110010101010000011", 
    61 => "10111111000010101011110110100100", 
    62 => "10111110000100100001100111100100", 
    63 => "00111110000001000010001011001010", 
    64 => "00111110101000010100110011010101", 
    65 => "00111110110100111100110100101000", 
    66 => "00111110100000000101000001100110", 
    67 => "10111101000010111101110001000001", 
    68 => "00111101100001100011001010101010", 
    69 => "00111110100011011111101011110110", 
    70 => "10111111001000011100001011001100", 
    71 => "10111110001010110011011111111011", 
    72 => "10111101011010111110100100011101", 
    73 => "00111110010000111110011100010101", 
    74 => "10111010000111110100101010011110", 
    75 => "00111101100100101110000000101101", 
    76 => "00111110100100001000000010001111", 
    77 => "00111110010010100011101011101010", 
    78 => "10111110000100101010011111011100", 
    79 => "10111110001010100010101100010001", 
    80 => "10111111000001111001001100101110", 
    81 => "10111110110101100100100001000100", 
    82 => "00111101001011100101011101010100", 
    83 => "00111101101110001001011010110010", 
    84 => "00111110001001010100101010001111", 
    85 => "00111101000100011110100111111111", 
    86 => "00111110001000111111001110011101", 
    87 => "00111101111000100010011111000001", 
    88 => "10111110100010110101000011111000", 
    89 => "00111110101111101001010000000110", 
    90 => "10111110000100101001011100010110", 
    91 => "10111110011001011111100011001101", 
    92 => "10111110111010100011011100001011", 
    93 => "10111110000000001010101011100001", 
    94 => "10111110111010010011110101010000", 
    95 => "10111110110010000010110000111001", 
    96 => "10111111010000011011001010011100", 
    97 => "10111111000101110010001001001000", 
    98 => "10111111001000110010110101011010", 
    99 => "10111110101100011011110110010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_20 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_20 is
    component nn_inference_hwmm_layer1_layer1_weights_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_20_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


