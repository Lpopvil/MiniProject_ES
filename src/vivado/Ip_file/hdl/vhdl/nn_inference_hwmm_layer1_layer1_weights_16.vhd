-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_16_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110110101000100001111101110", 
    1 => "00111110000011000010010011011001", 
    2 => "10111100000010000010011111101010", 
    3 => "10111100111101010101010111001001", 
    4 => "10111110100010101101111111111100", 
    5 => "00111101000110110100010111101101", 
    6 => "00111101111011011110010100001011", 
    7 => "00111110101000001011111011010100", 
    8 => "00111110110100000111110100010011", 
    9 => "00111110110110101110111100111100", 
    10 => "00111111000011111001010010010001", 
    11 => "00111110101110000010000110111110", 
    12 => "00111110101010111001010011101101", 
    13 => "10111110010100011110001101100111", 
    14 => "00111110100101011111100001111111", 
    15 => "00111110000110111011100000000101", 
    16 => "00111110001111011010000100010101", 
    17 => "00111110100010001101100001101001", 
    18 => "00111110101001011001111001011110", 
    19 => "00111101110101011011101000100000", 
    20 => "00111110110110011111100011000101", 
    21 => "10111100101111010100100110100111", 
    22 => "10111100101100010001100100110111", 
    23 => "00111110011110101101110011000011", 
    24 => "00111110110000111101011011100001", 
    25 => "10111100001011001111011001110000", 
    26 => "00111101101100000011010011011010", 
    27 => "00111101101110111101110100011000", 
    28 => "00111100001100111000101111111000", 
    29 => "00111101101000000001111100000011", 
    30 => "10111110101100110100010101011100", 
    31 => "00111110010011000100110000110100", 
    32 => "00111101100101111101000110110101", 
    33 => "00111110000110011101001011110010", 
    34 => "00111101110011010010001101010010", 
    35 => "00111101110001101101011001011010", 
    36 => "10111101110000110110100010011100", 
    37 => "10111101111100111100000000110001", 
    38 => "10111101110010111111101110100100", 
    39 => "00111101001010010110010111011011", 
    40 => "10111110100110010111101111101000", 
    41 => "00111110010110111001101101000001", 
    42 => "00111110100001010111001111101011", 
    43 => "00111110011011001010101001100001", 
    44 => "10111101100101111011000001011000", 
    45 => "00111110111000101101101011110000", 
    46 => "00111110101010001111111110101100", 
    47 => "00111101111111101110101101000001", 
    48 => "10111110111110101100101110011000", 
    49 => "10111110010110011100111110111000", 
    50 => "00111110010101001010000111101001", 
    51 => "00111100111010010001110101001111", 
    52 => "10111100101010001110001101010101", 
    53 => "10111110101100101100110010110010", 
    54 => "00111101001101110100010100000110", 
    55 => "00111111000000000001010101001010", 
    56 => "00111110011011000010010101011110", 
    57 => "00111110010101101100110010000110", 
    58 => "10111110010001000011111011101101", 
    59 => "10111111000000110001110100100111", 
    60 => "00111110111101001101100110110010", 
    61 => "00111101100101101101111110101010", 
    62 => "10111101110011101111010110110110", 
    63 => "10111111000001011000101000101101", 
    64 => "00111100110101110001010111001110", 
    65 => "00111110010000011111100010001100", 
    66 => "00111100010100010010001100011000", 
    67 => "00111110010000010001110000001000", 
    68 => "10111110000100000111111101110010", 
    69 => "10111110110000111101100001000011", 
    70 => "00111111000111101111010011010010", 
    71 => "10111101000111111111111100010101", 
    72 => "00111101100001101000010001001110", 
    73 => "10111110000110010100111000100101", 
    74 => "10111110000100000011000000110000", 
    75 => "00111101111001100011101001110010", 
    76 => "00111101111010111101110001100101", 
    77 => "10111101000100110100110010101100", 
    78 => "10111110110001100010000100001010", 
    79 => "10111110100100110111000111011011", 
    80 => "00111111001001101111010111101001", 
    81 => "00111110001000101100110010011001", 
    82 => "00111110010011101101100010101011", 
    83 => "10111100100100010010011010000111", 
    84 => "10111110101000010110111001000001", 
    85 => "00111100110010111110111011100001", 
    86 => "00111101001100110001001111100010", 
    87 => "00111110000001100101011111011111", 
    88 => "00111101001111101111011001101010", 
    89 => "10111110100101010111111000100110", 
    90 => "00111110111001110110101001011101", 
    91 => "00111111001101111100110011100001", 
    92 => "00111110111010000110000010001100", 
    93 => "00111110110101110110011010111101", 
    94 => "00111110111010000010101101011111", 
    95 => "00111110101011001110111110100001", 
    96 => "00111110000001000111010101100000", 
    97 => "00111110111110011010001000111100", 
    98 => "00111110110001010101000111101000", 
    99 => "10111110011111011010001111010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_16 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_16 is
    component nn_inference_hwmm_layer1_layer1_weights_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_16_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


