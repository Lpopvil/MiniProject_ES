-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110110001010001011111110100", 
    1 => "00111101101100101100010001101011", 
    2 => "00111110111101010010001110100000", 
    3 => "00111110110001011111101110111001", 
    4 => "00111111000010101000100110001101", 
    5 => "00111111000101101011011111101110", 
    6 => "00111101110101001001000001101110", 
    7 => "10111110001111100011011101110001", 
    8 => "10111110001101101111010000000110", 
    9 => "10111110100010110100111011011111", 
    10 => "10111101100101001010111111110111", 
    11 => "00111110011110001001011111000010", 
    12 => "00111110101010101101011010111001", 
    13 => "00111110100101111011010000001010", 
    14 => "00111110011111000101001000110011", 
    15 => "00111110101011000011111000100000", 
    16 => "00111101101001100010110100001101", 
    17 => "10111101011100100100011000000110", 
    18 => "10111110100110111111011100001111", 
    19 => "10111100001011010110010101101011", 
    20 => "00111110100110100110101000110101", 
    21 => "00111110110101011010110001111010", 
    22 => "00111100110100101001110000100100", 
    23 => "00111110100110001110001010110010", 
    24 => "00111110000111000100000001001110", 
    25 => "00111101100001101100100010011100", 
    26 => "00111100110100110001011101001001", 
    27 => "10111011001111010110010110100110", 
    28 => "10111110101010011000111000111111", 
    29 => "10111110100001111101011111011101", 
    30 => "00111111011110010101111000000110", 
    31 => "00111110100001111100110010010010", 
    32 => "00111110011001000101000111111100", 
    33 => "00111101000100001010101000111100", 
    34 => "10111101101001100001100000001010", 
    35 => "00111101110110000010000010001101", 
    36 => "00111110000000001101110011100111", 
    37 => "00111110001100111000001011001010", 
    38 => "10111110100110110110000101111111", 
    39 => "10111110111000010010010110000011", 
    40 => "00111111010100111110001000101000", 
    41 => "10111111001000111111101100110001", 
    42 => "10111111000010001100111010001000", 
    43 => "10111111000010011011101101101000", 
    44 => "10111111000100011101001000111000", 
    45 => "00111101110001100000000100001011", 
    46 => "10111110011110011110011000010111", 
    47 => "00111101011100101000110101000011", 
    48 => "00111011111100010010100110110101", 
    49 => "00111110000110111000111001001100", 
    50 => "00111111000111000011111000100010", 
    51 => "10111110101000100010111110001111", 
    52 => "10111110101000101011111100000100", 
    53 => "10111110101110001010100001111010", 
    54 => "00111110110011100010010000010100", 
    55 => "00111110110010011110001001011000", 
    56 => "10111110000101111000010101111001", 
    57 => "10111110111001001010010111000000", 
    58 => "00111100110011011111111111010100", 
    59 => "00111110100110010110010110101011", 
    60 => "10111111011001100011010000110100", 
    61 => "10111110100100100001000011110101", 
    62 => "10111110101111001001101000100100", 
    63 => "00111110111101110111110101001000", 
    64 => "00111110111100101110100101000011", 
    65 => "10111101101010101100011000011010", 
    66 => "10111110101100000001000001011010", 
    67 => "00111110000101111110011100100110", 
    68 => "00111110001111010001010110100110", 
    69 => "00111111001010110111101110001110", 
    70 => "10111111010110110110000011011100", 
    71 => "10111110010011001101101101001100", 
    72 => "00111110000001010101000111000011", 
    73 => "00111110001101110101011010100010", 
    74 => "10111101010010100101110100101101", 
    75 => "00111101010000100110011111100111", 
    76 => "00111110010100110000101010111111", 
    77 => "00111110111010000000111100110110", 
    78 => "00111100000001000100010100001100", 
    79 => "00111111000010011111110101110110", 
    80 => "10111111001110000010010011110011", 
    81 => "10111110000101111111011001011101", 
    82 => "00111110100111011100101001110010", 
    83 => "00111110000011000110010000100111", 
    84 => "00111110011001011101110001111000", 
    85 => "00111110011100001001000001111011", 
    86 => "00111110000101101111001110111000", 
    87 => "10111110100101100010011110111011", 
    88 => "10111110011010110000000001111101", 
    89 => "00111110111101001110001011110011", 
    90 => "10111110101011100101010101011110", 
    91 => "10111111001001100111010110100100", 
    92 => "10111111011011011010110000101111", 
    93 => "10111110110011110111011000011111", 
    94 => "10111110010110100100010101101011", 
    95 => "10111110100101001000111010100001", 
    96 => "10111111001010001101101000110101", 
    97 => "10111111001110010001010100011100", 
    98 => "10111111001010010011111101100101", 
    99 => "00111110001110010001010110101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_1 is
    component nn_inference_hwmm_layer1_layer1_weights_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_1_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


