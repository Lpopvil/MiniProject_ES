-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_9_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_9_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110111001110000110000011000", 
    1 => "00111101010101001101101101111010", 
    2 => "00111101100001111000100011010110", 
    3 => "10111110100011100010101010111011", 
    4 => "10111111000101111011011110101110", 
    5 => "10111111001000111110010101100011", 
    6 => "10111110110000110100011001101110", 
    7 => "10111110111001010111110100100011", 
    8 => "10111101111110001100000100101000", 
    9 => "10111111001111111000001000111001", 
    10 => "00111110101001101010001101010110", 
    11 => "00111101110111100101010101100111", 
    12 => "10111110001101000011100010011010", 
    13 => "10111110110001010100110001111010", 
    14 => "10111110010100100001001010001001", 
    15 => "10111111000100101011000110011101", 
    16 => "10111111001110011101100111111011", 
    17 => "10111111000110101000111011000110", 
    18 => "10111110111001111011010110011111", 
    19 => "10111111001100001110000010000011", 
    20 => "00111110110100000011110000101010", 
    21 => "10111110000100100111011100101101", 
    22 => "00111110110100101010100100011111", 
    23 => "00111110011100100101001100110101", 
    24 => "00111110111011000011101110110100", 
    25 => "00111110110110110000001011000011", 
    26 => "00111110010101110010001010110100", 
    27 => "10111110100000011101110011011101", 
    28 => "10111101111001100101011001110110", 
    29 => "10111111000110110101001001011010", 
    30 => "00111110100001001011010011101101", 
    31 => "00111110100011100000111011010011", 
    32 => "00111101101101001110010010110101", 
    33 => "00111110100101100001011011010110", 
    34 => "00111110110010011110010010101010", 
    35 => "00111110101111101001100101000001", 
    36 => "00111110010010101011011110110010", 
    37 => "00111101010010001000011010101001", 
    38 => "00111101011000110011101100001101", 
    39 => "10111110011010111110110100111010", 
    40 => "00111111000100010001010011111010", 
    41 => "00111110101111010011000111001111", 
    42 => "00111101100100010100110001010011", 
    43 => "00111101001110101001111100110100", 
    44 => "10111110110100101001100011111001", 
    45 => "10111101110000001001011100001111", 
    46 => "00111110100010100000011100101101", 
    47 => "00111100110101101011110011111000", 
    48 => "00111100010101001010111011110001", 
    49 => "10111110000111111101001000101101", 
    50 => "00111110111001110111111111010001", 
    51 => "10111101100000110011111010011100", 
    52 => "10111110010100001000000011001111", 
    53 => "10111110110110100010000001010111", 
    54 => "10111110111100101010111111100111", 
    55 => "10111110001011010101001111001101", 
    56 => "00111110100010000010100000010011", 
    57 => "00111110000010011001000011000101", 
    58 => "00111101001010000111110011101000", 
    59 => "10111110001110000000100101100110", 
    60 => "10111110101001000011101001100100", 
    61 => "10111111000111011100000011100111", 
    62 => "10111111001001100000101111110100", 
    63 => "00111110100011110100110111000111", 
    64 => "00111100101001100000111111111001", 
    65 => "00111100100000101111011101011011", 
    66 => "00111110100101110011111111110100", 
    67 => "10111101100110001000000100000111", 
    68 => "10111100001010110010100001101111", 
    69 => "00111110001010011110010100101000", 
    70 => "10111110111110110100010100101011", 
    71 => "10111110111011100001110111001011", 
    72 => "10111110101111101110010111100001", 
    73 => "10111101110100001000101011011010", 
    74 => "00111110100011100111010011110110", 
    75 => "00111101001001111000100100010000", 
    76 => "10111110100100110100110100100101", 
    77 => "10111110111110010111001100111001", 
    78 => "10111101111100110101001001100011", 
    79 => "10111110001111010111110001010111", 
    80 => "10111110010100100111011001110111", 
    81 => "10111101111111001000101100001111", 
    82 => "00111110100000111000111000101011", 
    83 => "00111101100001111100110111111011", 
    84 => "00111110101001110001000111101011", 
    85 => "00111110100000111101100010101000", 
    86 => "10111101101110111111110111101000", 
    87 => "10111111000100111010100110111010", 
    88 => "10111110100101010110101101010000", 
    89 => "10111110011000100000001101101100", 
    90 => "00111110000101101110111111111101", 
    91 => "00111110001100110000111100001011", 
    92 => "00111101111111110001001000100011", 
    93 => "00111110010111100110001000001110", 
    94 => "00111110100011010110101110111110", 
    95 => "00111110001111011110111000100110", 
    96 => "00111110101011111110101011011010", 
    97 => "00111110111110111101001101111011", 
    98 => "00111100100111001010011111101110", 
    99 => "10111101100110110001110100001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_9 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_9 is
    component nn_inference_hwmm_layer1_layer1_weights_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_9_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


