-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nn_inference_hwmm_layer1_layer1_weights_15_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of nn_inference_hwmm_layer1_layer1_weights_15_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110100001011001011001001001", 
    1 => "00111110100001000111111010000101", 
    2 => "10111110001001100101110100101001", 
    3 => "10111110011100101100101001100011", 
    4 => "10111110100010011111001011001001", 
    5 => "10111111000000000111101111010101", 
    6 => "10111110011001010101100110110111", 
    7 => "10111110011110000011111010101100", 
    8 => "10111101101001111101111110100000", 
    9 => "00111110101101001100010011100000", 
    10 => "00111110001001000001001101101011", 
    11 => "10111101000010010100101011111010", 
    12 => "00111110001010001101011000000000", 
    13 => "00111101000000010010001110011000", 
    14 => "10111101010100111000000001101010", 
    15 => "00111100110001110100001000100010", 
    16 => "10111101011010101001110111110100", 
    17 => "10111101110011111110111101101111", 
    18 => "00111101001011100101101001010001", 
    19 => "00111110001010100000011101100100", 
    20 => "00111110001100101010100111000010", 
    21 => "00111111000000011100101100101011", 
    22 => "00111101110100011101011000010011", 
    23 => "00111101001111110100111000110110", 
    24 => "00111110010110001111111101101110", 
    25 => "00111101101100010011001010111011", 
    26 => "00111110001000011110000001011000", 
    27 => "10111101100111111001000001011110", 
    28 => "00111101111111010000010101011101", 
    29 => "00111110000110001110101011010101", 
    30 => "10111101000100101100011011110100", 
    31 => "00111110011001010110000001011001", 
    32 => "00111110011110001110110000111010", 
    33 => "00111100101100001000100100100100", 
    34 => "10111110101011011101010001011010", 
    35 => "10111101101001111010111011000100", 
    36 => "10111101100101100111010000111010", 
    37 => "00111101010000011000110101000100", 
    38 => "00111101111000111110010111111001", 
    39 => "00111110011101010011001110110011", 
    40 => "10111110111001111110101010011110", 
    41 => "00111100110000101100000001011101", 
    42 => "10111110011110101010111111111000", 
    43 => "00111110100110000000001101010011", 
    44 => "00111110001001010110100110010101", 
    45 => "00111101000010011110100100101110", 
    46 => "10111100100010001100101010110000", 
    47 => "10111110110001111111110111111001", 
    48 => "10111110111110111010101100101011", 
    49 => "00111101111010010110001001100110", 
    50 => "00111110001100100011101110011011", 
    51 => "10111111000011101100011011010101", 
    52 => "10111110101100001000110101001000", 
    53 => "00111101001011111110100011101001", 
    54 => "00111111000011111000000001010110", 
    55 => "10111010100001010101010110000000", 
    56 => "10111101110010010101110010101001", 
    57 => "00111011101011101100100110000100", 
    58 => "00111101000001000101110111000000", 
    59 => "00111110001101111110010100001011", 
    60 => "00111110101101100110101101001000", 
    61 => "10111110000100010101101001110011", 
    62 => "10111111001110011000101111010000", 
    63 => "10111111010011101001011101111010", 
    64 => "10111110110100110001000111000001", 
    65 => "10111110100110010100010100110010", 
    66 => "00111110100011010001110011001111", 
    67 => "00111110001110111100101110110010", 
    68 => "00111110110100001010101100100111", 
    69 => "10111111001011110000000011100101", 
    70 => "00111110101100110110101110001100", 
    71 => "00111101111110001111010011011000", 
    72 => "00111101010100101101010010010010", 
    73 => "00111100001110011110001100110100", 
    74 => "10111110100001010000010111111010", 
    75 => "00111011101111111110001110010100", 
    76 => "00111101111101111000011001110011", 
    77 => "00111110000100010100001100111100", 
    78 => "00111110000001000111000111110010", 
    79 => "10111111000011010000011000000101", 
    80 => "00111111010001111001011011010010", 
    81 => "00111111000100101001000101000110", 
    82 => "00111110010111111000100111100111", 
    83 => "00111110100100000101001100000100", 
    84 => "00111110101110101000100101000001", 
    85 => "00111110001011101011110001111000", 
    86 => "00111110000101000100010001000001", 
    87 => "10111110011110100001110010111011", 
    88 => "10111110000101100111110000111100", 
    89 => "10111111001101001001000110001001", 
    90 => "00111111000001111001110100011101", 
    91 => "00111110111001001101101001001110", 
    92 => "00111111000101110010011011101001", 
    93 => "00111111001010101100001001001101", 
    94 => "00111110110111101111010000010110", 
    95 => "00111110100000110110101010111000", 
    96 => "10111110001000100011000000110100", 
    97 => "10111100010001111100001000010001", 
    98 => "00111110011111001101010100011111", 
    99 => "10111110110011011011001011000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity nn_inference_hwmm_layer1_layer1_weights_15 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of nn_inference_hwmm_layer1_layer1_weights_15 is
    component nn_inference_hwmm_layer1_layer1_weights_15_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    nn_inference_hwmm_layer1_layer1_weights_15_rom_U :  component nn_inference_hwmm_layer1_layer1_weights_15_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


